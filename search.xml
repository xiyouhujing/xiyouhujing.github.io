<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>将hexo博客部署到coding</title>
    <url>/2019/11/25/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>通信原理笔记（一）：通信系统的组成</title>
    <url>/2019/11/18/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%84%E6%88%90/</url>
    <content><![CDATA[<h4 id="通信系统一般模型"><a class="markdownIt-Anchor" href="#通信系统一般模型"></a> 通信系统一般模型</h4>
<p>对于电通信来说，首先要把消息转变成电信号，然后经过发送设备，将信号送入信道，在接收端利用接收设备对接收信号作相应的处理后，送给信宿再转换为原来的消息。这个过程可以用下图所示的通信系统一般模型来概括。</p>
<a id="more"></a>
<p><img src="//xiyouhujing.github.io/2019/11/18/通信原理笔记（一）：通信系统的组成/%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E4%B8%80%E8%88%AC%E6%A8%A1%E5%9E%8B.jpg" alt=""></p>
<p>1、信息源</p>
<p>信息源简称<strong>信源</strong>，其作用是把各种消息转换成原始电信号，根据消息的种类不同，信源可以分为<strong>模拟信源</strong>和<strong>数字信源</strong>。<strong>模拟信源</strong>输出连续的模拟信号，如话筒（声音-音频信号）、摄像机（图像-视频信号）；<strong>数字信源</strong>则输出离散的数字信号，如电传机（键盘字符-数字信号）、计算机等各种数字终端。并且，模拟信源送出的信号经数字化处理后也可以发送数字信号。</p>
<p>2、发送设备</p>
<p>发送设备的作用是生产适合于在信道中传输的信号，即使发送信号的特性和信道特性相匹配，具有抗信道干扰的能力，并且具有足够的功率以满足远距离传输的需要。因此，发送设备涵盖的内容很多，可能包含变换、放大、滤波、编码、调制等过程。对于多路传输系统，发送设备中还包括多路复用器。</p>
<p>3、信道</p>
<p>信道是一种物理媒质，用来将来自发送设备的信号传送到接收端。在<strong>无线信道</strong>中，信道可以是自由空间；在<strong>有线信道</strong>中看，可以是明线、电缆和光纤。信道即给信号以通路，也会对信号产生各种干扰和噪声。</p>
<p>上图中的噪声源是信道中的噪声及分散在通信系统其他各处的噪声的集中表示。噪声通常是随机的，形式多样的，它的出现干扰了正常的信号的传输。</p>
<p>4、接收设备</p>
<p>接收设备的功能是将信号放大和反变换（如译码、调解等），其目的是从受到减损的接收信号中正确恢复出原始电信号，对于多路复用信号，接收设备中还包括解除多路复用，实现正确分路的功能，此外，它还要尽可能减小在传输过程中噪声与干扰所带来的影响。</p>
<p>5、受信者</p>
<p>受信者简称<strong>信宿</strong>是传送消息的目的地，其功能与信源相反，即把原始电信号还原成相应的消息，如扬声器等。</p>
<h4 id="模拟通信系统模型和数字通信系统模型"><a class="markdownIt-Anchor" href="#模拟通信系统模型和数字通信系统模型"></a> 模拟通信系统模型和数字通信系统模型</h4>
<p>通信传输的消息是多种多样的，大致可以分为两大类：一类为<strong>连续消息</strong>；另一类称为<strong>离散消息</strong>。<strong>连续消息</strong>是指消息的状态连续变化或不可数的，例如连续变化的话音、图像等；<strong>离散消息</strong>则是指消息的状态是可数的或离散的，如符号、数据等。</p>
<p>消息的传递时通过它的物理载体——电信号来实现的，即把消息寄托在电信号的某一参量上（如连续波的幅度、频率或相位；脉冲波的幅度、宽度或位置）。按信号参量的取值方式不同，可以把信号分为两类：<strong>模拟信号</strong>和<strong>数字信号</strong>。如果电信号的参数取值连续（不可数、无穷多），则称之为<strong>模拟信号</strong>，模拟信号有时也称为<strong>连续信号</strong>，这里连续的含义时指某信号的某一参量连续变化，或者说在某一取值范围内可以取无穷多个值，而不一定在时间上也连续；如果电信号的参量仅可能取有限个值，则称之为<strong>数字信号</strong>，数字信号有时也称为离散信号，这个离散是指信号的某一参量是离散变化的，而不一定在时间上也离散。</p>
<p>通常，按照信道中传输的是模拟信号还是数字信号，相应地把通信系统分为<strong>模拟通信系统</strong>和<strong>数字通信系统</strong>。</p>
<p>1、模拟通信系统模型</p>
<p>模拟通信系统是利用模拟信号来传递信息的通信系统，其模型如下图所示，其中包含了两种重要变换。第一种变换是，在发送端把连续消息变换成原始电信号，在接收端进行相反的变换，这种变换由信源和信宿来完成；第二种变换是，把基带信号变换成适合在信道中传输的信号，并在接收端进行反变换，完成这种变换和反变换的通常是调制器和解调器。经过调制以后的信号称为<strong>已调信号</strong>，它由两个基本特征：一是携带有信息；而是适应在信道中传输。由于已调信号的频谱通常具有带通形式，因而已调信号又称为<strong>带通信号</strong>（也称为<strong>频带信号</strong>）。</p>
<p><img src="//xiyouhujing.github.io/2019/11/18/通信原理笔记（一）：通信系统的组成/%E6%A8%A1%E6%8B%9F%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B.jpg" alt=""></p>
<p>2、数字通信系统模型</p>
<p>数字通信系统是利用数字信号来传递信息系统，如下图所示，数字通信涉及的技术问题很多，其中主要有信源编码与译码、信道编码与译码、数字调制与解调、同步以及加密与解密等。</p>
<p><img src="//xiyouhujing.github.io/2019/11/18/通信原理笔记（一）：通信系统的组成/%E6%95%B0%E5%AD%97%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B.jpg" alt=""></p>
<p>1）信源编码与译码</p>
<p>信源编码有两个基本功能：一是提高信息传输的有效性，即通过某种数据压缩技术设法减少码元数目和降低码元速率。码元速率决定传输所占的带宽，而传输带宽反映了通信的有效性。二是完成模/数（A/D）转换，即当信息源给出的是模拟信号时，信源编码器将其转换成数字信号，以实现模拟信号的数字化传输。信源译码时信源编码的逆过程。</p>
<p>2）信道编码与译码</p>
<p>信道编码的目的时增强数字信号的抗干扰能力。数字信号在信道传输时受到噪声等影响后将会引起差错。为了减小差错，信道编码器对传输的信息码元按一定的规则加入保护成分（监督元），组成所谓“抗干扰编码”。接收端的信道译码器按相应的逆规则进行解码，从中发现错误或纠正错误，提高通信系统的可靠性。</p>
<p>3）加密与解密</p>
<p>在需要实现保密通信的场合，为了保证所传信息的安全，认为的将被传输的数字序列扰乱，即加上密码，这种处理过程叫做加密。在接收端利用与发送端相同的密码复制品对受到的数字序列进行解密，恢复原来的信息。</p>
<p>4）数字调制与解调</p>
<p>数字调制就是把数字基带信号的频谱搬移到高频处，形成适合在信道中传输的带通信号。基本的数字调制方式有振幅键控（ASK）、频移键控（FSK）、绝对相移键控（PSK）、相对（差分）相移键控（DPSK）。在接收端可以采用相干解调或者非相干解调还原数字基本基带信号。</p>
<p>5）同步</p>
<p>同步是使收发两端的信号在时间上保持步调一致，是保证数字通信系统有序、准确、可靠工作的前提条件。按照同步的功能不同，分为载波同步、位同步、群（帧）同步和网同步。</p>
<p>需要注意的是，上图是数字通信系统的一般化模型，实际上的数字痛惜系统不一定包括土中的所有环节，例如数字基带传输系统中，无需调制和解调；有的环节由于分散在各处，在图中也没有画出，例如同步。</p>
<h4 id="数字通信的特点"><a class="markdownIt-Anchor" href="#数字通信的特点"></a> 数字通信的特点</h4>
<p>数字通信的发展速度已明显超过模拟通信，成为当代通信技术的主流，数字通信具有以下优点：</p>
<ol>
<li>
<p>抗干扰能力强，且噪声不积累。数字通信系统中传输的是离散取值的数字波形，接收端的目标不是精确地还原被传输的波形。而是从受到噪声干扰的信号中判决出发送端所发送的是哪一个波形。</p>
</li>
<li>
<p>传输差错可控。在数字通信系统中，可通过信道编码技术进行检错与纠错，降低误码率，提高传输质量。</p>
</li>
<li>
<p>便于用于现代数字信号处理技术对数字信息进行处理、变换、存储。这种数字处理的灵活性表为可以将来自不同信源的信号综合到一起传输。</p>
</li>
<li>
<p>便于集成，使通信设备微型化，重量轻。</p>
</li>
<li>
<p>便于加密处理，且保密性好。</p>
</li>
</ol>
<p>数字通信的缺点是，一般需要较大的传输带宽。</p>
]]></content>
      <categories>
        <category>通信</category>
      </categories>
      <tags>
        <tag>通信原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Django开发大型企业网站</title>
    <url>/2019/11/15/Django%E5%BC%80%E5%8F%91%E5%A4%A7%E5%9E%8B%E4%BC%81%E4%B8%9A%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>LNMP环境搭建及zabbix服务搭建配置</title>
    <url>/2019/10/18/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<blockquote>
<p>在linux环境中安装nginx、mysql、php，搭建LNMP环境。搭建zabbix服务端，在客户机上安装zabbix客户端，基于zabbix客户端，编写一个脚本程序，检测linux客户端上特定软件包（本次指定openssl）的版本，上报到服务端</p>
</blockquote>
<a id="more"></a>
<h3 id="lnmp环境搭建"><a class="markdownIt-Anchor" href="#lnmp环境搭建"></a> LNMP环境搭建</h3>
<h4 id="环境说明"><a class="markdownIt-Anchor" href="#环境说明"></a> 环境说明：</h4>
<p>OS：   centos7.7_x64</p>
<p>nginx： nginx-1.8.0</p>
<p>php：   php-5.6.28</p>
<p>mysql： mysql-5.7.28</p>
<p>zabbix：zabbix-3.4.3</p>
<h4 id="安装前准备"><a class="markdownIt-Anchor" href="#安装前准备"></a> 安装前准备</h4>
<h5 id="关闭防火墙和selinux"><a class="markdownIt-Anchor" href="#关闭防火墙和selinux"></a> 关闭防火墙和selinux</h5>
<p># systemctl status firewalld  //查看防火墙状态</p>
<p># systemctl stop firewalld   //停止防火墙</p>
<p># systemctl disable firewalld.service  //禁止开机启用防火墙</p>
<p># vi /etc/selinux/config    //进入配置文件  设置：SELINUX=disabled（重启才生效）</p>
<h5 id="准备yum源"><a class="markdownIt-Anchor" href="#准备yum源"></a> 准备yum源</h5>
<p># wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p>
<p># yum -y install epel-release</p>
<h5 id="安装依赖关系"><a class="markdownIt-Anchor" href="#安装依赖关系"></a> 安装依赖关系</h5>
<p># yum install pcre*   //为了支持rewrite功能</p>
<p># yum install openssl  openssl-devel</p>
<p>#yum install gcc make gd-devel libjpeg-devel libpng-devel libxml2-devel bzip2-devel libcurl-devel -y  //编译需要的依赖包</p>
<h4 id="nginx安装"><a class="markdownIt-Anchor" href="#nginx安装"></a> nginx安装</h4>
<h5 id="下载安装包"><a class="markdownIt-Anchor" href="#下载安装包"></a> 下载安装包</h5>
<p># wget <a href="http://nginx.org/download/nginx-1.8.0.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.8.0.tar.gz</a></p>
<h5 id="编译安装"><a class="markdownIt-Anchor" href="#编译安装"></a> 编译安装</h5>
<p># tar –zxvf nginx-1.8.0.tar.gz -C /usr/local     //解压nginx到/usr/local路径下</p>
<p># cd /usr/local/nginx-1.8.0/</p>
<p>#./configure --user=nobody --group=nobody --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --with-http_sub_module --with-http_ssl_module</p>
<p># make &amp;&amp; make install</p>
<h5 id="启动nginx服务"><a class="markdownIt-Anchor" href="#启动nginx服务"></a> 启动nginx服务</h5>
<p># /usr/local/nginx/sbin/nginx</p>
<p>打开浏览器访问此机器的 IP，如果浏览器出现 Welcome to nginx! 则表示 Nginx 已经安装并运行成功。</p>
<h5 id="编辑nginx主配置文件"><a class="markdownIt-Anchor" href="#编辑nginx主配置文件"></a> 编辑nginx主配置文件</h5>
<p># vi /usr/local/nginx/conf/nginx.conf</p>
<p>主要对server项做如下的改动：</p>
<p>​       server {</p>
<p>​        listen       80;</p>
<p>​        server_name  localhost;</p>
<p>​        location / {</p>
<p>​            root   /usr/local/nginx-1.8.0/html/;</p>
<p>​            index  index.html index.htm index.php;</p>
<p>​            autoindex on;</p>
<p>​        }</p>
<p>autoindex on;</p>
<p>​        autoindex_exact_size on;</p>
<p>autoindex_localtime on;</p>
<p>​        location ~ .php$ {</p>
<p>​            root           /usr/loca/nginx-1.8.0/html;</p>
<p>​            fastcgi_pass   127.0.0.1:9000;</p>
<p>​            fastcgi_index  index.php;</p>
<p>​            fastcgi_param  SCRIPT_FILENAME  /usr/local/nginx-1.8.0/html$fastcgi_script_name;</p>
<p>​            # fastcgi_param  SCRIPT_FILENAME  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>o</mi><mi>c</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>r</mi></msub><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">document_root</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span></span></span></span>fastcgi_script_name;</p>
<p>​            include        fastcgi_params;</p>
<p>​        }</p>
<p>}</p>
<h5 id="重启nginx"><a class="markdownIt-Anchor" href="#重启nginx"></a> 重启nginx</h5>
<p># /usr/local/nginx/sbin/nginx –s reload</p>
<h4 id="安装mysql"><a class="markdownIt-Anchor" href="#安装mysql"></a> 安装mysql</h4>
<h5 id="下载和安装mysql57"><a class="markdownIt-Anchor" href="#下载和安装mysql57"></a> 下载和安装mysql5.7</h5>
<p># wget <a href="http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm" target="_blank" rel="noopener">http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</a></p>
<p># yum localinstall mysql57-community-release-el7-7.noarch.rpm</p>
<p># yum repolist enabled | grep “mysql.<em>-community.</em>”</p>
<p># yum install mysql-community-server</p>
<p># systemctl start mysqld.service</p>
<p># grep ‘temporary password’ /var/log/mysqld.log  //记录随机密码</p>
<p># mysql_secure_installation  //初始化</p>
<p># mysql -u root –p  //用随机密码登陆</p>
<h5 id="新建以及初始化数据库zabbix"><a class="markdownIt-Anchor" href="#新建以及初始化数据库zabbix"></a> 新建以及初始化数据库zabbix</h5>
<p>&gt; create database zabbix character set utf8;;</p>
<p>&gt; use zabbix;</p>
<p>&gt; source /root/zabbix-3.4.3/database/mysql/schema.sql;  // 在安装完zabbix后的操作</p>
<p>&gt; source /root/zabbix-3.4.3/database/mysql/data.sql;     // 在安装完zabbix后的操作</p>
<p>&gt; source /root/zabbix-3.4.3/database/mysql/images.sql;   // 在安装完zabbix后的操作</p>
<h4 id="安装php"><a class="markdownIt-Anchor" href="#安装php"></a> 安装php</h4>
<h5 id="安装依赖扩展包"><a class="markdownIt-Anchor" href="#安装依赖扩展包"></a> 安装依赖扩展包</h5>
<p># yum -y install libmcrypt libmcrypt-devel</p>
<p>mhash mhash-devel mcrypt libxml2-devel bzip2-devel libcurl-devel libjpeg-devel libpng<br>
libpng-devel freetype freetype-devel libmcrypt libmcrypt-devel</p>
<h5 id="下载php"><a class="markdownIt-Anchor" href="#下载php"></a> 下载php</h5>
<p># wget <a href="http://php.net/get/php-5.6.28.tar.gz/from/this/mirror" target="_blank" rel="noopener">http://php.net/get/php-5.6.28.tar.gz/from/this/mirror</a> -O php-5.6.28.tar.gz</p>
<h5 id="编译安装php"><a class="markdownIt-Anchor" href="#编译安装php"></a> 编译安装php</h5>
<p># tar –zxvf php-5.6.28.tar.gz</p>
<p># cd php-5.6.28</p>
<p># ./configure -prefix=/usr/local/php -with-config-file-path=/usr/local/php/etc -with-bz2 -with-curl -enable-ftp -enable-sockets -disable-ipv6 -with-gd -with-jpeg-dir=/usr/local -with-png-dir=/usr/local -with-freetype-dir=/usr/local -enable-gd-native-ttf -with-iconv-dir=/usr/local -enable-mbstring -enable-calendar -with-gettext -with-libxml-dir=/usr/local -with-zlib -with-pdo-mysql=mysqlnd -with-mysqli=mysqlnd -with-mysql=mysqlnd -with-ldap -enable-dom -enable-xml -enable-fpm -with-libdir=lib64 -enable-bcmath</p>
<p># make &amp;&amp; make install</p>
<h5 id="准备php和php-fpm的配置文件"><a class="markdownIt-Anchor" href="#准备php和php-fpm的配置文件"></a> 准备php和php-fpm的配置文件</h5>
<p>编辑php-5.6.28解压文件下的php.ini-production</p>
<p># vi /php-5.6.28/ php.ini-production</p>
<p>修改如下参数：</p>
<p>max_execution_time = 300</p>
<p>memory_limit = 128M</p>
<p>​      post_max_size = 16M</p>
<p>​      upload_max_filesize = 2M</p>
<p>​      max_input_time = 300</p>
<p>​      date.timezone = PRC</p>
<p># cp /php-5.6.28php.ini-production /usr/local/php/etc/php.ini</p>
<p># cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</p>
<h5 id="编辑php-fpm的配置文件"><a class="markdownIt-Anchor" href="#编辑php-fpm的配置文件"></a> 编辑php-fpm的配置文件</h5>
<p># /usr/local/php/etc/php-fpm.conf</p>
<p>取消pid的注释：</p>
<p>……</p>
<p>[global]</p>
<p>pid = run/php-fpm.pid</p>
<p>……</p>
<h5 id="启动php-fpm占用端口9000"><a class="markdownIt-Anchor" href="#启动php-fpm占用端口9000"></a> 启动php-fpm，占用端口9000</h5>
<p># /usr/local/php/sbin/php-fpm</p>
<h5 id="测试php"><a class="markdownIt-Anchor" href="#测试php"></a> 测试php</h5>
<p>在/usr/local/nginx-1.8.0/html/目录下新建test.php：</p>
<p>vi /usr/local/nginx-1.8.0/html/test.php</p>
<p>内容如下：</p>
<p>​    &lt;?php</p>
<p>​    phpinfo();</p>
<p>​    ?&gt;</p>
<p>重启nginx：</p>
<p># /usr/local/nginx/sbin/nginx -s reload</p>
<p>在浏览器中输入：<a href="http://192.168.112.101/test.php" target="_blank" rel="noopener">http://192.168.112.101/test.php</a> ，出现以下画面则说明配置php成功</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/php%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2.png" alt=""></p>
<h3 id="zabbix-server安装与配置"><a class="markdownIt-Anchor" href="#zabbix-server安装与配置"></a> zabbix server安装与配置</h3>
<h4 id="安装zabbix"><a class="markdownIt-Anchor" href="#安装zabbix"></a> 安装zabbix</h4>
<h5 id="安装依赖包"><a class="markdownIt-Anchor" href="#安装依赖包"></a> 安装依赖包</h5>
<p># yum install mysql-devel –y</p>
<p>如果编译遇到mysql文件冲突，则可能是版本冲突，使用rpm下载：</p>
<p># wget <a href="ftp://ftp.pbone.net/mirror/dev.mysql.com/pub/Downloads/MySQL-5.7/mysql-community-devel-5.7.25-1.el7.x86_64.rpm" target="_blank" rel="noopener">ftp://ftp.pbone.net/mirror/dev.mysql.com/pub/Downloads/MySQL-5.7/mysql-community-devel-5.7.25-1.el7.x86_64.rpm</a></p>
<p># yum localinstall mysql-community-devel-5.7.25-1.el7.x86_64.rpm</p>
<p># yum install net-snmp-devel –y</p>
<p># yum install libevent-devel –y</p>
<h5 id="下载zabbix"><a class="markdownIt-Anchor" href="#下载zabbix"></a> 下载zabbix</h5>
<p># wget <a href="https://nchc.dl.sourceforge.net/project/zabbix/ZABBIX%20Latest%20Stable/3.4.3/zabbix-3.4.3.tar.gz" target="_blank" rel="noopener">https://nchc.dl.sourceforge.net/project/zabbix/ZABBIX Latest Stable/3.4.3/zabbix-3.4.3.tar.gz</a></p>
<h4 id="编译安装zabbix"><a class="markdownIt-Anchor" href="#编译安装zabbix"></a> 编译安装zabbix</h4>
<p># tar –zxvf zabbix-3.4.3</p>
<p># cd zabbix-3.4.3</p>
<p>#./configure --prefix=/usr/local/zabbix --with-mysql --with-net-snmp --with-libcurl --enable-server --enable-agent --enable-proxy</p>
<p># make &amp;&amp; make install</p>
<p>安装完成后记得回到数据库安装步骤，导入数据库</p>
<h4 id="配置server和agentd"><a class="markdownIt-Anchor" href="#配置server和agentd"></a> 配置server和agentd</h4>
<h5 id="编辑zabbix_serverconf"><a class="markdownIt-Anchor" href="#编辑zabbix_serverconf"></a> 编辑zabbix_server.conf</h5>
<p>vi /usr/local/zabbix/etc/zabbix_server.conf</p>
<p>做如下的改动：</p>
<p>​    DBName=zabbix</p>
<p>​    DBUser=root         // 如果给zabbix数据库创建了用户，则改为zabbix数据库用户</p>
<p>​    DBPassword=123456  // zabbix数据库的密码</p>
<p>​    DBPort=3306</p>
<h5 id="编辑zabbix_agentdconf"><a class="markdownIt-Anchor" href="#编辑zabbix_agentdconf"></a> 编辑zabbix_agentd.conf</h5>
<p>vi /usr/local/zabbix/etc/zabbix_agentd.conf</p>
<p>做如下改动：</p>
<p>​    Server=127.0.0.1</p>
<p>​    ServerActive=127.0.0.1</p>
<p>​	Hostname=Zabbix server</p>
<h5 id="配置nginx-zabbix"><a class="markdownIt-Anchor" href="#配置nginx-zabbix"></a> 配置nginx zabbix</h5>
<p>拷贝zabbix前端文件到nginx的html文件夹中：</p>
<p># cp -r /root/zabbix-3.4.3/frontends/php/*   /usr/local/nginx-1.8.0/html/zabbix</p>
<p># chmod –R 777 /usr/local/nginx-1.8.0/html</p>
<h5 id="启动zabbix-server和zabbix-agent"><a class="markdownIt-Anchor" href="#启动zabbix-server和zabbix-agent"></a> 启动zabbix server和zabbix agent</h5>
<p># /usr/local/zabbix/sbin/zabbix_server</p>
<p># /usr/local/zabbix/sbin/zabbix_agentd</p>
<h4 id="界面配置zabbix"><a class="markdownIt-Anchor" href="#界面配置zabbix"></a> 界面配置zabbix</h4>
<h5 id="使用浏览器访问"><a class="markdownIt-Anchor" href="#使用浏览器访问"></a> 使用浏览器访问</h5>
<p><a href="http://192.168.112.101/zabbix/setup.php" target="_blank" rel="noopener">http://192.168.112.101/zabbix/setup.php</a></p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E8%AE%BF%E9%97%AEzabbix%E9%85%8D%E7%BD%AE%E9%A1%B5%E9%9D%A2.png" alt=""></p>
<p>在检测信息时，可查看具体的报错信息对/usr/local/php/etc/php.ini文件进行编辑解决</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E4%BF%A1%E6%81%AF%E6%A3%80%E6%B5%8B%E9%A1%B5%E9%9D%A2.png" alt=""></p>
<p>对应/usr/local/zabbix/etc/zabbix_server.conf文件填写数据库名称、用户和密码：</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt=""></p>
<p>host与port不需要修改，name自定义</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/zabbix%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF.png" alt=""></p>
<p>确认信息,正确点击下一步</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E5%AE%89%E8%A3%85%E5%89%8D%E6%B1%87%E6%80%BB.png" alt=""></p>
<p>根据以下页面的提示下载配置文件，并将配置文件保存到/usr/local/nginx-1.8.0/html/zabbix/conf/zabbix.conf.php，点击“完成”</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/zabbix%E9%85%8D%E7%BD%AE%E5%AE%8C%E6%88%90.png" alt=""></p>
<p>配置完成后进入登陆页面，默认登陆名为：admin，密码为：zabbix</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/zabbix%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png" alt=""></p>
<p>在跳转的页面中点击右上角的小人头像可以设置web页面的语言：</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/zabbix%E9%A1%B5%E9%9D%A2%E8%AF%AD%E8%A8%80%E8%AE%BE%E7%BD%AE.png" alt=""></p>
<h5 id="添加监控信息"><a class="markdownIt-Anchor" href="#添加监控信息"></a> 添加监控信息</h5>
<p>修改监控管理机zabbix server：配置&gt;&gt;主机&gt;&gt;Zabbix server</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E4%BF%AE%E6%94%B9%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86%E6%9C%BA.png" alt=""></p>
<p>主机名称： 要与主机名相同，这是zabbix server程序用的</p>
<p>可见名称： 显示在zabbix网页上的，给我们看的</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E9%85%8D%E7%BD%AE%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86%E6%9C%BA.png" alt=""></p>
<p>修改后，要将下面的已启用要勾上。添加完成就有了管理机的监控主机，注意ZBX要显示为绿色</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E7%9B%91%E6%8E%A7%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%AE%8C%E6%88%90.png" alt=""></p>
<h3 id="监控客户机的openssl版本"><a class="markdownIt-Anchor" href="#监控客户机的openssl版本"></a> 监控客户机的openssl版本</h3>
<h4 id="客户机安装zabbix-agent"><a class="markdownIt-Anchor" href="#客户机安装zabbix-agent"></a> 客户机安装zabbix agent</h4>
<h5 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖"></a> 安装依赖</h5>
<p># yum -y install net-snmp-devel</p>
<p>libxml2-devellibcurl-deve libevent libevent-devel</p>
<h5 id="安装zabbix-agent"><a class="markdownIt-Anchor" href="#安装zabbix-agent"></a> 安装zabbix agent</h5>
<p># yum install zabbix-agent –y</p>
<h5 id="编辑配置文件"><a class="markdownIt-Anchor" href="#编辑配置文件"></a> 编辑配置文件</h5>
<p># vi /etc/zabbix/zabbix_agentd.conf</p>
<p>修改server、hostname、serveractive信息：</p>
<p>Server=192.168.112.101   //zabbix server的ip</p>
<p>ServerActive=192.168.112.101   //和server相同</p>
<p>Hostname=centos6   //记住hostname，在zabbix server中添加主机时用到</p>
<h5 id="启动zabbix-agent"><a class="markdownIt-Anchor" href="#启动zabbix-agent"></a> 启动zabbix agent</h5>
<p># /usr/sbin/zabbix_agentd</p>
<h4 id="zabbix-server添加监控主机"><a class="markdownIt-Anchor" href="#zabbix-server添加监控主机"></a> zabbix server添加监控主机</h4>
<h5 id="创建主机"><a class="markdownIt-Anchor" href="#创建主机"></a> 创建主机</h5>
<p>配置&gt;&gt;主机，主机名称与zabbix_agentd.conf中的一致，IP地址填写客户机的IP地址</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E5%88%9B%E5%BB%BA%E4%B8%BB%E6%9C%BA.png" alt=""></p>
<h5 id="客户端自定义监控项"><a class="markdownIt-Anchor" href="#客户端自定义监控项"></a> 客户端自定义监控项</h5>
<p>本次监控的是客户机上的openssl版本。</p>
<p>（1）查看客户端openssl版本：</p>
<p># yum info openssl</p>
<p>可以看到两组信息，一个是已安装的openssl软件包的信息，还有一组是可安装的openssl软件包的信息，其中，客户端已安装版本是1.0.1e，可安装版本是1.0.2k，我们需要让zabbix server自动监控客户端的openssl版本，并在版本较低时发出告警。</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84openssl%E4%BF%A1%E6%81%AF.png" alt=""></p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E5%8F%AF%E5%AE%89%E8%A3%85%E7%9A%84openssl%E4%BF%A1%E6%81%AF.png" alt=""></p>
<p>2）修改客户端配置文件zabbix_agentd.conf</p>
<p># vi /etc/zabbix/zabbix_agentd.conf</p>
<p>搜索 ‘UnsafeUserParameters’取消注释#号，将‘0’改为‘1’</p>
<p>Include=/etc/zabbix/zabbix_agentd.d/*.conf</p>
<p># cd cd /etc/zabbix/zabbix_agentd.d/</p>
<p>自定义监控项的key值，格式为UserParameter=<key>,<shell command="">，key值不能与现有的重复。</shell></key></p>
<p># vi userparameter_openssl.conf   // 新建自定义监控项的配置文件，内容如下</p>
<p>UserParameter=openssl_version,yum info openssl|awk -F: ‘/^Version/{print $2;exit;}’</p>
<p>其中openssl_version为key值，yum info openssl|awk -F: '/^Version/{print $2;exit;}'为获取openssl版本号的命令。</p>
<h5 id="在server端配置"><a class="markdownIt-Anchor" href="#在server端配置"></a> 在server端配置</h5>
<p>（1）在zabbix服务端使用zabbix-get</p>
<p># yum install zabbix-get –y</p>
<p># zabbix_get -s 192.168.112.101 -p 10050 -k “openssl_version”</p>
<p>结果为：</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/server%E7%AB%AF%E4%BD%BF%E7%94%A8zabbix_get.png" alt=""></p>
<p>其中-s参数指定客户端地址，-p指定端口，-k指定key值，这里获取到客户端的openssl版本号为1.0.1e。</p>
<p>（2）在zabbix的web界面添加自定义监控项</p>
<p>点击：配置&gt;&gt;主机&gt;&gt;监控项</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E9%A1%B9.png" alt=""></p>
<p>在跳转的页面中点击“创建监控项”，跳转到如下界面，并添加监控项信息，其中的键值要去自定义的key值对应，即openssl_version，因为获取的是字符串，所以数据类型选择“字符”，更新时间间隔，历史数据保留时长等根据所添加的监控项合理设置，这里为了尽快看到数据，将更新时间设置为30秒。</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E9%A1%B9.png" alt=""></p>
<p>在页面最后勾选“已启用”，点击“添加”。</p>
<p>点击：监测中&gt;&gt;最新数据&gt;&gt;监控项的历史记录，就可以看到监控的结果</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E8%87%AA%E5%AE%9A%E4%B9%89openssl%E7%9B%91%E6%8E%A7%E7%9A%84%E7%9B%91%E6%8E%A7%E7%BB%93%E6%9E%9C.png" alt=""></p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E6%98%BE%E7%A4%BA%E5%AE%A2%E6%88%B7%E6%9C%BA%E7%9A%84openssl%E7%89%88%E6%9C%AC.png" alt="显示客户机的openssl版本"></p>
<p>（3）设置触发器</p>
<p>点击：配置&gt;&gt;主机&gt;&gt;触发器</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E5%88%9B%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8.png" alt=""></p>
<p>在跳转的页面中点击右上角的“创建触发器”，在名称中填写告警的提示信息，严重性可以自己选择，这里选择的是“警告”，即如果监控到的客户机openssl版本与指定的版本不一致，将会出现名为“The openssl needs<br>
to be updated”的警告信息。</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E9%85%8D%E7%BD%AE%E8%A7%A6%E5%8F%91%E5%99%A8.png" alt=""></p>
<p>在表达式中填写规则，点击右侧的“添加”，在弹出的窗口中填入规则信息，监控项选择我们我们创建的监控项openssl，功能选择“查找字符串V的最近值……”，V则填写我们指定的openssl版本号，最后点击插入。</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E8%AE%BE%E7%BD%AE%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6.png" alt=""></p>
<p>勾选页面下面的“已启用”，最后点击“添加”。</p>
<h5 id="监控结果"><a class="markdownIt-Anchor" href="#监控结果"></a> 监控结果</h5>
<p>点击：检测中&gt;&gt;仪表盘，可以显示问题信息，由于我们客户机的openssl版本是1.0.1e，而我们指定的版本是1.0.2k，所以触发了“The openssl needs to be updated”的警告信息</p>
<p><img src="//xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/%E8%A7%A6%E5%8F%91%E8%AD%A6%E5%91%8A%E4%BF%A1%E6%81%AF.png" alt=""></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>Java开发环境配置</title>
    <url>/2019/09/27/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<blockquote>
<p>下载安装java开发工具JDK，以及进行环境的配置，下载安装java开发的ide，因为eclipse是使用较为广泛的java开发ide，所以这里安装的是eclipse。另外，也可以了解一下IntelliJ IDEA（收费的），我觉得IDEA用得更顺手。当然了，都只是开发工具，看拿个更适合自己吧，用得开心就行。</p>
</blockquote>
<a id="more"></a>
<h3 id="下载安装jdk"><a class="markdownIt-Anchor" href="#下载安装jdk"></a> 下载安装JDK</h3>
<p>1.JDK是Java开发工具，下载地址为：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a> ，点击如下图片中的按钮：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/Java开发环境配置/%E4%B8%8B%E8%BD%BD1.png" alt=""></p>
<p>2.在跳转的页面中选择接受许可，之后根据自己的系统选择对应的安装程序，本文window 64为例，如下：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/Java开发环境配置/%E4%B8%8B%E8%BD%BD2.png" alt="下载2"></p>
<p>3.双击安装文件，然后提示的安装步骤进行安装即可，可以修改JDK的安装路径，例如我的安装路径为：D:\JDK，记住安装路径，在接下来配置环境变量中需要用到。</p>
<h3 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h3>
<p>1.安装完成后，邮件“我的电脑”/“此电脑”，点击“属性”，选择“高级系统设置”，如下图：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/Java开发环境配置/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F1.png" alt="环境变量1"></p>
<p>2.选择“高级”选项卡，点击“环境变量”，如下图：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/Java开发环境配置/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F2.png" alt="环境变量2"></p>
<p>3.在“系统变量”中分别设置JAVA_HOME、CLASSPATH、PATH三个属性，如果三个属性不存在，则新建，存在则选定后编辑，变量参数设置如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">变量名</th>
<th style="text-align:left">变量值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">JAVA_HOME</td>
<td style="text-align:left">D:\JDK      (根据自己的安装路径选择)</td>
</tr>
<tr>
<td style="text-align:center">CLASSPATH</td>
<td style="text-align:left">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;   （注意最前面有.; 符号用英文）</td>
</tr>
<tr>
<td style="text-align:center">PATH</td>
<td style="text-align:left">%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin  （win10中双击PATH后分条添加，否则无法识别）</td>
</tr>
</tbody>
</table>
<h3 id="测试jdk是否安装成功"><a class="markdownIt-Anchor" href="#测试jdk是否安装成功"></a> 测试JDK是否安装成功</h3>
<p>1.ctrl+R，在弹出的对话框中输入cmd，回车。</p>
<p>2.在弹出的命令框中，输入java -version命令，如果出现如下结果，则说明java环境配置成功：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/Java开发环境配置/%E6%B5%8B%E8%AF%951.png" alt="测试1"></p>
<h3 id="安装eclipse"><a class="markdownIt-Anchor" href="#安装eclipse"></a> 安装Eclipse</h3>
<p>目前市场上用于java开发的IDE比较多，比较推荐Eclipse和IntelliJ IDEA，IDEA功能很强大，但是要收费，Eclipse是免费开源的java开发工具，也是目前使用较多的开发工具，所以这里推荐安装Eclipse。</p>
<p>1.下载eclipse的安装文件，下载地址为：<a href="https://www.eclipse.org/downloads/packages/" target="_blank" rel="noopener">https://www.eclipse.org/downloads/packages/</a> ，选择Eclipse IDE for Committers，并根据自己的电脑系统选择相应的版本，本次选择windows 64：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/Java开发环境配置/%E4%B8%8B%E8%BD%BD3.png" alt="下载3"></p>
<p>2.在跳转的界面中，默认的下载地址是日本一所大学，此时点击“select another mirror”，然后将页面往下拉，选择中国的镜像，这样下载速度较快，这里选择大连东软信息学院或者中国科技大学镜像，如下：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/Java开发环境配置/%E4%B8%8B%E8%BD%BD4.png" alt="下载4"></p>
<p><img src="//xiyouhujing.github.io/2019/09/27/Java开发环境配置/%E4%B8%8B%E8%BD%BD5.png" alt="下载5"></p>
<p>3.选择镜像之后，开始下载，下载完成后的文件名为eclipse-committers-2019-09-R-win32-x86_64.zip，解压，运行eclipse.exe。按照步骤安装。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JDK</tag>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter安装与使用</title>
    <url>/2019/09/27/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<blockquote>
<p>JMeter是基于Java的测试工具，主要对web应用和软件进行接口测试和压力测试。</p>
</blockquote>
<a id="more"></a>
<h3 id="安装前准备"><a class="markdownIt-Anchor" href="#安装前准备"></a> 安装前准备</h3>
<p>在安装配置JMeter之前，需要确定电脑是否安装有Java环境，可以利用命令提示符查验：</p>
<p>1.ctrl + R，之后输入cmd，在弹出的命令行窗口中输入java -veision，如果出现如下结果，则表明电脑中存在Java环境，接下来便可以进行JMeter的安装：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/cmd%E6%88%AA%E5%9B%BE.png" alt=""></p>
<p>2.如果电脑中没有java环境，则首先要下载和配置java的开发工具包JDK，具体步骤参考：<a href="https://xiyouhujing.github.io/2019/09/27/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">https://xiyouhujing.github.io/2019/09/27/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</a></p>
<h3 id="jmeter下载"><a class="markdownIt-Anchor" href="#jmeter下载"></a> Jmeter下载</h3>
<p>1.进入Jmeter官网http://jmeter.apache.org/，点击如下按钮：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E4%B8%8B%E8%BD%BD1.png" alt="下载1"></p>
<p>2.在跳转的页面中选择版本下载，如图我选择下载的为zip压缩文件：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E4%B8%8B%E8%BD%BD2.png" alt="下载2"></p>
<p>3.将下载下来的压缩文件解压，记住文件的路径，本文的路径为：D:\Jmeter\apache-jmeter-5.1.1。另外，因为下载下来的是jmeter5.1，需要注意的是对应的jdk版本不能太低。</p>
<h3 id="jmeter环境变量配置"><a class="markdownIt-Anchor" href="#jmeter环境变量配置"></a> Jmeter环境变量配置</h3>
<p>1.右键“我的电脑”/“此电脑”，点击“属性”，选择“高级系统设置”：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F1.png" alt="环境变量1"></p>
<p>2.选择“高级”选项卡，点击“环境变量”：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F2.png" alt="环境变量2"></p>
<p>3.在“系统变量”中，分别设置JMETER_HOME和CLASSPATH属性，如果属性不存在，则新建，存在则编辑，具体的参数如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">变量名</th>
<th>变量值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">JMETER_HOME</td>
<td>D:\Jmeter\apache-jmeter-5.1.1   （jmeter的解压路径）</td>
</tr>
<tr>
<td style="text-align:center">CLASSPATH</td>
<td>%JMETER_HOME%\lib\ext\ApacheJMeter_core.jar;%JMETER_HOME%\lib\jorphan.jar;%JMETER_HOME%\lib\logkit-2.0.jar;</td>
</tr>
</tbody>
</table>
<h3 id="测试是否安装配置成功"><a class="markdownIt-Anchor" href="#测试是否安装配置成功"></a> 测试是否安装配置成功</h3>
<p>1.进入jmeter的安装路径，进入bin文件夹，找到jmeter.bat：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E6%B5%8B%E8%AF%951.png" alt="测试1"></p>
<p>2.双击jmeter.bat文件，此时会出现如下命令窗口，在jmeter工作期间，该窗口都不能关闭</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E6%B5%8B%E8%AF%952.png" alt="测试2"></p>
<p>3.以上窗口正常出现后，稍等片刻会出现jmeter的工作界面，如下图：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E6%B5%8B%E8%AF%953.png" alt="测试3"></p>
<h3 id="优化jmeter的使用"><a class="markdownIt-Anchor" href="#优化jmeter的使用"></a> 优化jmeter的使用</h3>
<p>1.我们发现，每次需要使用jmeter的时候必须进入它的安装文件，再进入bin文件，双击jmeter.bat，这么操作比较麻烦。因此我们可以将该文件发送到桌面生成快捷方式：右键jmeter.bat—&gt;发送到—&gt;桌面快捷方式。</p>
<p>2.如果觉得发送到桌面的快捷方式图标不好看，和桌面其他快捷方式格格不入，我们还可以修改该快捷方式的图标：右键该快捷方式，选择属性，在出现的窗口中选择“快捷方式”选项卡，点击下方的“更改图标”按钮，如下：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E4%BF%AE%E6%94%B9%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F.png" alt="修改快捷方式"></p>
<p>3.在弹出的窗口中可以选择系统自带的图标：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E4%BF%AE%E6%94%B9%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F2.png" alt="修改快捷方式2"></p>
<p>4.如果想自定义一个图标，可以网上下载一个自己喜欢的图标（ <a href="JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%5C1.ico">1.ico</a> ），<strong>保存为ico格式</strong>，点击“更改图标”窗口的浏览按钮，选择自己想要的图标，点击确定，图标修改完成。</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E4%BF%AE%E6%94%B9%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F3.png" alt=""></p>
<p>5.如果使用默认的jmeter.bat启动的话，会出现一个CMD命令窗口之后再启动jmeter。如果不想每次点击jmeter的快捷方式都要打开命令窗口，可以进行如下修改：</p>
<p>右键jmeter.bat快捷方式，点击属性，修改目标和启始位置（<strong>根据实际的jmeter解压路径填写</strong>）：</p>
<p>目标：D:\Jmeter\apache-jmeter-5.1.1\bin\ApacheJMeter.jar</p>
<p>起始位置：D:\Jmeter\apache-jmeter-5.1.1\bin</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E6%9B%B4%E6%94%B9%E8%B7%AF%E5%BE%84.png" alt=""></p>
<p><strong>注意：默认ApacheJMeter.jar的打开方式是解压工具winrar，这里需要更改打开方式</strong></p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F.png" alt=""></p>
<h3 id="使用jmeter进行测试"><a class="markdownIt-Anchor" href="#使用jmeter进行测试"></a> 使用Jmeter进行测试</h3>
<h4 id="更改jmeter默认语言"><a class="markdownIt-Anchor" href="#更改jmeter默认语言"></a> 更改JMeter默认语言</h4>
<p>点击【options】&gt;【choose language】变为简体中文，方便操作，如下图：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E6%9B%B4%E6%94%B9%E8%AF%AD%E8%A8%80.png" alt=""></p>
<h4 id="创建线程组"><a class="markdownIt-Anchor" href="#创建线程组"></a> 创建线程组</h4>
<p>1、在“测试计划”上右键，依次选择【添加】&gt;【线程（用户）】&gt;【线程组】</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E6%B7%BB%E5%8A%A0%E7%BA%BF%E7%A8%8B.png" alt=""></p>
<p>2、在线程组界面设置线程数和循环次数，我这里设置线程数为100，循环一次</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E8%AE%BE%E7%BD%AE%E7%BA%BF%E7%A8%8B%E6%95%B0.png" alt=""></p>
<h4 id="添加http请求默认值"><a class="markdownIt-Anchor" href="#添加http请求默认值"></a> 添加HTTP请求默认值</h4>
<p>1、在刚刚创建的线程组上右键，依次选择【添加】&gt;【配置元件】&gt;【HTTP请求默认值】</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E9%85%8D%E7%BD%AE%E5%85%83%E4%BB%B6.png" alt=""></p>
<p>2、在配置元件界面填写我们需要测试的程序协议、地址和端口，如下图所示：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E9%85%8D%E7%BD%AE%E5%85%83%E4%BB%B62.png" alt=""></p>
<h4 id="构造http请求"><a class="markdownIt-Anchor" href="#构造http请求"></a> 构造HTTP请求</h4>
<p>1、在线程组上右键，依次选择【添加】&gt;【取样器】&gt;【HTTP请求】,如下图：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/HTTP%E8%AF%B7%E6%B1%82.png" alt=""></p>
<p>2、由于我们刚才在HTTP默认值中设置了默认路径，我们这里使用默认路径的话，就在http请求界面的路径中输入反斜杠“/”就行，如下图：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/HTTP%E8%AF%B7%E6%B1%822.png" alt=""></p>
<p>其中消息体数据根据实际情况填写，可以无参数。</p>
<h4 id="添加http请求头"><a class="markdownIt-Anchor" href="#添加http请求头"></a> 添加HTTP请求头</h4>
<p>1、在线程组上右键，依次选择【添加】&gt;【配置元件】&gt;【HTTP信息头管理器】，如下图：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/HTTP%E4%BF%A1%E6%81%AF%E5%A4%B4.png" alt=""></p>
<p>2、因为HTTP请求中没有传输数据，所以，这里设置为Content-Type:application/text（如果在HTTP请求中传入了数据，并且为json格式的数据，则可以设置为Content-Type:application/json）</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/HTTP%E4%BF%A1%E6%81%AF%E5%A4%B42.png" alt=""></p>
<h4 id="添加断言"><a class="markdownIt-Anchor" href="#添加断言"></a> 添加断言</h4>
<p>1、在线程组上右键，依次点击【添加】&gt;【断言】&gt;【响应断言】，如下图：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E6%96%AD%E8%A8%80.png" alt=""></p>
<p>2、根据响应的数据来判断请求是否正常。这里只判断的响应代码是否为200。还可以配置错误信息，如下图所示：</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E6%96%AD%E8%A8%802.png" alt=""></p>
<h4 id="察看结果树"><a class="markdownIt-Anchor" href="#察看结果树"></a> 察看结果树</h4>
<p>1、在线程组上右键，依次选择【添加】&gt;【监听器】&gt;【察看结果树】</p>
<p><img src="//xiyouhujing.github.io/2019/09/27/JMeter安装与使用/%E5%AF%9F%E7%9C%8B%E7%BB%93%E6%9E%9C%E6%A0%91.png" alt=""></p>
<p>2、点击运行按钮便可查看结果</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：this关键字</title>
    <url>/2019/06/05/Java%E7%AC%94%E8%AE%B0%EF%BC%9Athis%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<blockquote>
<p>this是Java中的关键字，除了可以用来强调调用的是本类中的方法，this还有以下作用：</p>
<ol>
<li>表示类中的属性</li>
<li>可以使用this调用本类的构造方法</li>
<li>this表示当前对象</li>
</ol>
</blockquote>
<a id="more"></a>
<h3 id="使用this调用本类中的属性"><a class="markdownIt-Anchor" href="#使用this调用本类中的属性"></a> 使用this调用本类中的属性</h3>
<p>在程序中可以使用this调用本类属性，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n, <span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该类中的构造方法意在为类中的属性赋值，但是其实从构造方法传递的参数名称上很难看出n或者a表示的意义，所以进行如下的修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">        age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个时候就能看出构造方法中两个参数表示的意思了，但是同时也出现了新的问题，构造方法的本意是要将参数传递的name赋值给类中的name属性，把age的值赋给age属性，但是实际运行出来的结果却和我们想像的并不一样，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person01</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person01</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">        age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person01 per1 = <span class="keyword">new</span> Person01(<span class="string">"张三"</span>,<span class="number">33</span>);</span><br><span class="line">        System.out.println(per1.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：<code>姓名：null，年龄：0</code></p>
<p>从结果来看，程序并没有将构造方法传递进去的参数赋值给属性，也就是说，现在的构造方法并不能将传递进去的参数值赋给类中的熟悉你个，这是由于在赋值时，属性并没有被明确的指出，而这种错误可以利用this关键字来结果，例如进行如下的修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person02</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person02</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;                     <span class="comment">// 明确表示为类中的name属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;                       <span class="comment">// 明确表示为类中的age属性赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person02 per2 = <span class="keyword">new</span> Person02(<span class="string">"张三"</span>, <span class="number">33</span>);</span><br><span class="line">        System.out.println(per2.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：<code>姓名：张三，年龄：33</code></p>
<blockquote>
<p>实际上上面程序中的“name = name”、“age = age”中的两个name和两个age都是构造方法中的参数。更实际中的就近原则相似，在程序的构造方法中，已经存在了name和age属性，那么在构造方法中如果要使用name或age属性，则肯定按照就近取用的原则，所以上面的name和age使用都是构造方法中的参数。</p>
</blockquote>
<h3 id="使用this调用构造方法"><a class="markdownIt-Anchor" href="#使用this调用构造方法"></a> 使用this调用构造方法</h3>
<p>如果一个类中有多个构造方法，也可以利用this关键字互相调用。</p>
<p>假设现在要求不管类中有多少个构造方法，只要对象一被实例化，就打印一行“一个新的对象被实例化”信息出来，很明显，如果在每个构造方法中编写此输出语句肯定不是最佳方法，所以可以利用this关键字完成，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person03</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一个新的Person对象被实例化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person03</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();                                            <span class="comment">// 在此处调用Person类中的无参构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;                                  <span class="comment">// 为name属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;                                    <span class="comment">// 为age属性赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person03 per1 = <span class="keyword">new</span> Person03(<span class="string">"张三"</span>, <span class="number">33</span>);</span><br><span class="line">        System.out.println(per1.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个新的Person对象被实例化</span><br><span class="line">姓名：张三，年龄：33</span><br></pre></td></tr></table></figure>
<p>该程序中提供了两个构造方法，其中有两个参数的构造方法中使用this()的形式调用该类中的无参构造方法，所以即使是通过有两个参数的构造方法实例化，最终结果还是会把无参构造方法中的内容打印出来。</p>
<p>另外需要注意的是，在使用this()调用构造方法的时候，由于构造方法是在实例化对象时被自动调用，也就是说在类中的所有方法中，只有构造方法是被优先调用的，所以使用this调用构造方法必须也只能放在构造方法的首行，下面就是一个错误的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        system.out.println(<span class="string">"一个新的Person对象被实例化。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>();                                          <span class="comment">// 错误的调用，只能放在构造方法的首行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();                                          <span class="comment">// 错误的调用，只能放在构造方法的首行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，this调用构造方法时一定要留一个构造方法作为出口，即程序中至少有个构造方法是不使用this调用其他构造方法的。一般都会将无参构造方法作为出口，即在无参构造方法中最好不要再去调用其他构造方法。</p>
<h3 id="this表示当前对象"><a class="markdownIt-Anchor" href="#this表示当前对象"></a> this表示当前对象</h3>
<p>this最重要的特点就是表示当前对象，在Java中当前对象就是指当前正在调用类中方法的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person04</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person类 --&gt; "</span> + <span class="keyword">this</span>);         <span class="comment">// 直接打印this</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;                                        <span class="comment">// 此处返回null，为的是让语法不出错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person04 per1 = <span class="keyword">new</span> Person04();</span><br><span class="line">        Person04 per2 = <span class="keyword">new</span> Person04();</span><br><span class="line">        System.out.println(<span class="string">"MAIN方法 --&gt; "</span> + per1);         <span class="comment">// 直接打印对象</span></span><br><span class="line">        per1.getInfo();</span><br><span class="line">        System.out.println(<span class="string">"----------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"MAIN方法 --&gt; "</span> + per2);         <span class="comment">// 直接打印对象</span></span><br><span class="line">        per2.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MAIN方法 --&gt; ThisDemo.Person04@21bcffb5</span><br><span class="line">Person类 --&gt; ThisDemo.Person04@21bcffb5</span><br><span class="line">----------------------------</span><br><span class="line">MAIN方法 --&gt; ThisDemo.Person04@380fb434</span><br><span class="line">Person类 --&gt; ThisDemo.Person04@380fb434</span><br></pre></td></tr></table></figure>
<p>从结果来看，直接打印对象和调用getInfo()方法打印的结果是一样的，而且在getInfo()方法中打印的永远是this关键字，也就是说哪个对象调用了类中的方法，this就表示哪个对象。</p>
<p>这样一个特性有什么用处呢？通过下面一个例子来理解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：引用传递及基本应用</title>
    <url>/2019/05/24/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<blockquote>
<p>值传递：是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。引用传递：是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数进行修改，将会影响到实际参数。</p>
</blockquote>
<a id="more"></a>
<h3 id="引用传递"><a class="markdownIt-Anchor" href="#引用传递"></a> 引用传递</h3>
<p>所谓引用传递就是指将堆内存空间的使用权交给多个栈内存空间。</p>
<h4 id="引用传递范例一"><a class="markdownIt-Anchor" href="#引用传递范例一"></a> 引用传递范例一</h4>
<p>对象引用传递：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">30</span>;                    <span class="comment">// 此处为了访问方便，属性暂时不封装</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo d1 = <span class="keyword">new</span> Demo();</span><br><span class="line">        d1.temp = <span class="number">50</span>;</span><br><span class="line">        System.out.println(<span class="string">"fun()方法调用之前："</span> + d1.temp);</span><br><span class="line">        fun(d1);</span><br><span class="line">        System.out.println(<span class="string">"fun()方法调用之后："</span> + d1.temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Demo d2)</span></span>&#123;     <span class="comment">// 此处的方法由主方法直接调用</span></span><br><span class="line">        d2.temp = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun()方法调用之前：50</span><br><span class="line">fun()方法调用之后：1000</span><br></pre></td></tr></table></figure>
<p>从结果中可以发现，在fun()方法中接收了Demo类对象d1，并将temp属性的内容进行了修改，因为是引用传递，所以最终temp的值是1000，此程序可以通过下图进行理解：</p>
<p><img src="//xiyouhujing.github.io/2019/05/24/Java笔记：引用传递及基本应用/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E8%8C%83%E4%BE%8B%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE.png" alt="引用传递范例的内存分析图"></p>
<h4 id="引用传递范例二"><a class="markdownIt-Anchor" href="#引用传递范例二"></a> 引用传递范例二</h4>
<p>引用传递：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;                 <span class="comment">// 实例化字符串对象</span></span><br><span class="line">        System.out.println(<span class="string">"fun()方法调用之前："</span> + str1);</span><br><span class="line">        fun(str1);                             <span class="comment">// 调用fun()方法</span></span><br><span class="line">        System.out.println(<span class="string">"fun()方法调用之后："</span> + str1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">fun</span><span class="params">(String str2)</span></span>&#123;      <span class="comment">// 此处的方法由主方法直接调用</span></span><br><span class="line">        str2 = <span class="string">"MLDN"</span>;                         <span class="comment">// 修改字符串内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun()方法调用之前：hello</span><br><span class="line">fun()方法调用之后：hello</span><br></pre></td></tr></table></figure>
<p>从运行结果可以发现，虽然此时传递的是一个String类型的对象，但是结果并没有像之前一样发生给吧，因为字符串的内容一旦声明就是不可改变的，改变的只是其内存地址的指向，如下图所示：</p>
<p><img src="//xiyouhujing.github.io/2019/05/24/Java笔记：引用传递及基本应用/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E8%8C%83%E4%BE%8B%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE2.png" alt="引用传递范例的内存分析图2"></p>
<p>以上操作并不难理解，因为每个字符串对象都表示一个匿名对象，这样在fun()方法操作中，如果为str2重新设置内容，就相当于改变了str2的引用，而str1本身的内容并不会受到任何影响。</p>
<h4 id="引用传递范例三"><a class="markdownIt-Anchor" href="#引用传递范例三"></a> 引用传递范例三</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo2</span></span>&#123;</span><br><span class="line">    String temp = <span class="string">"hello"</span>;              <span class="comment">// 此处为了访问方便，属性暂不封装</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo2 d1 = <span class="keyword">new</span> Demo2();</span><br><span class="line">        d1.temp = <span class="string">"word"</span>;               <span class="comment">// 修改对象中的temp属性</span></span><br><span class="line">        System.out.println(<span class="string">"fun()方法调用之前："</span> + d1.temp);</span><br><span class="line">        fun(d1);</span><br><span class="line">        System.out.println(<span class="string">"fun()方法调用之后："</span> + d1.temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Demo2 d2)</span></span>&#123;</span><br><span class="line">        d2.temp = <span class="string">"MLDN"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun()方法调用之前：word</span><br><span class="line">fun()方法调用之后：MLDN</span><br></pre></td></tr></table></figure>
<p>从结果可以看出，fun()方法中将属性的内容修改了，内存操作如下图：</p>
<p><img src="//xiyouhujing.github.io/2019/05/24/Java笔记：引用传递及基本应用/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E8%8C%83%E4%BE%8B%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE3.png" alt="引用传递范例的内存分析图3"></p>
<p>本程序的分析方法与第一个范例完全一样，因为String是作为一个Demo2类的属性存在的，而在操作时更改的只是Demo2类中属性的内容。</p>
<h3 id="接收本类的引用"><a class="markdownIt-Anchor" href="#接收本类的引用"></a> 接收本类的引用</h3>
<p>以上为引用传递的基本形式，实际上，在对象引用传递上也可以在一个类中接收自己本类对象的实例，而且接受完之后，可以方便地通过此对象直接进行本类中封装属性的访问，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo3</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> temp = <span class="number">30</span>;                     <span class="comment">// 声明temp属性并封装</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Demo3 d2)</span></span>&#123;                 <span class="comment">// 接收本类的引用</span></span><br><span class="line">        d2.temp = <span class="number">50</span>;                          <span class="comment">// 直接通过对象调用本类的私有属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTemp</span><span class="params">()</span></span>&#123;                      <span class="comment">// getter方法</span></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemp</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;                <span class="comment">// setter方法</span></span><br><span class="line">        temp = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo3 d1 = <span class="keyword">new</span> Demo3();               <span class="comment">// 实例化Demo对象</span></span><br><span class="line">        d1.setTemp(<span class="number">50</span>);                       <span class="comment">// 修改temp内容</span></span><br><span class="line">        d1.fun(d1);                           <span class="comment">// 此处把Demo对象传回到自己的类中</span></span><br><span class="line">        System.out.println(<span class="string">"temp = "</span> + d1.getTemp());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：<code>temp = 50</code></p>
<p>此种引用方式的传递在关于对象比较操作时才会经常使用，其他时候基本上都很少使用。</p>
<h3 id="范例一对一关系"><a class="markdownIt-Anchor" href="#范例一对一关系"></a> 范例——一对一关系</h3>
<p>使用引用传递还可以表示出生活中的以下一种场景：一个人有一本书，一本书属于一个人。因而可以得出这样的结论：人应该是一个具体的类，书也应该是一个具体的类，在人的类中应该存在一个属性表示书，在书的类中也应该存在一个属性表示人。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;                            <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;                                <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Book book;                              <span class="comment">// 一个人有一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;            <span class="comment">// 通过构造方法设置内容</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">        <span class="keyword">this</span>.setAge(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;                  <span class="comment">// 设置姓名</span></span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;                        <span class="comment">// 返回姓名</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;                      <span class="comment">// 设置年龄</span></span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;                            <span class="comment">// 返回年龄</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBook</span><span class="params">(Book b)</span></span>&#123;                    <span class="comment">// 设置本人的书</span></span><br><span class="line">        book = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBook</span><span class="params">()</span></span>&#123;                          <span class="comment">// 得到本人的书</span></span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;                          <span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price;                           <span class="comment">// 价格</span></span><br><span class="line">    <span class="keyword">private</span> Person person;                         <span class="comment">// 一本书属于一个人</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, <span class="keyword">float</span> price)</span></span>&#123;        <span class="comment">// 通过构造方法设置属性内容</span></span><br><span class="line">        <span class="keyword">this</span>.setTitle(title);</span><br><span class="line">        <span class="keyword">this</span>.setPrice(price);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String t)</span></span>&#123;</span><br><span class="line">        title = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> p)</span></span>&#123;</span><br><span class="line">        price = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">30</span>);                  <span class="comment">// 实例化Person对象</span></span><br><span class="line">        Book bk = <span class="keyword">new</span> Book(<span class="string">"JAVA SE 核心开发"</span>, <span class="number">90.0f</span>);        <span class="comment">// 实例化Book对象</span></span><br><span class="line">        per.setBook(bk);                                     <span class="comment">// 设置两个对象间的关系，一个人有一本书</span></span><br><span class="line">        bk.setPerson(per);                                  <span class="comment">// 设置两个对象间的关系，一本书属于一个人</span></span><br><span class="line">        System.out.println(<span class="string">"从人找到书 --&gt; 姓名："</span> + per.getName() + <span class="string">"；年龄："</span></span><br><span class="line">        + per.getAge() + <span class="string">"；书名："</span> + per.getBook().getTitle() + <span class="string">"；价格："</span></span><br><span class="line">        + per.getBook().getPrice());</span><br><span class="line">        System.out.println(<span class="string">"从书找到人 --&gt; 书名："</span> + bk.getTitle() + <span class="string">"；价格："</span></span><br><span class="line">        + bk.getPrice() + <span class="string">"；姓名："</span> + bk.getPerson().getName() + <span class="string">"；年龄："</span></span><br><span class="line">        + bk.getPerson().getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从人找到书 --&gt; 姓名：张三；年龄：30；书名：JAVA SE 核心开发；价格：90.0</span><br><span class="line">从书找到人 --&gt; 书名：JAVA SE 核心开发；价格：90.0；姓名：张三；年龄：30</span><br></pre></td></tr></table></figure>
<h3 id="范例进一步深入一对一关系"><a class="markdownIt-Anchor" href="#范例进一步深入一对一关系"></a> 范例——进一步深入一对一关系</h3>
<p>现在有一个新的要求，一个人有一个孩子，每个孩子还会有一本书。因为一个孩子也是一个人，所以并不需要单独建立一个孩子类，只需要简单的修改Person类，在类中增加一个自己的引用即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;                            <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;                                <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Book1 book;                             <span class="comment">// 一个人有一本书</span></span><br><span class="line">    <span class="keyword">private</span> Person1 child;                           <span class="comment">// 一个人有一个孩子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person1</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;            <span class="comment">// 通过构造方法设置内容</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">        <span class="keyword">this</span>.setAge(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;                  <span class="comment">// 设置姓名</span></span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;                        <span class="comment">// 返回姓名</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;                      <span class="comment">// 设置年龄</span></span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;                            <span class="comment">// 返回年龄</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBook</span><span class="params">(Book1 b)</span></span>&#123;                    <span class="comment">// 设置本人的书</span></span><br><span class="line">        book = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book1 <span class="title">getBook</span><span class="params">()</span></span>&#123;                          <span class="comment">// 得到本人的书</span></span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChild</span><span class="params">(Person1 child)</span></span>&#123;             <span class="comment">// 设置孩子</span></span><br><span class="line">        <span class="keyword">this</span>.child = child;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person1 <span class="title">getChild</span><span class="params">()</span></span>&#123;                       <span class="comment">// 得到孩子</span></span><br><span class="line">        <span class="keyword">return</span> child;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book1</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;                          <span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price;                           <span class="comment">// 价格</span></span><br><span class="line">    <span class="keyword">private</span> Person1 person;                         <span class="comment">// 一本书属于一个人</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book1</span><span class="params">(String title, <span class="keyword">float</span> price)</span></span>&#123;        <span class="comment">// 通过构造方法设置属性内容</span></span><br><span class="line">        <span class="keyword">this</span>.setTitle(title);</span><br><span class="line">        <span class="keyword">this</span>.setPrice(price);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String t)</span></span>&#123;</span><br><span class="line">        title = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> p)</span></span>&#123;</span><br><span class="line">        price = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person1 person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person1 <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person1 per = <span class="keyword">new</span> Person1(<span class="string">"张三"</span>, <span class="number">30</span>);            <span class="comment">// 实例化Person对象</span></span><br><span class="line">        Person1 cld = <span class="keyword">new</span> Person1(<span class="string">"张草"</span>, <span class="number">10</span>);            <span class="comment">// 定义一个孩子</span></span><br><span class="line">        Book1 bk = <span class="keyword">new</span> Book1(<span class="string">"JAVA SE 核心开发"</span>, <span class="number">90.0f</span>);        <span class="comment">// 实例化Book对象</span></span><br><span class="line">        Book1 b = <span class="keyword">new</span> Book1(<span class="string">"一千零一夜"</span>, <span class="number">30.3f</span>);               <span class="comment">// 定义孩子的书</span></span><br><span class="line">        per.setBook(bk);                                    <span class="comment">// 设置对象间的关系，一个人有一本书</span></span><br><span class="line">        bk.setPerson(per);                                  <span class="comment">// 设置对象间的关系，一本书属于一个人</span></span><br><span class="line">        cld.setBook(b);                                     <span class="comment">// 设置对象间的关系，一个孩子有一本书</span></span><br><span class="line">        b.setPerson(cld);                                   <span class="comment">// 设置对象间的关系，一本书属于一个孩子</span></span><br><span class="line">        per.setChild(cld);                                  <span class="comment">// 设置对象间的关系，一个人有一个孩子</span></span><br><span class="line">        System.out.println(<span class="string">"从人找到书 --&gt; 姓名："</span> + per.getName() + <span class="string">"；年龄："</span></span><br><span class="line">                + per.getAge() + <span class="string">"；书名："</span> + per.getBook().getTitle() + <span class="string">"；价格："</span></span><br><span class="line">                + per.getBook().getPrice());</span><br><span class="line">        System.out.println(<span class="string">"从书找到人 --&gt; 书名："</span> + bk.getTitle() + <span class="string">"；价格："</span></span><br><span class="line">                + bk.getPrice() + <span class="string">"；姓名："</span> + bk.getPerson().getName() + <span class="string">"；年龄："</span></span><br><span class="line">                + bk.getPerson().getAge());</span><br><span class="line">        System.out.println(per.getName() + <span class="string">"的孩子 --&gt; 姓名："</span> + per.getChild().getName()</span><br><span class="line">        + <span class="string">"；年龄："</span> + per.getChild().getAge() + <span class="string">"；书名："</span> + per.getChild().getBook().getTitle()</span><br><span class="line">        + <span class="string">"；价格："</span> + per.getChild().getBook().getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从人找到书 --&gt; 姓名：张三；年龄：30；书名：JAVA SE 核心开发；价格：90.0</span><br><span class="line">从书找到人 --&gt; 书名：JAVA SE 核心开发；价格：90.0；姓名：张三；年龄：30</span><br><span class="line">张三的孩子 --&gt; 姓名：张草；年龄：10；书名：一千零一夜；价格：30.3</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：String</title>
    <url>/2019/05/16/Java%E7%AC%94%E8%AE%B0%EF%BC%9AString/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<blockquote>
<p>String类定义时单词的首字母大写，所以String本身也是一个类本类，但是此类在使用时却有很多的要求，而且此类在Java中也算是一个比较特殊的类。</p>
</blockquote>
<a id="more"></a>
<h3 id="实例化string对象"><a class="markdownIt-Anchor" href="#实例化string对象"></a> 实例化String对象</h3>
<p>对于String可以采用直接赋值的方式进行操作，如下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">"LiXingHua"</span>;            <span class="comment">// 实例化String对象</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name);  <span class="comment">// 输出字符串的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在String的使用上还有另外一种形式的实例化方法，就是直接调用String类中的构造方法，在String类存在以下的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span></span></span><br></pre></td></tr></table></figure>
<p>所以上面的代码也可以通过如下的代码进行编写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = <span class="keyword">new</span> String(<span class="string">"LiXingHua"</span>);        <span class="comment">// 实例化String对象</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name);          <span class="comment">// 输出字符串的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="string的内容比较"><a class="markdownIt-Anchor" href="#string的内容比较"></a> String的内容比较</h3>
<p>对于基本数据类型，可以通过“==”进行内容的比较，如下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">30</span>;                            <span class="comment">// 声明一个整型变量</span></span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">30</span>;                            <span class="comment">// 声明一个整型变量</span></span><br><span class="line">        System.out.println(<span class="string">"两个数字的比较结果："</span> + (x == y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：<code>两个数字的比较结果：true</code></p>
<p>下面按照以上的程序思路进行两个字符串的比较操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;                          <span class="comment">// 直接赋值</span></span><br><span class="line">        String str2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);     <span class="comment">// 通过new赋值</span></span><br><span class="line">        String str3 = str2;                             <span class="comment">// 传递引用</span></span><br><span class="line">        System.out.println(<span class="string">"str1 == str2 --&gt;"</span> + (str1 == str2));</span><br><span class="line">        System.out.println(<span class="string">"str1 == str3 --&gt;"</span> + (str1 == str3));</span><br><span class="line">        System.out.println(<span class="string">"str2 == str3 --&gt;"</span> + (str2 == str3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str1 == str2 --&gt;false</span><br><span class="line">str1 == str3 --&gt;false</span><br><span class="line">str2 == str3 --&gt;true</span><br></pre></td></tr></table></figure>
<p>从程序运行结果中可以发现，虽然以上程序中String的内容都一样，但是比较结果有的相同，有的却不同。主要原因在于堆内存和栈内存。上面每个String对象的内容实际上都保存在堆内存中，而且堆内存中的内容相等。但是对于str1和str2来说，其内容分别保存在了不同的空间，所以即使内容相等，地址的值也是不相等的，“==”是用来进行数值比较的，所以str1和str2不相等。从程序中可以发现str2和str3指向了同一个堆内存空间，是同一个地址，所以最终结果是str2和str3的地址值相等的，同理str1和str3的地址值是不相等的，所以返回了false。栈内存和堆内存的示意图如下：</p>
<p><img src="//xiyouhujing.github.io/2019/05/16/Java笔记：String/String%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A3%B0%E6%98%8E.png" alt=""></p>
<p>那么既然无法使用“==”进行判断，那该如何去判断两个字符串的内容是否相等呢？此时，即可利用String中专门提供的方法（String是一个类，则会存在各种方法）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(String str)</span></span></span><br></pre></td></tr></table></figure>
<p>例如，使用equals方法对String的内容进行比较：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;                         <span class="comment">// 直接赋值</span></span><br><span class="line">        String str2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);             <span class="comment">// 通过new赋值</span></span><br><span class="line">        String str3 = str2;                            <span class="comment">// 传递引用</span></span><br><span class="line">        System.out.println(<span class="string">"str1 equals str2 --&gt;"</span> + (str1.equals(str2)));</span><br><span class="line">        System.out.println(<span class="string">"str1 equals str3 --&gt;"</span> + (str1.equals(str3)));</span><br><span class="line">        System.out.println(<span class="string">"str2 equals str2 --&gt;"</span> + (str2.equals(str3)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str1 equals str2 --&gt;true</span><br><span class="line">str1 equals str3 --&gt;true</span><br><span class="line">str2 equals str2 --&gt;true</span><br></pre></td></tr></table></figure>
<p>因为equals()方法的作用是将内容进行比较，所以此处返回的结果都为true。</p>
<h3 id="string两种实例化方式的区别"><a class="markdownIt-Anchor" href="#string两种实例化方式的区别"></a> String两种实例化方式的区别</h3>
<p>String又两种实例化方式，一种是通过直接赋值的方式，另一种是使用标准的new调用构造方式完成实例化。一个字符串就是一个String类的匿名对象，匿名对象就是已经开辟了堆内存空间的并可以直接使用的对象。</p>
<p>验证一个字符串就是String的匿名对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\"hello\" equals \"hello\" --&gt;"</span> + (<span class="string">"hello"</span>.equals(<span class="string">"hello"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：<code>&quot;hello&quot; equals &quot;hello&quot; --&gt;true</code></p>
<p>从结果可以发现，一个字符串确实可以调用String类中的方法，也就证明了一个字符串就是一个String类的匿名对象。所以对于以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure>
<p>实际上就是把一个堆中开辟好的内存空间的使用权给了str1对象，而使用这种方式还有另一个好处，就是如果一个字符串已经被一个名称所引用，则以后再有相同的字符串声明时，就不会重新开辟空间，而是继续使用已经开辟好的堆内存。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明3个字符串变量，每个变量的内容都是一样的</span></span><br><span class="line">        String str1 = <span class="string">"hello"</span>;</span><br><span class="line">        String str2 = <span class="string">"hello"</span>;</span><br><span class="line">        String str3 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(<span class="string">"str1 == str2 --&gt;"</span> + (str1 == str2));</span><br><span class="line">        System.out.println(<span class="string">"str1 == str3 --&gt;"</span> + (str1 == str3));</span><br><span class="line">        System.out.println(<span class="string">"str2 == str3 --&gt;"</span> + (str2 == str3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str1 == str2 --&gt;true</span><br><span class="line">str1 == str3 --&gt;true</span><br><span class="line">str2 == str3 --&gt;true</span><br></pre></td></tr></table></figure>
<p>三种比较都是true，说明3个字符串指向的堆内存地址空间都是同一个，所以，当String使用直接赋值的方式之后，只要是声明的字符串内容相同，则都不会再开辟新的内存空间。</p>
<blockquote>
<p><strong>在Java中会提供一个字符串池来保存全部的内容</strong></p>
<p>对于String的以上操作，在Java中称为共享设计，这种设计思路是，在Java中形成一个对象池，在这个对象池中保存多个对象，新实例化的对象如果已经在池中定义了，则不再重新定义，而是从池中直接取出继续使用。String就是因为采用了这样的设计，所以当内容重复时，会将对象指向已存在的实例空间。</p>
</blockquote>
<p>下面为使用new String()的方式实例化String对象的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo08</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个字符串就是一个String类的匿名对象，而如果使用new关键字，不管如何都会再开辟一个新的空间，但是此时，此空间的内容还是hello，所以上面的代码实际上是开辟了两个内存空间，但真正使用的只是一个使用关键字new开辟的空间，另外一个就是垃圾空间了，如图：</p>
<p><img src="//xiyouhujing.github.io/2019/05/16/Java笔记：String/new+String%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%AF%B9%E8%B1%A1.png" alt="new+String方式实现实例化对象"></p>
<p>通过以上两种实现方式比较可以知道那种方式更合适，对于字符串的操作就采用直接赋值的方式完成，而不要采用构造方法传递字符串的方式完成，这样可以避免产生垃圾空间，当然，在String类中也存在一些其他的构造方法。</p>
<h3 id="字符串的内容不可改变"><a class="markdownIt-Anchor" href="#字符串的内容不可改变"></a> 字符串的内容不可改变</h3>
<p>在使用String类进行操作时还有一个特性是特别重要的，那就是字符串的内容一旦声明则不可以改变。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"hello"</span>;        <span class="comment">// 声明字符串</span></span><br><span class="line">        str = str + <span class="string">" world!"</span>;        <span class="comment">// 修改字符串</span></span><br><span class="line">        System.out.println(<span class="string">"str = "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：<code>str = hello world!</code>。</p>
<p>从结果来看，String对象的内容确实已经修改了，但是其实String对象内容的改变是通过内存地址的“断开-连接”变化完成的，而本身字符串中的内容并没有任何变化，具体如下图：</p>
<p><img src="//xiyouhujing.github.io/2019/05/16/Java笔记：String/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%86%85%E5%AE%B9%E7%9A%84%E4%BF%AE%E6%94%B9.png" alt="字符串内容的修改"></p>
<h3 id="string类中常用的方法"><a class="markdownIt-Anchor" href="#string类中常用的方法"></a> String类中常用的方法</h3>
<h4 id="字符串与字符数组的转换"><a class="markdownIt-Anchor" href="#字符串与字符数组的转换"></a> 字符串与字符数组的转换</h4>
<p>字符串可以使用toCharArray()方法变成一个字符数组，也可以使用String类的构造方法把一个字符数组变成一个字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;                    <span class="comment">// 定义字符串</span></span><br><span class="line">        <span class="keyword">char</span> c[] = str1.toCharArray();            <span class="comment">// 将字符串变为字符数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++)&#123;       <span class="comment">// 循环输出</span></span><br><span class="line">            System.out.print(c[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(c);              <span class="comment">// 将全部字符数组变为String</span></span><br><span class="line">        String str3 = <span class="keyword">new</span> String(c, <span class="number">0</span>, <span class="number">3</span>);        <span class="comment">// 将部分字符数组变为String</span></span><br><span class="line">        System.out.println(str2);                 <span class="comment">// 输出字符串</span></span><br><span class="line">        System.out.println(str3);                 <span class="comment">// 输出字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h	e	l	l	o	</span><br><span class="line">hello</span><br><span class="line">hel</span><br></pre></td></tr></table></figure>
<p>程序一开始将一个字符串变成一个字符数组，字符串的长度就是转换之后字符数组的长度，也可以把一个字符数组的全部或者部分转换为字符串。</p>
<h4 id="从字符串中取出指定位置的字符"><a class="markdownIt-Anchor" href="#从字符串中取出指定位置的字符"></a> 从字符串中取出指定位置的字符</h4>
<p>可以使用String类中的charAt()方法去除字符串指定位置的字符。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;                 <span class="comment">// 声明String对象</span></span><br><span class="line">        System.out.println(str1.charAt(<span class="number">3</span>));    <span class="comment">// 取出字符串中的第4个字符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序最终取出的字符为“l”，因为字符从0开始编号，编号为3的字符为“l”。</p>
<h4 id="字符串与byte数组的转换"><a class="markdownIt-Anchor" href="#字符串与byte数组的转换"></a> 字符串与byte数组的转换</h4>
<p>字符串可以通过getBytes()方法将String变为一个byte数组，然后可以通过String的构造方法将一个字节数组重新变为字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;</span><br><span class="line">        <span class="keyword">byte</span> b[] = str1.getBytes();                  <span class="comment">// 将字符串变为byte数组</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(b));           <span class="comment">// 将全部byte数组变为字符串</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(b, <span class="number">1</span>, <span class="number">3</span>));     <span class="comment">// 将部分byte数组变为字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">ell</span><br></pre></td></tr></table></figure>
<h4 id="取得一个字符串的长度"><a class="markdownIt-Anchor" href="#取得一个字符串的长度"></a> 取得一个字符串的长度</h4>
<p>在String中使用length()方法取得字符串的长度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello LiXingHua"</span>;          <span class="comment">// 定义字符串变量</span></span><br><span class="line">        System.out.println(<span class="string">"\""</span> + str1 + <span class="string">"\" 的长度为："</span> + str1.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：<code>&quot;hello LiXingHua&quot; 的长度为：15</code>。</p>
<blockquote>
<p><strong>length和length()的区别</strong></p>
<p>在数组操作中，使用length取得数组的长度，但是操作的最后没有“()”，而字符串调用length是一个方法，只要是方法后面都有“()”。</p>
</blockquote>
<h4 id="查找一个指定的字符串是否存在"><a class="markdownIt-Anchor" href="#查找一个指定的字符串是否存在"></a> 查找一个指定的字符串是否存在</h4>
<p>在String中使用indexOf()方法，可以返回指定的字符串的位置，如果不存在则返回-1，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"abcdefgcgh"</span>;</span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">"c"</span>));        <span class="comment">// 查到返回位置</span></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">"c"</span>, <span class="number">3</span>));       <span class="comment">// 查到返回位置，从第4个开始查找</span></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">"x"</span>));        <span class="comment">// 没有查到返回-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">7</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>
<h4 id="去掉左右空格"><a class="markdownIt-Anchor" href="#去掉左右空格"></a> 去掉左右空格</h4>
<p>使用trim()方法可以去掉字符串左、右空格，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"     hello           "</span>;</span><br><span class="line">        System.out.println(str1.trim());           <span class="comment">// 去掉左右空格后输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：<code>hello</code></p>
<p>从程序运行的结果来看，字符串左右两边的空格都被清除掉了。</p>
<h4 id="字符串截取"><a class="markdownIt-Anchor" href="#字符串截取"></a> 字符串截取</h4>
<p>在String中提供了两个substring()方法，一个是从指定位置截取到字符串结尾i，另一个是截取指定范围的内容。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello world"</span>;</span><br><span class="line">        System.out.println(str1.substring(<span class="number">6</span>));       <span class="comment">// 从第7个位置开始截取</span></span><br><span class="line">        System.out.println(str1.substring(<span class="number">0</span>, <span class="number">5</span>));    <span class="comment">// 截取0~5个位置的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">world</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
<p>需要注意的是，当截取指定范围的字符串时，截取的内容包括空号中前一个数字指定的位置，不包括括号中后一个数字指定的位置。</p>
<h4 id="按照指定的字符串拆分字符串"><a class="markdownIt-Anchor" href="#按照指定的字符串拆分字符串"></a> 按照指定的字符串拆分字符串</h4>
<p>在String中通过split()方法可以进行字符串的拆分操作，拆分的数据将以字符串数组的形式返回。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello world"</span>;</span><br><span class="line">        String s[] = str1.split(<span class="string">" "</span>);        <span class="comment">// 按空格进行字符串的拆分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length; i++)&#123;</span><br><span class="line">            System.out.println(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure>
<h4 id="字符串的大小写转换"><a class="markdownIt-Anchor" href="#字符串的大小写转换"></a> 字符串的大小写转换</h4>
<p>在用户输入信息时，有时需要统一输入数据的大小写，此时就可以使用toUpperCase()和toLowerCase()两个方法完成字符串大小写的转换操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"将\"hello world\"转换成大写："</span> + <span class="string">"hello world"</span>.toUpperCase());</span><br><span class="line">        System.out.println(<span class="string">"将\"HELLO WORLD\"转换成小写："</span> + <span class="string">"HELLO WORLD"</span>.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将&quot;hello world&quot;转换成大写：HELLO WORLD</span><br><span class="line">将&quot;HELLO WORLD&quot;转换成小写：hello world</span><br></pre></td></tr></table></figure>
<h4 id="判断是否以指定的字符串开头或结尾"><a class="markdownIt-Anchor" href="#判断是否以指定的字符串开头或结尾"></a> 判断是否以指定的字符串开头或结尾</h4>
<p>在String中使用startsWith()方法可以判断字符串是否以指定的内容开头，使用endsWith()方法可以判断字符串是否以指定的内容结尾。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"**HELLO"</span>;</span><br><span class="line">        String str2 = <span class="string">"HELLO**"</span>;</span><br><span class="line">        <span class="keyword">if</span> (str1.startsWith(<span class="string">"**"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"(**HELLO)以 ** 开头"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str2.endsWith(<span class="string">"**"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"(HELLO**)以 ** 结尾"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(**HELLO)以 ** 开头</span><br><span class="line">(HELLO**)以 ** 结尾</span><br></pre></td></tr></table></figure>
<h4 id="不区分大小写进行字符串笔记"><a class="markdownIt-Anchor" href="#不区分大小写进行字符串笔记"></a> 不区分大小写进行字符串笔记</h4>
<p>在String中可以通过equals()方法进行字符串内容的比较，但是这种比较方法是区分大小写的比较，如果要完成不区分大小写的比较则可以使用equalsIgnoreCase()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"HELLO"</span>;</span><br><span class="line">        String str2 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(<span class="string">"\"HELLO\" equals \"hello\": "</span> + str1.equals(str2));        <span class="comment">// 区分大小写比较</span></span><br><span class="line">        System.out.println(<span class="string">"\"HELLO\" equalsIngoreCase \"hello\": "</span> + str2.equalsIgnoreCase(str2));         <span class="comment">// 区分大小写比较</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;HELLO&quot; equals &quot;hello&quot;: false</span><br><span class="line">&quot;HELLO&quot; equalsIngoreCase &quot;hello&quot;: true</span><br></pre></td></tr></table></figure>
<h4 id="将一个指定的字符串替换成其他的字符串"><a class="markdownIt-Anchor" href="#将一个指定的字符串替换成其他的字符串"></a> 将一个指定的字符串替换成其他的字符串</h4>
<p>使用String的replaceAll()方法可以将字符串的指定内容进行替换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"hello"</span>;</span><br><span class="line">        String newStr = str.replaceAll(<span class="string">"l"</span>, <span class="string">"x"</span>);    <span class="comment">// 将所有的l替换成x</span></span><br><span class="line">        System.out.println(<span class="string">"替换之后的结果："</span> + newStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：<code>替换之后的结果：hexxo</code></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实例讲解：类设计分析</title>
    <url>/2019/05/15/Java%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3%EF%BC%9A%E7%B1%BB%E8%AE%BE%E8%AE%A1%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h3>
<p>定义并测试一个名为Student的类，包括的属性有“学号”、“姓名”以及3门课程“数学”、“英语”和“计算机”的成绩，包括的方法有计算3门课程的“总分”、“平均分”、“最高分”以及“最低分”。</p>
<a id="more"></a>
<h3 id="属性及类型"><a class="markdownIt-Anchor" href="#属性及类型"></a> 属性及类型</h3>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">属性类型</th>
<th style="text-align:center">属性名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">学号</td>
<td style="text-align:center">String</td>
<td style="text-align:center">stuno</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">姓名</td>
<td style="text-align:center">String</td>
<td style="text-align:center">name</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">数学成绩</td>
<td style="text-align:center">float</td>
<td style="text-align:center">math</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">英语成绩</td>
<td style="text-align:center">float</td>
<td style="text-align:center">english</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">计算机成绩</td>
<td style="text-align:center">float</td>
<td style="text-align:center">computer</td>
</tr>
</tbody>
</table>
<h3 id="需要的方法"><a class="markdownIt-Anchor" href="#需要的方法"></a> 需要的方法</h3>
<table>
<thead>
<tr>
<th>序号</th>
<th>方法名称</th>
<th>返回值类型</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>public void setStuno(String s)</td>
<td>void</td>
<td>设置学生编号</td>
</tr>
<tr>
<td>2</td>
<td>public void setName(String n)</td>
<td>void</td>
<td>设置学生姓名</td>
</tr>
<tr>
<td>3</td>
<td>public void setMath(float m)</td>
<td>void</td>
<td>设置数学成绩</td>
</tr>
<tr>
<td>4</td>
<td>public void setEnglish(float e)</td>
<td>void</td>
<td>设置英语成绩</td>
</tr>
<tr>
<td>5</td>
<td>public void setComputer(float c)</td>
<td>void</td>
<td>设置计算机成绩</td>
</tr>
<tr>
<td>6</td>
<td>public String getStuno()</td>
<td>String</td>
<td>取得学生编号</td>
</tr>
<tr>
<td>7</td>
<td>public String getName()</td>
<td>String</td>
<td>取得学生姓名</td>
</tr>
<tr>
<td>8</td>
<td>public float getMath()</td>
<td>float</td>
<td>取得数学成绩</td>
</tr>
<tr>
<td>9</td>
<td>public float getEnglish()</td>
<td>float</td>
<td>取得英语成绩</td>
</tr>
<tr>
<td>10</td>
<td>public float getComputer()</td>
<td>float</td>
<td>取得计算机成绩</td>
</tr>
<tr>
<td>11</td>
<td>public float sum()</td>
<td>float</td>
<td>计算成绩总和</td>
</tr>
<tr>
<td>12</td>
<td>public float avg()</td>
<td>float</td>
<td>计算平均成绩</td>
</tr>
<tr>
<td>13</td>
<td>public float max()</td>
<td>float</td>
<td>求出最高成绩</td>
</tr>
<tr>
<td>14</td>
<td>public float min()</td>
<td>float</td>
<td>求出最低成绩</td>
</tr>
<tr>
<td>151</td>
<td>public Student()</td>
<td>-</td>
<td>无参构造方法</td>
</tr>
<tr>
<td>16</td>
<td>public Student(String stuno, String name, float math, float english, float computer)</td>
<td>-</td>
<td>在对象实例化时直接将学号、姓名、数学成绩、英语成绩、计算机成绩设置进去</td>
</tr>
</tbody>
</table>
<h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String stuno;                      <span class="comment">// 学生编号</span></span><br><span class="line">    <span class="keyword">private</span> String name;                       <span class="comment">// 学生姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> math;                        <span class="comment">// 数学成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> english;                     <span class="comment">// 英语成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> computer;                    <span class="comment">// 计算机成绩</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;                          <span class="comment">// 定义无参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义有五个参数的构造方法，为类中的属性初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String stuno, String name, <span class="keyword">float</span> math, <span class="keyword">float</span> english, <span class="keyword">float</span> computer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setStuno(stuno);</span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">        <span class="keyword">this</span>.setMath(math);</span><br><span class="line">        <span class="keyword">this</span>.setEnglish(english);</span><br><span class="line">        <span class="keyword">this</span>.setComputer(computer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuno</span><span class="params">(String s)</span></span>&#123;             <span class="comment">// 设置编号</span></span><br><span class="line">        stuno = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;              <span class="comment">// 设置姓名</span></span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMath</span><span class="params">(<span class="keyword">float</span> m)</span></span>&#123;               <span class="comment">// 设置数学成绩</span></span><br><span class="line">        math = m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnglish</span><span class="params">(<span class="keyword">float</span> e)</span></span>&#123;             <span class="comment">// 设置英语成绩</span></span><br><span class="line">        english = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComputer</span><span class="params">(<span class="keyword">float</span> c)</span></span>&#123;            <span class="comment">// 设置计算机成绩</span></span><br><span class="line">        computer = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStuno</span><span class="params">()</span></span>&#123;                   <span class="comment">// 取得编号</span></span><br><span class="line">        <span class="keyword">return</span> stuno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;                     <span class="comment">// 取得姓名</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getMath</span><span class="params">()</span></span>&#123;                      <span class="comment">// 取得数学成绩</span></span><br><span class="line">        <span class="keyword">return</span> math;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getEnglish</span><span class="params">()</span></span>&#123;                   <span class="comment">// 取得英语成绩</span></span><br><span class="line">        <span class="keyword">return</span> english;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getComputer</span><span class="params">()</span></span>&#123;                  <span class="comment">// 取得计算机成绩</span></span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">sum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> math + english + computer;        <span class="comment">// 计算总分</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">avg</span><span class="params">()</span></span>&#123;                          <span class="comment">// 计算平均分</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sum() / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">max</span><span class="params">()</span></span>&#123;                          <span class="comment">// 最高成绩</span></span><br><span class="line">        <span class="keyword">float</span> max = math;</span><br><span class="line">        max = max &gt; computer ? max : computer;     <span class="comment">// 使用三目运算符</span></span><br><span class="line">        max = max &gt; english ? max : english;       <span class="comment">// 使用三目运算符</span></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">min</span><span class="params">()</span></span>&#123;                           <span class="comment">// 最低成绩</span></span><br><span class="line">        <span class="keyword">float</span> min = math;</span><br><span class="line">        min = math &lt; computer ? math : computer;    <span class="comment">// 使用三目运算符</span></span><br><span class="line">        min = math &lt; english ? math : english;      <span class="comment">// 使用三目运算符</span></span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">null</span>;                       <span class="comment">// 声明对象</span></span><br><span class="line">        <span class="comment">// 实例化Student对象，并通过构造方法赋值</span></span><br><span class="line">        stu = <span class="keyword">new</span> Student(<span class="string">"MLDN-33"</span>, <span class="string">"李兴华"</span>, <span class="number">95.0f</span>, <span class="number">89.0f</span>, <span class="number">96.0f</span>);</span><br><span class="line">        System.out.println(<span class="string">"学生编号："</span> + stu.getStuno());</span><br><span class="line">        System.out.println(<span class="string">"学生姓名："</span> + stu.getName());</span><br><span class="line">        System.out.println(<span class="string">"数学成绩："</span> + stu.getMath());</span><br><span class="line">        System.out.println(<span class="string">"英语成绩："</span> + stu.getEnglish());</span><br><span class="line">        System.out.println(<span class="string">"计算机成绩："</span> + stu.getComputer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">学生编号：MLDN-33</span><br><span class="line">学生姓名：李兴华</span><br><span class="line">数学成绩：95.0</span><br><span class="line">英语成绩：89.0</span><br><span class="line">计算机成绩：96.0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java实例</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：匿名对象</title>
    <url>/2019/05/15/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>匿名对象就是没有明确给出名称的对象。一般匿名对象只使用一次，而且匿名对象只在堆内存中开辟空间，而不存在栈内存的引用。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;                        <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;                            <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;        <span class="comment">// 定义构造方法，为属性初始化</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);                     <span class="comment">// 为name属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.setAge(age);                       <span class="comment">// 为age属性赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + getName() + <span class="string">"，年龄："</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; a &lt;= <span class="number">150</span>)&#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonameDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">30</span>).tell();            <span class="comment">// 匿名对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">姓名：张三，年龄：30</span><br></pre></td></tr></table></figure>
<p>在以上程序的主方法中可以发现，直接使用了“new Person(“张三”, “30”)”语句，这实际上就是一个匿名对象，与之前声明的对象不同，此处没有任何栈内存引用它，所以使用一次之后就等待被垃圾收集机制回收。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：构造方法</title>
    <url>/2019/05/13/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<blockquote>
<p>在面向对象程序中，构造方法的主要作用是为类中的属性初始化。在之前的学习过程中可以发现，在程序中只要出现了“()”就表示调用了方法，那么这个方法实际上就是表示要调用构造方法，构造方法可视为一种特殊的方法，它的定义方式与普通方法类似。</p>
</blockquote>
<a id="more"></a>
<p>Java中构造方法的语法结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class 类名称&#123;</span><br><span class="line">    访问权限 类名称（类型1 参数1，类型2 参数2，···）&#123;</span><br><span class="line">        程序语句;</span><br><span class="line">        ···     //构造方法没有返回值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在构造方法的声明中，一定要注意一下几点：</p>
<ol>
<li>构造方法的名称必须与类名称一致。</li>
<li>构造方法的声明处不能有任何返回值类型的声明。</li>
<li>不能在构造方法中使用return返回一个值。</li>
</ol>
<p>例如，声明一个构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;         <span class="comment">// 声明构造方法</span></span><br><span class="line">        System.out.println(<span class="string">"一个新的Person对象诞生。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"声明对象：Person per = null;"</span>);</span><br><span class="line">        Person per = <span class="keyword">null</span>;                <span class="comment">// 声明对象时不调用构造</span></span><br><span class="line">        System.out.println(<span class="string">"实例化对象：per = new Person();"</span>);</span><br><span class="line">        per = <span class="keyword">new</span> Person();               <span class="comment">// 实例化对象时调用构造</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">声明对象：Person per = null;</span><br><span class="line">实例化对象：per = new Person();</span><br><span class="line">一个新的Person对象诞生。</span><br></pre></td></tr></table></figure>
<p>需要说明的是，只要是类就必定存在构造方法，在Java中如果一个类中没有明确的声明一个构造方法时，则在编译时会直接生成一个无参数的、什么都不做的构造方法，也就是说，如果以上的Person类中没有明确的声明构造方法，实际上编译之后的类就会为用户自动加上以下形式的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面例子为通过构造方法为类中给属性赋值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person02</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;                           <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;                               <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person02</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;         <span class="comment">// 定义构造方法为属性初始化</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);                        <span class="comment">// 为name属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.setAge(age);                          <span class="comment">// 为age属性赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;                            <span class="comment">// 取得信息的方法</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + getName() + <span class="string">"，年龄："</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;                       <span class="comment">// 取得姓名</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;                 <span class="comment">// 设置姓名</span></span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;                           <span class="comment">// 取得年龄</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;                     <span class="comment">// 设置年龄</span></span><br><span class="line">        <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; a &lt;= <span class="number">150</span>)&#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person02 per = <span class="keyword">new</span> Person02(<span class="string">"张三"</span>, <span class="number">30</span>);   <span class="comment">// 调用构造方法，传递两个参数</span></span><br><span class="line">        per.tell();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">姓名：张三，年龄：30</span><br></pre></td></tr></table></figure>
<p>以上就是直接通过构造方法赋值，可以发现，这样赋值比对象实例化之后再单独调用setter方法更方便。需要说明的是，在一个类中如果已经明确地声明了一个构造方法，那么程序在编译时将不会再生成默认的构造方法，即一个类中应保证至少有一个构造方法。</p>
<p>与普通方法一样，构造方法也是可以重载的，只要每个构造方法的参数类型或参数个数不同，即可实现重载。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person03</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;                               <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;                                   <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person03</span><span class="params">()</span></span>&#123;&#125;                                <span class="comment">// 定义无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person03</span><span class="params">(String name)</span></span>&#123;                      <span class="comment">// 定义构造，为name属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person03</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;             <span class="comment">// 定义构造方法为属性初始化</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);                            <span class="comment">// 为name属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.setAge(age);                              <span class="comment">// 为age属性赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;                                <span class="comment">// 取得信息的方法</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + getName() + <span class="string">"，年龄："</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;                           <span class="comment">// 取得姓名</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;                     <span class="comment">// 设置姓名</span></span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;                               <span class="comment">// 取得年龄</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;                         <span class="comment">// 设置年龄</span></span><br><span class="line">        <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; a &lt;= <span class="number">150</span>)&#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person03 per = <span class="keyword">new</span> Person03(<span class="string">"张三"</span>);     <span class="comment">// 调用有一个参数的构造</span></span><br><span class="line">        per.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">姓名：张三，年龄：0</span><br></pre></td></tr></table></figure>
<p>以上类的构造方法被重载了3次，在主方法中调用的是只有一个参数的构造方法（只设置姓名），因为没有设置年龄，所以年龄默认值为0。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：封装性</title>
    <url>/2019/04/18/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B0%81%E8%A3%85%E6%80%A7/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<blockquote>
<p>封装是指隐藏对象的属性和实现细节，仅对外提供公共访问方式。封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。要访问该类的代码和数据，必须通过严格的接口控制。</p>
</blockquote>
<a id="more"></a>
<p>封装性是面向对象的第一大特性，所谓的封装性就是指对外部不可见，那么为什么要有封装性呢，首先观察以下程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person06</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person06 per = <span class="keyword">new</span> Person06();        <span class="comment">// 声明并实例化对象</span></span><br><span class="line">        per.name = <span class="string">"张三"</span>;                    <span class="comment">// 为name属性赋值</span></span><br><span class="line">        per.age = -<span class="number">30</span>;                        <span class="comment">// 为age属性赋值</span></span><br><span class="line">        per.tell();                           <span class="comment">// 调用方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">姓名：张三，年龄：-30</span><br></pre></td></tr></table></figure>
<p>年龄赋值为-30在程序中是正确的，因为int可以取负值，但是在实际中没有人的年龄是负的。之前所列举的程序都是用对象直接访问类中的属性，这在面向对象法则中是不允许的，所以为了避免程序中这种错误的发生，在一般的开发中往往要将类中的属性封装，封装的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">属性封装： private 属性类型 属性名称；</span><br><span class="line">方法封装： private 方法返回值 方法名称（参数列表）&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>例如，为程序加上封装属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person07</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;             <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;                 <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person07 per = <span class="keyword">new</span> Person07();</span><br><span class="line">        per.name = <span class="string">"张三"</span>;</span><br><span class="line">        per.age = -<span class="number">30</span>;</span><br><span class="line">        per.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序会编译出错，本程序与上面的程序除了在声明属性上有些区别外，并没有其他的区别，而就是一个小小的关键字private，使程序连编译都无法通过，而所提示的错误为“属性（name、age）为私有的”，所以不能由对象直接进行访问，这样就可以保证对象无法直接去访问类中是属性，从而保证堆入口处有所限制，可是这样以来又该如何访问此属性呢？为了解决属性必须封装且必须访问的矛盾，在Java开发中对于私有属性的访问有了以下的明确定义：“只要是被封装的属性，则必须通过setter和getter方法设置和取得”。</p>
<p>为前面类中的私有属性加上setter和getter方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person08</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + getName() + <span class="string">"，年龄："</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;                  <span class="comment">// 取得姓名</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;    <span class="comment">// 设置姓名</span></span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;              <span class="comment">// 取得年龄</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;        <span class="comment">// 设置年龄</span></span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person08 person = <span class="keyword">new</span> Person08();      <span class="comment">// 声明并实例化对象</span></span><br><span class="line">        person.setName(<span class="string">"张三"</span>);                <span class="comment">// 调用setter设置姓名</span></span><br><span class="line">        person.setAge(-<span class="number">30</span>);                    <span class="comment">// 调用setter设置年龄</span></span><br><span class="line">        person.tell();                         <span class="comment">// 输出信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">姓名：张三，年龄：-30</span><br></pre></td></tr></table></figure>
<p>观察程序的结构，可以发现通过setter和getter方法可以设置和取得属性，而在主方法调用时，也是调用了setter()方法进行内容的赋值，也就是说如果想要堆设置进去的值进行检查，则只需要在setter()方法中加入检查代码即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person09</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a&gt;=<span class="number">0</span> &amp;&amp; a&lt;<span class="number">150</span>)&#123;             <span class="comment">// 在此处加上验证代码</span></span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person09 per = <span class="keyword">new</span> Person09();</span><br><span class="line">        per.setName(<span class="string">"张三"</span>);</span><br><span class="line">        per.setAge(-<span class="number">30</span>);</span><br><span class="line">        per.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">姓名：张三，年龄：0</span><br></pre></td></tr></table></figure>
<p>因为程序中的setter方法处加入了验证代码，所以如果年龄数值不正确，则不会把值赋给age属性，所以程序的运行结果为0。</p>
<blockquote>
<p><strong>关于private的补充说明</strong></p>
<p>（1）类中的属性都必须封装，封装之后的属性必须通过setter和getter进行访问。</p>
<p>（2）面向对象的封装性本身并不是单单指private关键字，用private声明的属性或方法只能在其类的内部被调用，而不能在类的外部被调用。</p>
<p>（3）正常情况下，类中的方法直接写上方法名称就可以完成本类中的方法调用，如果在此时非要枪带哦时本类中的方法，也可以在调用时按“this.方法名称()”的形式编写。</p>
</blockquote>
<p>程序中的属性进行封装后，在使用类图表示封装属性时就必须按照如下的风格：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-属性名称：数据类型</span><br></pre></td></tr></table></figure>
<p>其中“-”表示private。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：类与对象</title>
    <url>/2019/04/15/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<blockquote>
<p>在面向对象中，类和对象是最基本、最重要的组成单元。类实际上是表示一个客观世界某类群体的一些基本特征抽象。对象就是表示一个个具体的东西。例如，现实生活中，人可以称为一个类，因为人是一种广义的概念，并不是具体的。而某一个人就可以称为一个对象，某个人可以通过他的各种特征来描述，例如姓名、性别、年龄等。这些信息在面向对象的概念中就称为属性；当然人是可以吃饭、睡觉的，这些人的行为在类中就称为方法。</p>
</blockquote>
<a id="more"></a>
<p>如果要使用一个类，就一定要产生一个对象，每个对象之间是靠属性的不同来进行区分的，而每个对象所具备的操作就是类中规定好的方法。</p>
<h3 id="类的定义"><a class="markdownIt-Anchor" href="#类的定义"></a> 类的定义</h3>
<p>类是由属性和方法组成的，属性中定义的是类需要的一个个具体信息，实际上一个属性就是一个变量，而方法是一些操作行为，但是在程序设计中，定义类也是要按照具体的语法要求完成的，类的定义语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class 类名称&#123;</span><br><span class="line">    数据类型 属性；</span><br><span class="line">    ···</span><br><span class="line">    public 返回值的数据类型 方法名称（参数1，参数2...）&#123;</span><br><span class="line">        程序语句；</span><br><span class="line">        [return 表达式；]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>类中定义方法的补充说明</strong></p>
<p>可以发现，此处的方法与之前的方法定义有区别，并没有加上static关键字，这是因为此时定义的方法将有对象调用，而不像之前那样与主方法定义在一个类中并且由主方法之间调用。</p>
</blockquote>
<p>例如我们定义一个Person类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;             <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">int</span> age;                 <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;      <span class="comment">// 取得信息的方法</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类定义完成后，我们可以通过下图所示的图形样式来表示出类的定义：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Person</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name : String <br> age : int</td>
</tr>
<tr>
<td style="text-align:center">+ tell() : void</td>
</tr>
</tbody>
</table>
<ol>
<li>第一层表示类的名称，类的名称要求开头首字母大写。</li>
<li>第二层表示属性的定义，按照“访问权限 属性名称：属性类型”的格式定义，在本类中因为声明属性处没有写任何的访问权限，所以前面暂时不加任何的符号。</li>
<li>第三层表示类中方法的定义，按照“访问权限 方法名称():方法返回值”的格式定义，在本类中，方法的声明处加上了public（此为访问权限，表示任何地方都可以访问），所以使用“+”表示，另外，如果方法中由传递的参数，则此方法定义格式为“访问权限 方法名称(参数名称: 参数类型, 参数名称: 参数类型, …): 方法返回值”</li>
</ol>
<h3 id="对象的创建及使用"><a class="markdownIt-Anchor" href="#对象的创建及使用"></a> 对象的创建及使用</h3>
<p>要想使用一个类则必须由对象，下面给出了对象的创建格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类名 对象名称 = null;                 // 声明对象</span><br><span class="line">对象名称 = new 类名();                // 实例化对象</span><br></pre></td></tr></table></figure>
<p>以上格式产生对象分为声明对象和实例化对象两步。</p>
<p>当然也可以直接通过以下方式一步完成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类名 对象名称 = new 类名();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上格式与之前数组定义的格式相似，因为类和数组都属于引用数据类型，只要引用数据类型的使用格式都可以使用如上的定义样式。</p>
</blockquote>
<p>创建对象的具体范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;                    <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">int</span> age;                        <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;             <span class="comment">// 取得信息的方法</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> Person();   <span class="comment">// 创建并实例化对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要使用对象访问类中的某个属性或方法可以使用如下的语法实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">访问属性：对象名称.属性名</span><br><span class="line">访问方法：对象名称.方法名()</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span>&#123;</span><br><span class="line">    String name;                <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">int</span> age;                    <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person2 per = <span class="keyword">null</span>;            <span class="comment">// 声明对象</span></span><br><span class="line">        per = <span class="keyword">new</span> Person2();           <span class="comment">// 实例化对象</span></span><br><span class="line">        per.name = <span class="string">"张三"</span>;            <span class="comment">// 为name属性赋值</span></span><br><span class="line">        per.age = <span class="number">30</span>;                 <span class="comment">// 为age属性赋值</span></span><br><span class="line">        per.tell();                   <span class="comment">// 调用类中的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">姓名：张三，年龄：30</span><br></pre></td></tr></table></figure>
<h3 id="创建多个对象"><a class="markdownIt-Anchor" href="#创建多个对象"></a> 创建多个对象</h3>
<p>前面介绍过创建一个对象的方法，可以按照同样的格式同时创建多个对象，每个对象会分别占据自己的堆、栈空间。</p>
<p>创建两个对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person3</span></span>&#123;</span><br><span class="line">    String name;          <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">int</span> age;              <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person3 per1 = <span class="keyword">null</span>;              <span class="comment">// 声明per1对象</span></span><br><span class="line">        Person3 per2 = <span class="keyword">null</span>;              <span class="comment">// 声明per2对象</span></span><br><span class="line">        per1 = <span class="keyword">new</span> Person3();             <span class="comment">// 实例化per1对象</span></span><br><span class="line">        per2 = <span class="keyword">new</span> Person3();             <span class="comment">// 实例化per2对象</span></span><br><span class="line">        per1.name = <span class="string">"张三"</span>;               <span class="comment">// 设置per1对象的name属性内容</span></span><br><span class="line">        per1.age = <span class="number">30</span>;                    <span class="comment">// 设置per1对象的age属性内容</span></span><br><span class="line">        per2.name = <span class="string">"李四"</span>;               <span class="comment">// 设置per2对象的name属性内容</span></span><br><span class="line">        per2.age = <span class="number">33</span>;                    <span class="comment">// 设置per2对象的age属性内容</span></span><br><span class="line">        System.out.print(<span class="string">"per1对象中的内容 --&gt;"</span>);</span><br><span class="line">        per1.tell();                      <span class="comment">// per1调用方法</span></span><br><span class="line">        System.out.print(<span class="string">"per2对象中的内容 --&gt;"</span>);</span><br><span class="line">        per2.tell();                      <span class="comment">// per2调用方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">per1对象中的内容 --&gt;姓名：张三，年龄：30</span><br><span class="line">per2对象中的内容 --&gt;姓名：李四，年龄：33</span><br></pre></td></tr></table></figure>
<p>类属于引用数据类型，而且从数组的使用上也可以发现，引用数据类型就是指一段堆内存空间可以同时被多个栈内存指向。下面来看一个引用传递的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person4</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person4 per1 = <span class="keyword">null</span>;</span><br><span class="line">        Person4 per2 = <span class="keyword">null</span>;</span><br><span class="line">        per1 = <span class="keyword">new</span> Person4();</span><br><span class="line">        per2 = per1;                 <span class="comment">// 把per1的堆内存空间使用权给per2</span></span><br><span class="line">        per1.name = <span class="string">"张三"</span>;</span><br><span class="line">        per1.age = <span class="number">30</span>;</span><br><span class="line">        <span class="comment">// 设置per2对象的内容，实际上就是设置per1对象的内容</span></span><br><span class="line">        per2.age = <span class="number">33</span>;</span><br><span class="line">        System.out.print(<span class="string">"per1对象中的内容 --&gt;"</span>);</span><br><span class="line">        per1.tell();</span><br><span class="line">        System.out.print(<span class="string">"per2对象中的内容 --&gt;"</span>);</span><br><span class="line">        per2.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">per1对象中的内容 --&gt;姓名：张三，年龄：33</span><br><span class="line">per2对象中的内容 --&gt;姓名：张三，年龄：33</span><br></pre></td></tr></table></figure>
<p>从程序运行结果可以发现，两个对象的输出内容是一样的，实际上所谓的引用传递就是将一个堆内存空间的使用权给多个栈内存空间，每个栈内存空间都可以修改堆内存的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person5</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person5 per1 = <span class="keyword">null</span>;</span><br><span class="line">        Person5 per2 = <span class="keyword">null</span>;</span><br><span class="line">        per1 = <span class="keyword">new</span> Person5();</span><br><span class="line">        per2 = <span class="keyword">new</span> Person5();</span><br><span class="line">        per1.name = <span class="string">"张三"</span>;</span><br><span class="line">        per1.age = <span class="number">30</span>;</span><br><span class="line">        per2.name = <span class="string">"李四"</span>;</span><br><span class="line">        per2.age = <span class="number">33</span>;</span><br><span class="line">        per2 = per1;</span><br><span class="line">        System.out.print(<span class="string">"per1对象中的内容 --&gt;"</span>);</span><br><span class="line">        per1.tell();</span><br><span class="line">        System.out.print(<span class="string">"per2对象中的内容 --&gt;"</span>);</span><br><span class="line">        per2.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">per1对象中的内容 --&gt;姓名：张三，年龄：30</span><br><span class="line">per2对象中的内容 --&gt;姓名：张三，年龄：30</span><br></pre></td></tr></table></figure>
<p>因为per2本身有堆内存空间，所以如果要想再指向per1对应的空间，则必须先断开已有的连接。而per2原来的空间没有任何的栈内存空间所引用，就形成了垃圾空间，等待垃圾收集机制进行回收。</p>
<blockquote>
<p><strong>关于垃圾空间的释放</strong></p>
<p>Java本身提供垃圾收集机制（Garbage Collection, GC），会不定期地释放不用的内存空间，只要对象不使用了，就会等待GC释放空间。</p>
</blockquote>
<p>从上面的程序中明确的一点，即一个栈内存空间只能指向一个堆内存空间，如果要想再指向其他的堆内存空间，则必须先断开已有的指向才能分配新的指向。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java开发实战经典习题4-6</title>
    <url>/2019/04/05/Java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%BB%8F%E5%85%B8%E4%B9%A0%E9%A2%984-6/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<blockquote>
<p>Java开发实战第四章习题：数组与方法。掌握数组的定义及使用方法、掌握数组的应用传递、掌握方法及方法的重载、使用方法接收和返回一个数组、了解Java对数组的操作支持。</p>
</blockquote>
<a id="more"></a>
<h4 id="编写程序求1230的和并显示要求使用方法完成"><a class="markdownIt-Anchor" href="#编写程序求1230的和并显示要求使用方法完成"></a> 编写程序求1!+2!+···+30!的和并显示，要求使用方法完成。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;<span class="number">31</span>; i++)&#123;</span><br><span class="line">            sum = sum + Factorial(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"1!+2!+...+30! = "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">Factorial</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">float</span> temp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=x; i++)&#123;</span><br><span class="line">            temp = temp*i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以利用递归的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;<span class="number">31</span>; i++)&#123;</span><br><span class="line">            sum = sum + Factorial(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"1!+2!+...+30! = "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">Factorial</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x * Factorial(x-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：<code>1!+2!+...+30! = 2.7441084E32</code>。</p>
<h4 id="定义一个由整数组成的数组要求求出其中的奇数个数和偶数个数"><a class="markdownIt-Anchor" href="#定义一个由整数组成的数组要求求出其中的奇数个数和偶数个数"></a> 定义一个由整数组成的数组，要求求出其中的奇数个数和偶数个数。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">45</span>, <span class="number">32</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">98</span>&#125;;</span><br><span class="line">        oddEven(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">oddEven</span><span class="params">(<span class="keyword">int</span> temp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> odd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> even = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;temp.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> n = temp[i] % <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (n==<span class="number">0</span>)&#123;</span><br><span class="line">                even = even + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                odd = odd +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"奇数个数为："</span> + odd);</span><br><span class="line">        System.out.println(<span class="string">"偶数个数为："</span> + even);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="现在有如下的一个数组int-oldarr1345006605476705要求将以上数组中值为0的项去掉将不为0的值存入一个新的数组生成新数组为int-newarr134566547675"><a class="markdownIt-Anchor" href="#现在有如下的一个数组int-oldarr1345006605476705要求将以上数组中值为0的项去掉将不为0的值存入一个新的数组生成新数组为int-newarr134566547675"></a> 现在有如下的一个数组<code>int oldArr[]={1,3,4,5,0,0,6,6,0,5,4,7,6,7,0,5};</code>，要求将以上数组中值为0的项去掉，将不为0的值存入一个新的数组，生成新数组为<code>int newArr[]={1,3,4,5,6,6,5,4,7,6,7,5}</code>。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldArr[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> newArr[]= <span class="keyword">new</span> <span class="keyword">int</span>[oldArr.length];</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;oldArr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (oldArr[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                newArr[j] = oldArr[i];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;j; i++)&#123;</span><br><span class="line">            System.out.print(newArr[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="定义一个整型数组求出数组元素的和-数组元素的最大值和最小值并输出所求的结果"><a class="markdownIt-Anchor" href="#定义一个整型数组求出数组元素的和-数组元素的最大值和最小值并输出所求的结果"></a> 定义一个整型数组，求出数组元素的和、数组元素的最大值和最小值，并输出所求的结果。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> temp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = temp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> min = temp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length; i++)&#123;</span><br><span class="line">            sum = sum + temp[i];</span><br><span class="line">            <span class="keyword">if</span> (max &lt; temp[i])&#123;</span><br><span class="line">                max = temp[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; temp[i])&#123;</span><br><span class="line">                min = temp[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"数组元素之和为："</span> + sum);</span><br><span class="line">        System.out.println(<span class="string">"数组中的最大值为："</span> + max);</span><br><span class="line">        System.out.println(<span class="string">"数组中的最小值为："</span> + min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="给出10个整数int型然后任意查询一个数字是否存在再该10个数字内"><a class="markdownIt-Anchor" href="#给出10个整数int型然后任意查询一个数字是否存在再该10个数字内"></a> 给出10个整数（int型），然后任意查询一个数字是否存在再该10个数字内。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">7</span>;</span><br><span class="line">        print(num1, arr);</span><br><span class="line">        print(num2, arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> temp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;temp.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (x == temp[i])&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(x + <span class="string">"在这十个数中"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(x + <span class="string">"不在这十个数中"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="定义一个包含10个元素的数组对其进行赋值使每个元素的值等于其下标然后输出最后将这个数组倒置即首尾交换后输出"><a class="markdownIt-Anchor" href="#定义一个包含10个元素的数组对其进行赋值使每个元素的值等于其下标然后输出最后将这个数组倒置即首尾交换后输出"></a> 定义一个包含10个元素的数组，对其进行赋值，使每个元素的值等于其下标，然后输出；最后将这个数组倒置（即首尾交换）后输出。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = arr.length-<span class="number">1</span>; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">            System.out.print(arr[j] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="给出10个老师的打分对10个老师的打分找到最高分"><a class="markdownIt-Anchor" href="#给出10个老师的打分对10个老师的打分找到最高分"></a> 给出10个老师的打分，对10个老师的打分找到最高分。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">67</span>, <span class="number">88</span>, <span class="number">78</span>, <span class="number">69</span>, <span class="number">100</span>, <span class="number">57</span>, <span class="number">81</span>, <span class="number">89</span>, <span class="number">94</span>, <span class="number">91</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;score.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (max&lt;score[i])&#123;</span><br><span class="line">                max = score[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"10个老师打分中最高分为："</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="有30个0~9之间的数字分别统计0~9这10个数字分别出现了多少次"><a class="markdownIt-Anchor" href="#有30个0~9之间的数字分别统计0~9这10个数字分别出现了多少次"></a> 有30个0~9之间的数字，分别统计0~9这10个数字分别出现了多少次。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = count(i, arr);</span><br><span class="line">            System.out.println(i + <span class="string">"在数组中出现的次数为："</span> + num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> temp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;temp.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (x==temp[i])&#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="定义一个整型数组保存10个数据利用程序完成将最大值保存在数组中的第一个元素的操作"><a class="markdownIt-Anchor" href="#定义一个整型数组保存10个数据利用程序完成将最大值保存在数组中的第一个元素的操作"></a> 定义一个整型数组，保存10个数据，利用程序完成将最大值保存在数组中的第一个元素的操作。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">9</span>, <span class="number">45</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">51</span>, <span class="number">65</span>, <span class="number">21</span>, <span class="number">200</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">"原数组为："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;arr.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (max&lt;arr[j])&#123;</span><br><span class="line">                max = arr[j];</span><br><span class="line">                num = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = max;</span><br><span class="line">        arr[num] = temp;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);</span><br><span class="line">        System.out.println(<span class="string">"最大值保存在数组中的第一个元素后:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="在排序号的数组中添加一个数字将添加后的数组插入到数组合适的位置"><a class="markdownIt-Anchor" href="#在排序号的数组中添加一个数字将添加后的数组插入到数组合适的位置"></a> 在排序号的数组中添加一个数字，将添加后的数组插入到数组合适的位置。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>&#125;;</span><br><span class="line">        insert(num, arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newArr[] = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (x&lt;arr[i])&#123;</span><br><span class="line">                temp = i;</span><br><span class="line">                newArr[temp] = x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                temp = arr.length;   <span class="comment">//如果要插入的数字是否比数组中最后一个数字大</span></span><br><span class="line">                newArr[temp] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;temp; j++)&#123;</span><br><span class="line">            newArr[j] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = temp+<span class="number">1</span>; j&lt;newArr.length; j++)&#123;</span><br><span class="line">            newArr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;newArr.length; i++)&#123;</span><br><span class="line">            System.out.print(newArr[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java练习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：Java新特性对数组的支持</title>
    <url>/2019/04/05/Java%E7%AC%94%E8%AE%B0%EF%BC%9AJava%E6%96%B0%E7%89%B9%E6%80%A7%E5%AF%B9%E6%95%B0%E7%BB%84%E7%9A%84%E6%94%AF%E6%8C%81/</url>
    <content><![CDATA[<h3 id="java新特性可变参数"><a class="markdownIt-Anchor" href="#java新特性可变参数"></a> Java新特性——可变参数</h3>
<p>在调用一个方法时，必须根据方法的定义传递指定的参数，但是在JDK 1.5（JAVA SE 5.0）之后产生了新的概念——可变参数，即方法中可以接收的参数不再是固定的，而是随着需要传递的，可变参数的定义格式如下：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回值类型 方法名称(类型...参数名称)&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>向方法中传递可变参数后，其中的参数是以数组的形式保存下来的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"不传递参数 （fun()）："</span>);</span><br><span class="line">        fun();                                      <span class="comment">// 不传递参数</span></span><br><span class="line">        System.out.print(<span class="string">"\n传递1个参数 （fun(1)）："</span>);</span><br><span class="line">        fun(<span class="number">1</span>);                                     <span class="comment">// 传递一个参数</span></span><br><span class="line">        System.out.print(<span class="string">"\n传递5个参数 （fun(1, 2, 3, 4, 5)）："</span>);</span><br><span class="line">        fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);                         <span class="comment">// 传递五个参数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span>...arg)</span></span>&#123;              <span class="comment">// 可变参数，可以接收任意多个参数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arg.length; i++)&#123;</span><br><span class="line">            System.out.print(arg[i] + <span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不传递参数 （fun()）：</span><br><span class="line">传递1个参数 （fun(1)）：1、</span><br><span class="line">传递5个参数 （fun(1, 2, 3, 4, 5)）：1、2、3、4、5、</span><br></pre></td></tr></table></figure>
<p>在使用可变参数的时候，也可以直接向方法中传递一个数组，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> temp[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;      <span class="comment">// 定义数组</span></span><br><span class="line">fun(temp);                   <span class="comment">// 向可变参数中传递数组</span></span><br></pre></td></tr></table></figure>
<p>对于以上传递数组的操作，也可以变成以下形式的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fun(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="java新特性foreach输出"><a class="markdownIt-Anchor" href="#java新特性foreach输出"></a> Java新特性——foreach输出</h3>
<p>数组的输出一般都会使用for循环，但是在JDK 1.5之后为了方便数组的输出，提供了一种foreach语法，此语法的使用格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(数据类型 变量名称：数组名称)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"不传递参数 （fun()）："</span>);</span><br><span class="line">        fun();                                 <span class="comment">// 不传递参数</span></span><br><span class="line">        System.out.print(<span class="string">"\n传递1个参数 （fun(1)）:"</span>);</span><br><span class="line">        fun(<span class="number">1</span>);                                <span class="comment">// 传递一个参数</span></span><br><span class="line">        System.out.print(<span class="string">"\n传递5个参数 （fun(1, 2, 3, 4, 5)）："</span>);</span><br><span class="line">        fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);                    <span class="comment">// 传递五个参数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span>...arg)</span></span>&#123;                <span class="comment">// 可变参数，可以接收任意多个参数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : arg)&#123;                            <span class="comment">// 使用foreach输出</span></span><br><span class="line">            System.out.print(x + <span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不传递参数 （fun()）：</span><br><span class="line">传递1个参数 （fun(1)）:1、</span><br><span class="line">传递5个参数 （fun(1, 2, 3, 4, 5)）：1、2、3、4、5、</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：数组的引用传递</title>
    <url>/2019/04/05/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%95%B0%E7%BB%84%E7%9A%84%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<h3 id="传递及返回数组"><a class="markdownIt-Anchor" href="#传递及返回数组"></a> 传递及返回数组</h3>
<p>前面的方法操作中，传递和返回的都是基本数据类型，除此之外，方法中也可以传递和返回数组。如果要向方法中传递一个数组，则方法的接收参数必须是符合其类型的数组。而且数组属于引用数据类型，所以在把数组传递进方法之后，如果方法对数组本身做了任何修改，修改结果也将保存下来。</p>
<a id="more"></a>
<p>向方法中传递数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDefDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;                  <span class="comment">// 使用静态初始化定义数组</span></span><br><span class="line">        fun(temp);                               <span class="comment">// 传递数组引用</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length; i++)&#123;   <span class="comment">// 循环输出</span></span><br><span class="line">            System.out.print(temp[i] + <span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x[])</span></span>&#123;             <span class="comment">// 接收整型数组引用</span></span><br><span class="line">        x[<span class="number">0</span>] = <span class="number">6</span>;                                <span class="comment">//修改第1个元素的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：<code>6、3、5、</code></p>
<p>在程序中将第一个整型数组temp传递到了方法中，然后在fun()方法中将此整型数组的第一个元素的内容修改为6，因为数组是引用数据类型，所以，即使方法本身没有任何的返回值，修改后的结果也会被保存下来。一开始声明的temp数组的内容是“1、3、5”，但是将此数组传递到了方法中，并使用数组x接收，也就是说此时temp实际上是将堆内存空间的使用权传递给了方法，为数组的具体内容起了一个别名x，然后在方法中通过x修改数组中的内容，方法执行完毕之后，数组x因为是局部变量所以就失效了，但是对于数组内容的改变却保留了下来，也就是<strong>数组引用传递的过程</strong>。</p>
<p>既然方法可以接收一个数组，那么方法也可以返回一个数组，只需要返回值类型声明处明确地写出返回的数据类型即可。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayRefDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp[] = fun();                   <span class="comment">// 通过方法实例化数组</span></span><br><span class="line">        print(temp);                          <span class="comment">// 向print()方法中传递数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x[])</span></span>&#123;        <span class="comment">// 接收数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++)&#123;   <span class="comment">// 循环输出</span></span><br><span class="line">            System.out.print(x[i] + <span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] fun()&#123;</span><br><span class="line">        <span class="keyword">int</span> ss[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;          <span class="comment">// 定义一个数组</span></span><br><span class="line">        <span class="keyword">return</span> ss;                           <span class="comment">// 返回数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：<code>1、3、5、7、9、</code>。</p>
<h3 id="范例数组排序"><a class="markdownIt-Anchor" href="#范例数组排序"></a> 范例——数组排序</h3>
<p>将数组排序程序修改成一个方法的调用形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDefDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">67</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">75</span>, <span class="number">90</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> age[] = &#123;<span class="number">31</span>, <span class="number">30</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">39</span>&#125;;</span><br><span class="line">        sort(score);                                      <span class="comment">// 数组排序</span></span><br><span class="line">        print(score);                                     <span class="comment">// 数组打印</span></span><br><span class="line">        System.out.println(<span class="string">"\n----------------------------------------"</span>);</span><br><span class="line">        sort(age);                                      <span class="comment">// 数组排序</span></span><br><span class="line">        print(age);                                     <span class="comment">// 数组打印</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> temp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; temp.length; i++)&#123;            <span class="comment">// 使用冒泡排序算法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; temp.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (temp[i]&lt;temp[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> x = temp[i];</span><br><span class="line">                    temp[i] = temp[j];</span><br><span class="line">                    temp[j] = x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;x.length; i++)&#123;</span><br><span class="line">            System.out.print(x[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">67	69	75	87	89	90	90	100	</span><br><span class="line">----------------------------------------</span><br><span class="line">1	8	9	17	18	30	31	39</span><br></pre></td></tr></table></figure>
<p>以上程序分别把排序和输出的功能定义为方法，然后直接调用这两个方法进行数组的排序和输出。</p>
<p>当然，对于排序操作，Java本身也是有类库支持的，我们可以直接使用“java.util.Arrays.sort(数组名称)”对数组进行排序，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDefDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">67</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">75</span>, <span class="number">90</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> age[] = &#123;<span class="number">31</span>, <span class="number">30</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">39</span>&#125;;</span><br><span class="line">        java.util.Arrays.sort(score);                     <span class="comment">// 使用Java提供的排序操作</span></span><br><span class="line">        print(score);                                      <span class="comment">// 输出数组</span></span><br><span class="line">        System.out.println(<span class="string">"\n-------------------------------"</span>);</span><br><span class="line">        java.util.Arrays.sort(age);</span><br><span class="line">        print(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;x.length; i++)&#123;</span><br><span class="line">            System.out.print(x[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">67	69	75	87	89	90	90	100	</span><br><span class="line">-------------------------------</span><br><span class="line">1	8	9	17	18	30	31	39</span><br></pre></td></tr></table></figure>
<h3 id="范例数组复制"><a class="markdownIt-Anchor" href="#范例数组复制"></a> 范例——数组复制</h3>
<p>如果给定两个数组，将其中一个数组指定位置的内容复制给另外一个数组，可以是使用方法来完成，在方法中接收5个参数，分别为“源数组名称”、“源数组开始点”、“目标数组名称”、“目标数组开始点”、“复制长度”。具体操作如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayCopyDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i1[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;             <span class="comment">// 源数组</span></span><br><span class="line">        <span class="keyword">int</span> i2[] = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>&#125;;    <span class="comment">// 目标数组</span></span><br><span class="line">        copy(i1, <span class="number">3</span>, i2, <span class="number">1</span>, <span class="number">3</span>);                <span class="comment">// 调用复制方法</span></span><br><span class="line">        print(i2);                                          <span class="comment">// 输出数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 参数含义：源数组名称、源数组开始点、目标数组名称、目标数组开始点、复制长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> s1, <span class="keyword">int</span> o[], <span class="keyword">int</span> s2, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            o[s2+i] = s[s1+i];                             <span class="comment">// 修改目标数组内容</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;x.length; i++)&#123;</span><br><span class="line">            System.out.print(x[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：<code>11	4	5	6	55	66	77	88	99</code>。</p>
<p>同样的，在Java中也存在复制的类库支持，直接使用System.arraycopy()方法即可，此方法中也要接收参数，参数的接收顺序及意义与上面的范例中的copy()方法相同。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayCopyDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i1[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> i2[] = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>&#125;;</span><br><span class="line">        System.arraycopy(i1, <span class="number">3</span>, i2, <span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        print(i2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;x.length; i++)&#123;</span><br><span class="line">            System.out.print(x[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：方法的声明及使用</title>
    <url>/2019/04/04/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%96%B9%E6%B3%95%E7%9A%84%E5%A3%B0%E6%98%8E%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="方法的定义"><a class="markdownIt-Anchor" href="#方法的定义"></a> 方法的定义</h3>
<p>方法就是一段可重复调用的代码，在有些地方也把方法叫做函数。方法的定义在Java中可以使用多种方式，以下格式定义的方法可以直接使用主方法（main()）调用，是因为在方法声明处加上了public static关键字。</p>
<a id="more"></a>
<p>方法暂时使用如下的语句进行定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public station 返回值类型 方法名称（类型 参数1，类型 参数2，···）&#123;</span><br><span class="line">    程序语句；</span><br><span class="line">    [return 表达式]；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要特别注意的是，如果不需要传递参数到方法中，只要将括号写出，不必填入任何类容。此外，如果方法没有返回值，则在返回类型处要明确写出void，此时，在方法中的return语句可以省略，方法执行完成之后无论是否存在返回值都将返回到方法的调用处并向下继续执行。</p>
<p>例如，定义一个方法，在主方法中调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        printInfo();                   <span class="comment">// 调用printInfo方法</span></span><br><span class="line">        printInfo();                   <span class="comment">// 调用printInfo方法</span></span><br><span class="line">        printInfo();                   <span class="comment">// 调用printInfo方法</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此处由于此方法是由main()方法直接调用的，所以一定要加上public static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span>&#123;     <span class="comment">// 此处方法没有返回值</span></span><br><span class="line">        <span class="keyword">char</span> c[] = &#123;<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">','</span>, <span class="string">'L'</span>, <span class="string">'X'</span>, <span class="string">'H'</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; c.length; i++)&#123;</span><br><span class="line">            System.out.print(c[i]);     <span class="comment">// 循环输出</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">""</span>);         <span class="comment">// 换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello,LXH</span><br><span class="line">Hello,LXH</span><br><span class="line">Hello,LXH</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>
<p>从程序中可以发现，因为printInfo()方法本身不需要任何的返回值声明，所以使用了void关键字进行了声明，表示此方法不需要任何的返回值，所以不需要编写return语句。</p>
<blockquote>
<p><strong>方法命名规范要求</strong></p>
<p>在定义类时，全部单词的首字母必须大写，那么在定义方法时也有命名规范要求，即第一个单词的首字母小写，之后每一个单词的首字母大写，如printInfo()方法。</p>
</blockquote>
<p>前面介绍了没有返回值的方法，下面是有返回值的方法例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> one = addOne(<span class="number">10</span>, <span class="number">20</span>);            <span class="comment">// 调用整数的加法操作</span></span><br><span class="line">        <span class="keyword">float</span> two = addTwo(<span class="number">10.3f</span>, <span class="number">13.3f</span>);          <span class="comment">// 调用浮点数的加法操作</span></span><br><span class="line">        System.out.println(<span class="string">"addOne的计算结果："</span> + one);</span><br><span class="line">        System.out.println(<span class="string">"addTwo的计算结果："</span> + two);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义方法，完成两个整数的加法操作，方法返回一个int型数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">addOne</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;                             <span class="comment">// temp为局部变量，只在此方法中有效</span></span><br><span class="line">        temp = x + y;                             <span class="comment">// 执行加法计算</span></span><br><span class="line">        <span class="keyword">return</span> temp;                              <span class="comment">// 返回计算结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义方法，完成两个浮点数的加法操作，方法返回一个float型数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">addTwo</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">float</span> temp = <span class="number">0</span>;                           <span class="comment">// temp为局部变量，只在此方法中有效</span></span><br><span class="line">        temp = x + y;                             <span class="comment">// 执行加法计算</span></span><br><span class="line">        <span class="keyword">return</span> temp;                              <span class="comment">// 返回计算结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addOne的计算结果：30</span><br><span class="line">addTwo的计算结果：23.6</span><br></pre></td></tr></table></figure>
<p>另外，在方法中可以定义多个变量，这些变量只在方法的内部起作用，所以也可以把这些变量称为<strong>局部变量</strong>。</p>
<h3 id="方法的重载"><a class="markdownIt-Anchor" href="#方法的重载"></a> 方法的重载</h3>
<p>在面的addOne()和addTwo()两种方法的演示中，我们可以发现，两种方法都是做加法运算，其本质是相同的，应该统一为add()方法才对，为了解决这个问题，Java中引入了<strong>方法重载</strong>的概念。所谓的方法重载就是方法名称相同，但是参数的类型和参数的个数不同。通过传递参数的个数及类型的不同可以完成不同功能方法的调用。</p>
<p>验证方法的重载：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> one = add(<span class="number">10</span>, <span class="number">20</span>);              <span class="comment">// 调用有两个参数的整型加法</span></span><br><span class="line">        <span class="keyword">int</span> two = add(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);          <span class="comment">// 调用有三个参数的整型加法</span></span><br><span class="line">        <span class="keyword">float</span> three = add(<span class="number">10.3f</span>, <span class="number">13.3f</span>);    <span class="comment">// 调用有两个参数的浮点型加法</span></span><br><span class="line">        System.out.println(<span class="string">"add(int x, int y)的计算结果："</span> + one);</span><br><span class="line">        System.out.println(<span class="string">"add(int x, int y, int z)的计算结果："</span> + two);</span><br><span class="line">        System.out.println(<span class="string">"add(float x, float y)的计算结果："</span> + three);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        temp = x + y;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        temp = x + y + z;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">add</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">float</span> temp = <span class="number">0</span>;</span><br><span class="line">        temp = x + y;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add(int x, int y)的计算结果：30</span><br><span class="line">add(int x, int y, int z)的计算结果：60</span><br><span class="line">add(float x, float y)的计算结果：23.6</span><br></pre></td></tr></table></figure>
<p>从程序中可以发现，add()方法被重载了3次，而且每次重载时的参数类型或个数都有不同，所以在调用时，会根据参数的类型和个数自动进行区分。</p>
<p>另外，需要注意的是，<strong>方法的重载一定只是在参数上的类型或个数有所不同</strong>，下面的代码不是方法重载的运用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;      <span class="comment">// 返回floa型，但参数类型及个数一致</span></span><br><span class="line">    <span class="keyword">float</span> temp = <span class="number">0</span>;</span><br><span class="line">    temp = x + y;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;       <span class="comment">// 返回int型，但参数类型及个数一致</span></span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    temp = x + y;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的两个方法的接收参数类型和个数完全一样，但只是方法的返回值类型不同，上面的代码程序也是不可能通过编译通过的，所以不是方法重载。</p>
<h3 id="使用return结束一个方法"><a class="markdownIt-Anchor" href="#使用return结束一个方法"></a> 使用return结束一个方法</h3>
<p>在Java的方法定义中，可以使用return语句直接结束一个方法的执行，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1、调用fun()方法之前。"</span>);</span><br><span class="line">        fun(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"2、调用fun()方法之后。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"3、进入fun()方法。"</span>);</span><br><span class="line">        <span class="keyword">if</span> (x==<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;            <span class="comment">// 结束方法，返回被调用处</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"4、正常执行完fun()方法。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、调用fun()方法之前。</span><br><span class="line">3、进入fun()方法。</span><br><span class="line">2、调用fun()方法之后。</span><br></pre></td></tr></table></figure>
<p>从结果可以看出，虽然return中没有返回任何内容，但是一旦执行到了return语句之后，方法将不再执行，而返回到被调用处继续向下执行。</p>
<h3 id="方法的递归调用"><a class="markdownIt-Anchor" href="#方法的递归调用"></a> 方法的递归调用</h3>
<p>递归调用是一种特殊的调用形式，属于方法自身调用，如下图：</p>
<p><img src="//xiyouhujing.github.io/2019/04/04/Java笔记：方法的声明及使用/%E6%96%B9%E6%B3%95%E7%9A%84%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8.png" alt="方法的递归调用"></p>
<p>例如，要完成一个数字的累加操作，除了可以使用循环方式外，还可以使用递归调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"计算结果："</span> + sum(<span class="number">100</span>));   <span class="comment">// 调用操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> num + sum(num - <span class="number">1</span>);     <span class="comment">// 递归调用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：<code>计算结果：5050</code></p>
<p>值得注意的是，递归调用时必须有一个明确的结束条件，然后不断改变传入的数据，才能实现递归调用。</p>
<blockquote>
<p>递归调用在操作时如果处理不好，则有可能出现内存的溢出，所以对于这种方法调用形式使用时要谨慎。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：数组的定义及使用</title>
    <url>/2019/03/30/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<blockquote>
<p><strong>数组</strong>是一组相关数据的集合，一个数组实际上就是一连串的变量，数组按使用可以分为<strong>一维数组</strong>、<strong>二位数组</strong>和<strong>多维数组</strong>。</p>
</blockquote>
<a id="more"></a>
<h3 id="一维数组"><a class="markdownIt-Anchor" href="#一维数组"></a> 一维数组</h3>
<p>一维数组可以存放上千万个数据，并且这些数据的类型完全相同。要使用Java的数组，必须经过声明数组和分配内存给数组两个步骤，一维数组的声明与分配内存的语法结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据类型 数组名[] = null;      // 声明一维数组</span><br><span class="line">数组名 = new 数据类型[长度]；  // 分配内存给数组</span><br></pre></td></tr></table></figure>
<p>对于数组的声明方式也可以用下面的形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = null;     // 声明一维数组</span><br></pre></td></tr></table></figure>
<p>在数组的声明格式中，“数据类型”指的是声明数组元素的数据类型，常见的类型有整型、浮点型与字符型等。“数组名”是用来统一这组相同数据类型的元素的名称，其命名规则和变量相同。数组声明后实际上在内存中保存了此数组的名称（实际上是保存对一堆内存的引用地址），接下来便要在堆内存中配置数组所需的内存。其中，“长度”是告诉编辑器所声明的数组要存放多少个元素，而关键字new则是命令编译器根据括号里的长度在堆内存中开辟一块堆内存供该数组使用，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score[] = <span class="keyword">null</span>;         <span class="comment">// 声明整型数组score</span></span><br><span class="line">score = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];         <span class="comment">// 为整型数组score分配内存空间，其元素个数为3</span></span><br></pre></td></tr></table></figure>
<p>当声明一个整型数组score时，score可视为数组类型的变量，此时，这个变量并没有包含任何内容，编译器仅会在栈内存中分配一块内存给它，用来指向数组实体的地址的名称。声明之后，就要做堆内存分配的操作了，也就是上面第二行的语句，这一行会开辟3个可供保存整数的内存空间，并把此内存空间的参考地址赋给score变量。因为数组是引用数据类型，所以数组变量score所保存的并非是数组的实体，而是数组堆内存的参考地址。</p>
<blockquote>
<p><strong>堆栈内存的解释</strong></p>
<p>数组操作中，在栈内存中保存的永远是数组的名称，只开辟了栈内存空间的数组是永远无法使用的，必须有指向的堆内存才可以使用，要想开辟新的堆内存则必须使用关键字new，然后只是将此堆内存的使用权交给了对应的栈内存空间，而且一个堆内存空间可以同时被多个栈内存空间所指向。</p>
</blockquote>
<p>另外，可以在声明数组的同时分配内存空间，其格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据类型 数组名[] = new 数据类型[个数]</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];  <span class="comment">//声明一个元素个数为10的整数数组score，同时开辟一块内存空间供其使用</span></span><br></pre></td></tr></table></figure>
<h3 id="数组中元素的表示方法"><a class="markdownIt-Anchor" href="#数组中元素的表示方法"></a> 数组中元素的表示方法</h3>
<p>若要访问数组中的元素，可以利用索引来完成，Java的数组索引编号由0开始，以score[10]整型数组为例，score[0]代表第一个元素，而score[9]代表第10个元素，也就是最后一个元素。</p>
<p>数组的声明及输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = <span class="keyword">null</span>;                            <span class="comment">// 声明数组，但未开辟堆内存空间</span></span><br><span class="line">        score = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];                            <span class="comment">// 为数组开辟堆内存空间</span></span><br><span class="line">        System.out.println(<span class="string">"score[0] = "</span> + score[<span class="number">0</span>]);  <span class="comment">// 分别输出每个元素</span></span><br><span class="line">        System.out.println(<span class="string">"score[1] = "</span> + score[<span class="number">1</span>]);  <span class="comment">// 分别输出每个元素</span></span><br><span class="line">        System.out.println(<span class="string">"score[2] = "</span> + score[<span class="number">2</span>]);  <span class="comment">// 分别输出每个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x++)&#123;                   <span class="comment">// 使用循环依此输出数组中的全部内容</span></span><br><span class="line">            System.out.println(<span class="string">"score["</span>+x+<span class="string">"] = "</span> + score[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">score[0] = 0</span><br><span class="line">score[1] = 0</span><br><span class="line">score[2] = 0</span><br><span class="line">score[0] = 0</span><br><span class="line">score[1] = 0</span><br><span class="line">score[2] = 0</span><br></pre></td></tr></table></figure>
<p>从运行结果可以看出，对于数组的访问采用“数组名称[下标]”的方式，之前一共开辟了3个空间大小的数组，所以下标的取值为0~2，如果超出了这个下标，例如score[3]，则会出现如下错误：<code>java.lang.ArrayIndexOutOfBoundsException:3</code>。</p>
<p>此外，可以发现以上数组中的内容都是0，这是因为声明的是整型数组，而此时又没有为整型数组中的内容赋值，所以现在都是默认值，整型的默认值为0。下面的范例将为数组中的元素进行赋值并输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = <span class="keyword">null</span>;</span><br><span class="line">        score = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x++)&#123;</span><br><span class="line">            score[x] = x * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"score["</span> + x + <span class="string">"] = "</span> + score[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">score[0] = 1</span><br><span class="line">score[1] = 3</span><br><span class="line">score[2] = 5</span><br></pre></td></tr></table></figure>
<p>在Java中取得数组的长度（也就是数组元素的长度）可以利用“数组名称.length”的形式，会返回一个int型数据。例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(<span class="string">"数组长度为"</span> + score.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序的运行结果为：<code>数组长度为3</code></p>
<h3 id="数组的静态初始化"><a class="markdownIt-Anchor" href="#数组的静态初始化"></a> 数组的静态初始化</h3>
<p>数组的内容分为<strong>动态初始化</strong>和<strong>静态初始化</strong>两种，之前所讲的代码是采用先声明数组之后为数组中的每个内容赋值的方式完成的，所以属于数组的动态初始化，也可以通过数组静态初始化，在数组声明时就指定其具体内容，只要在数组的声明格式后面加上初值的赋值即可，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据类型 数组名[] = &#123;初值0，初值1，···，初值n&#125;</span><br></pre></td></tr></table></figure>
<p>在大括号内的初值会依此指定给数组的第1、···、n个元素。此外，在声明时，并不需要将数组元素的个数列出来，编译器根据所给出的初值个数来判断数组的长度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; score.length; x++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"score["</span> + x + <span class="string">"] = "</span> + score[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">score[0] = 91</span><br><span class="line">score[1] = 92</span><br><span class="line">score[2] = 93</span><br><span class="line">score[3] = 94</span><br><span class="line">score[4] = 95</span><br><span class="line">score[5] = 96</span><br></pre></td></tr></table></figure>
<h3 id="数组应用范例"><a class="markdownIt-Anchor" href="#数组应用范例"></a> 数组应用范例</h3>
<ol>
<li><strong>求出数组中的最大和最小值</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">67</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">75</span>, <span class="number">90</span>&#125;;      <span class="comment">// 静态初始化数组</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;                                          <span class="comment">// 定义变量保存最大值</span></span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">0</span>;                                          <span class="comment">// 定义变量保存最小值</span></span><br><span class="line">        max = min = score[<span class="number">0</span>];                                 <span class="comment">// 把第一个元素的内容赋值给max和min</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; score.length; x++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (score[x] &gt; max)&#123;                              <span class="comment">// 依此判断后续元素是否比max大</span></span><br><span class="line">                max = score[x];                               <span class="comment">// 如果大，则修改max内容</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (score[x] &lt; min)&#123;                              <span class="comment">// 依此判断后续的元素是否比min小</span></span><br><span class="line">                min = score[x];                               <span class="comment">// 如果小，则修改min内容</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"最高成绩："</span> + max);               <span class="comment">// 输出最大值</span></span><br><span class="line">        System.out.println(<span class="string">"最低成绩："</span> + min);               <span class="comment">// 输出最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最高成绩：100</span><br><span class="line">最低成绩：67</span><br></pre></td></tr></table></figure>
<p>本程序中，首先将数组的最大和最小值都当作数组中的第一个元素，然后用for循环依此和数组后面的元素比较，如果比当前的max值大，则将该值赋给max，如果比当前的min值小，则将该值赋给min，直到数组里的元素都比较完毕，max存储了数组中的最大值，min存储了数组里的最小值。</p>
<ol start="2">
<li><strong>对整型数组按照由小到大的顺序进行排列</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">67</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">75</span>, <span class="number">90</span>&#125;;   <span class="comment">// 声明数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; score.length; i++)&#123;            <span class="comment">// 循环判断</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; score.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (score[i] &lt; score[j])&#123;                  <span class="comment">// 交换位置</span></span><br><span class="line">                    <span class="keyword">int</span> temp = score[i];</span><br><span class="line">                    score[i] = score[j];</span><br><span class="line">                    score[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; score.length; i++)&#123;</span><br><span class="line">            System.out.println(score[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：<code>67	69	75	87	89	90	90	100</code>。</p>
<p>以上程序采用了冒泡算法进行排序。即把数组中的每个元素进行比较，如果第i个元素大于第i+1个元素，那么就要把两个数字进行交换，这样反复的比较就可以将一个数组按照由大到小的顺序进行排序。</p>
<ol start="3">
<li><strong>修改之前的代码，显示每次的排序结果</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">67</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">75</span>, <span class="number">90</span>&#125;;     <span class="comment">// 声明数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; score.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; score.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (score[i] &lt; score[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = score[i];</span><br><span class="line">                    score[i] = score[j];</span><br><span class="line">                    score[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">"第"</span>+i+<span class="string">"次排序的结果：\t"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; score.length; j++)&#123;          <span class="comment">// 循环输出</span></span><br><span class="line">                System.out.print(score[j] + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">""</span>);                         <span class="comment">// 换行</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">"最终的排序结果为：\t"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; score.length; i++)&#123;</span><br><span class="line">            System.out.print(score[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第1次排序的结果：	67	100	87	69	89	90	75	90	</span><br><span class="line">第2次排序的结果：	67	87	100	69	89	90	75	90	</span><br><span class="line">第3次排序的结果：	67	69	87	100	89	90	75	90	</span><br><span class="line">第4次排序的结果：	67	69	87	89	100	90	75	90	</span><br><span class="line">第5次排序的结果：	67	69	87	89	90	100	75	90	</span><br><span class="line">第6次排序的结果：	67	69	75	87	89	90	100	90	</span><br><span class="line">第7次排序的结果：	67	69	75	87	89	90	90	100	</span><br><span class="line">最终的排序结果为：	67	69	75	87	89	90	90	100</span><br></pre></td></tr></table></figure>
<h3 id="二维数组"><a class="markdownIt-Anchor" href="#二维数组"></a> 二维数组</h3>
<p>二维数组的声明方式和一维数组类似，内存的分配也要使用关键字new完成，其声明与分配内存的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据类型 数组名[][];</span><br><span class="line">数组名 = new 数据类型[][];</span><br></pre></td></tr></table></figure>
<p>与一维数组不同的是，二维数组在分配内存时，必须告诉编译器二维数组的行与列的个数，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score[][];           <span class="comment">// 声明整型数组score</span></span><br><span class="line">score = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];   <span class="comment">// 配置一块内存空间，供4行3列的整型数组score使用</span></span><br></pre></td></tr></table></figure>
<p>同样的，也可以利用较为简洁的声明和分配内存语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据类型 数组名[][] = new 数据类型[行的个数][列的个数]</span><br></pre></td></tr></table></figure>
<p>二维数组的定义及使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];         <span class="comment">// 声明并实例化二维数组</span></span><br><span class="line">        score[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">30</span>;</span><br><span class="line">        score[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">31</span>;</span><br><span class="line">        score[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">32</span>;</span><br><span class="line">        score[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">33</span>;</span><br><span class="line">        score[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; score.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; score[i].length; j++)&#123;</span><br><span class="line">                System.out.print(score[i][j] + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0	30	0	</span><br><span class="line">31	30	0	</span><br><span class="line">0	0	32	</span><br><span class="line">0	33	0</span><br></pre></td></tr></table></figure>
<p>可以看出，一维数组输出只需要使用一层循环，而二维数组全部输出则需要使用两层循环，同理，对于N维数组，则要使用N+1层循环。</p>
<p>二维数组也可以利用大括号进行静态初始化，只要在数组的声明格式后面再加上所赋的初值即可，格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数组类型 数组名[][] = &#123;</span><br><span class="line">    &#123;第0行初值&#125;，</span><br><span class="line">    &#123;第1行初值&#125;，</span><br><span class="line">    ···</span><br><span class="line">    &#123;第n行初值&#125;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>
<p>要特别注意的是，用户不必定义数组的长度，因此，在数组名后面的中括号中不必填入任何内容。下面是二维数组声明及赋初值的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态初始化一个二维数组，每行的数组元素个数都不一样</span></span><br><span class="line">        <span class="keyword">int</span> score[][] = &#123;&#123;<span class="number">67</span>, <span class="number">61</span>&#125;, &#123;<span class="number">78</span>, <span class="number">89</span>, <span class="number">83</span>&#125;, &#123;<span class="number">99</span>, <span class="number">100</span>, <span class="number">98</span>, <span class="number">66</span>, <span class="number">95</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; score.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; score[i].length; j++)&#123;</span><br><span class="line">                System.out.print(score[i][j] + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">67	61	</span><br><span class="line">78	89	83	</span><br><span class="line">99	100	98	66	95</span><br></pre></td></tr></table></figure>
<h3 id="多维数组"><a class="markdownIt-Anchor" href="#多维数组"></a> 多维数组</h3>
<p>想要提高数组的维数，只要在声明数组时将索引与中括号再加一组即可，即三维数组的声明为<code>int score[][][]</code>，而四维数组的声明为<code>int score[][][][]</code>···，依此类推。使用多维数组时，输入、输出的方式和一维、二维数组相同，但是每多一维，嵌套循环的层数就必须多一层，所以维数越高的数组其复杂度也就越高。例如下面是三维数组的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个三维数组，使用静态初始化的方式</span></span><br><span class="line">        <span class="keyword">int</span> score[][][] = &#123;&#123;&#123;<span class="number">5</span>, <span class="number">1</span>&#125;, &#123;<span class="number">6</span>, <span class="number">7</span>&#125;&#125;, &#123;&#123;<span class="number">9</span>, <span class="number">4</span>&#125;, &#123;<span class="number">8</span>, <span class="number">3</span>&#125;&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; score.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; score[i].length; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; score[i][j].length; k++)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"score["</span> + i + <span class="string">"]["</span> + j + <span class="string">"]["</span> + k +<span class="string">"]="</span> + score[i][j][k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">score[0][0][0]=5</span><br><span class="line">score[0][0][1]=1</span><br><span class="line">score[0][1][0]=6</span><br><span class="line">score[0][1][1]=7</span><br><span class="line">score[1][0][0]=9</span><br><span class="line">score[1][0][1]=4</span><br><span class="line">score[1][1][0]=8</span><br><span class="line">score[1][1][1]=3</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java开发实战经典习题3.7</title>
    <url>/2019/03/21/Java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%BB%8F%E5%85%B8%E4%B9%A0%E9%A2%983-7/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<blockquote>
<p>Java开发实战经典第三章习题：java基础程序设计。掌握java中数据类型的划分方法、掌握八种基本数据类型的使用方法、掌握数据类型的转换方式、掌握java中的运算位、掌握各个运算符和表达式的运用、掌握判断和循环语句的使用方法、掌握break及continue关键字的作用。</p>
</blockquote>
<a id="more"></a>
<h4 id="打印出1~10000范围中所有的水仙花数所谓水仙花数是指一个3位数其各位数字立方和等于该数本身-例如153就是一个水仙花数因为1531的三次方5的三次方3的三次方"><a class="markdownIt-Anchor" href="#打印出1~10000范围中所有的水仙花数所谓水仙花数是指一个3位数其各位数字立方和等于该数本身-例如153就是一个水仙花数因为1531的三次方5的三次方3的三次方"></a> 打印出1~10000范围中所有的“水仙花数”，所谓“水仙花数”是指一个3位数，其各位数字立方和等于该数本身。例如，153就是一个“水仙花数”，因为153=（1的三次方+5的三次方+3的三次方）。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">首先“水仙花数”是一个三位数，所以题目给的1~10000的范围是比较大的，可以缩小为100~999，另外需要明白这题需要用到循环结构，一次验证范围内的3位数是为“水仙花数”，我们可以采用while、do···while以及for循环中的任意一种，这里采用的是for循环。本题 一个难点是如何提取个十百位的数，我们可以采用取余算法（%）。然后用if语句判断该数是否为“水仙化数”，是就打印，不是就再执行for循环验证下一个数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> m = i % <span class="number">10</span>;            <span class="comment">// 取个位数</span></span><br><span class="line">            <span class="keyword">int</span> n = (i / <span class="number">10</span>) % <span class="number">10</span>;     <span class="comment">// 取十位数</span></span><br><span class="line">            <span class="keyword">int</span> h = i / <span class="number">100</span>;           <span class="comment">// 取百位数</span></span><br><span class="line">            <span class="keyword">if</span> (i == m * m * m + n * n * n + h * h * h)&#123;    <span class="comment">// 验证是否为水仙花数</span></span><br><span class="line">                System.out.println(i + <span class="string">"是水仙花数"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">153是水仙花数</span><br><span class="line">370是水仙花数</span><br><span class="line">371是水仙花数</span><br><span class="line">407是水仙花数</span><br></pre></td></tr></table></figure>
<h4 id="通过代码完成两个整数内容的交换"><a class="markdownIt-Anchor" href="#通过代码完成两个整数内容的交换"></a> 通过代码完成两个整数内容的交换</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"交换之前的内容："</span> + <span class="string">"a = "</span> + a + <span class="string">"，b = "</span> + b);</span><br><span class="line">        a = a + b;</span><br><span class="line">        b = a - b;</span><br><span class="line">        a = a - b;</span><br><span class="line">        System.out.println(<span class="string">"交换之后的内容："</span> + <span class="string">"a = "</span> + a + <span class="string">"，b = "</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">交换之前的内容：a = 10，b = 5</span><br><span class="line">交换之后的内容：a = 5，b = 10</span><br></pre></td></tr></table></figure>
<h4 id="给定3个数字求出这3个数字中的最大值并将最大值输出"><a class="markdownIt-Anchor" href="#给定3个数字求出这3个数字中的最大值并将最大值输出"></a> 给定3个数字，求出这3个数字中的最大值，并将最大值输出</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>, b = <span class="number">5</span>, c = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        max = a &gt; b ? (a &gt; c ? a : c) : (b &gt; c ? b : c);</span><br><span class="line">        System.out.println(<span class="string">"最大值为："</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最大值为：5</span><br></pre></td></tr></table></figure>
<h4 id="判断某数能否被3-5-7同时整除"><a class="markdownIt-Anchor" href="#判断某数能否被3-5-7同时整除"></a> 判断某数能否被3、5、7同时整除</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">105</span>;</span><br><span class="line">        <span class="keyword">if</span> (num%<span class="number">3</span>==<span class="number">0</span> &amp;&amp; num%<span class="number">5</span>==<span class="number">0</span> &amp;&amp; num%<span class="number">7</span>==<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(num + <span class="string">"能被3、5、7同时整除"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(num + <span class="string">"不能被3、5、7同时整除"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">105能被3、5、7同时整除</span><br></pre></td></tr></table></figure>
<h4 id="编写程序分别利用while循环-dowhile循环和for循环求出100~200的累加和"><a class="markdownIt-Anchor" href="#编写程序分别利用while循环-dowhile循环和for循环求出100~200的累加和"></a> 编写程序，分别利用while循环、do···while循环和for循环求出100~200的累加和。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">while循环求100~200的累加和</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_5_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">200</span>)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"100~200的累加和为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">do···while循环求100~200的累加和。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_5_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">while</span> (i &lt;= <span class="number">200</span>);</span><br><span class="line">        System.out.println(<span class="string">"100~200的累加和为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">for循环求100~200的累加和。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_5_3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"100~200的累加和为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="编写程序java程序求13-2333-43973-983993-1003的值"><a class="markdownIt-Anchor" href="#编写程序java程序求13-2333-43973-983993-1003的值"></a> 编写程序Java程序，求13-23+33-43+···+973-983+993-1003的值</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">13</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt;= <span class="number">1003</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                sum += x;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                sum -= x;</span><br><span class="line">            &#125;</span><br><span class="line">            x += <span class="number">10</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"3-23+33-43+···+973-983+993-1003 = "</span> + sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3-23+33-43+···+973-983+993-1003 = -500</span><br></pre></td></tr></table></figure>
<h4 id="编写一个程序实现两个数字的交换"><a class="markdownIt-Anchor" href="#编写一个程序实现两个数字的交换"></a> 编写一个程序，实现两个数字的交换。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这一题我理解为交换两位数的个位和十位。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3_7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">35</span>;</span><br><span class="line">        <span class="keyword">int</span> n = a % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> m = a / <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"交换后的数字为："</span> + (n*<span class="number">10</span>+m));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="编写一个程序求3个数中的最大值"><a class="markdownIt-Anchor" href="#编写一个程序求3个数中的最大值"></a> 编写一个程序求3个数中的最大值</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考第三题</span><br></pre></td></tr></table></figure>
<h4 id="编写一个程序实现1~100的累加"><a class="markdownIt-Anchor" href="#编写一个程序实现1~100的累加"></a> 编写一个程序，实现1~100的累加</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3_9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"1~100的累加和为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求1~1000之间可以同时被3-5-7整除的数字"><a class="markdownIt-Anchor" href="#求1~1000之间可以同时被3-5-7整除的数字"></a> 求1~1000之间可以同时被3、5、7整除的数字。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3_10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">3</span>==<span class="number">0</span> &amp;&amp; i%<span class="number">5</span>==<span class="number">0</span> &amp;&amp; i%<span class="number">7</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="编程求12320的值"><a class="markdownIt-Anchor" href="#编程求12320的值"></a> 编程求1!+2!+3!+···+20!的值。</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">此处需要注意，阶乘是很大的数，所以不能按常规设定阶乘pro和阶乘累加和sum为int型，范围可能不够大，所以设为long型数据。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3_11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> pro = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)&#123;</span><br><span class="line">            pro *= i;     <span class="comment">// 计算每项的阶乘</span></span><br><span class="line">            sum += pro;   <span class="comment">// 计算每项阶乘的累加和</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"1!+2!+3!+...+20! = "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1!+2!+3!+...+20! = 2561327494111820313</span><br></pre></td></tr></table></figure>
<h4 id="使用for循环打印由组成的三角形三角形每行的星数和行数相等"><a class="markdownIt-Anchor" href="#使用for循环打印由组成的三角形三角形每行的星数和行数相等"></a> 使用for循环打印由*组成的三角形，三角形每行的星数和行数相等</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3_12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">4</span>-i; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);      <span class="comment">// 注意print为不换行输出</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">"* "</span>);     <span class="comment">// print不换行输出，注意星号后面还需要打印一个空格，不然三角形不对称</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"  "</span>);       <span class="comment">// println换行输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行的结果如图：</p>
<p><img src="//xiyouhujing.github.io/2019/03/21/Java开发实战经典习题3-7/%E4%B8%89%E8%A7%92%E5%BD%A2.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java练习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：选择和循环语句</title>
    <url>/2019/03/18/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%80%89%E6%8B%A9%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>一般来说程序的结构可以分为<strong>顺序结构</strong>、<strong>选择结构</strong>以及<strong>循环结构</strong>三种，这三种结构只有一个共同点，就是它们只有一个入口，也只有一个出口，这些单一的入、出口可以让程序易读、好维护，也可以减少调试时间。</p>
<a id="more"></a>
<h2 id="程序的结构"><a class="markdownIt-Anchor" href="#程序的结构"></a> 程序的结构</h2>
<h3 id="顺序结构"><a class="markdownIt-Anchor" href="#顺序结构"></a> 顺序结构</h3>
<p>顺序结构下的程序至上而下的逐条执行，一条语句执行完之后继续执行下一条语句，一直到程序的末尾，其结构如下图所示：</p>
<p><img src="//xiyouhujing.github.io/2019/03/18/Java笔记：选择和循环语句/%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt=""></p>
<h3 id="选择结构"><a class="markdownIt-Anchor" href="#选择结构"></a> 选择结构</h3>
<p>选择结构的流程图如下，这种结构可以依据判断条件的结构来决定要执行的语句，当判断条件的值为真时，就运行语句1；当判断的条件为假，则执行语句2。不论执行哪一句，最后都会回到语句3继续执行。选择结构的流程图如下：</p>
<p><img src="//xiyouhujing.github.io/2019/03/18/Java笔记：选择和循环语句/%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="程序的选择结构流程图"></p>
<p>验证选择结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"======比较开始====="</span>);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y)&#123;</span><br><span class="line">            System.out.println(<span class="string">"x比y大！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; y)&#123;</span><br><span class="line">            System.out.println(<span class="string">"x比y小！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"=====比较完成====="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">======比较开始=====</span><br><span class="line">x比y小！</span><br><span class="line">=====比较完成=====</span><br></pre></td></tr></table></figure>
<p>选择结构包括if、if···else及switch语句。</p>
<h4 id="if语句"><a class="markdownIt-Anchor" href="#if语句"></a> if语句</h4>
<p>要根据判断的结果来执行不同的语句时，使用if语句是一个很好的选择，它会准确地判断条件成立与否，再决定是否要执行后面的语句。if语句的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (判断条件) &#123;</span><br><span class="line">    语句1;</span><br><span class="line">    ···</span><br><span class="line">    语句2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当判断条件的值不满足时（true），就会逐一执行大括号里面所有的语句，否则执行大括号外的语句。</p>
<h4 id="ifelse语句"><a class="markdownIt-Anchor" href="#ifelse语句"></a> if···else语句</h4>
<p>当程序中存在含有分支的判断语句时，就可以用if···else语句处理，当判断条件成立时，即执行if语句主题；判断条件不成立时，则会执行else后面的语句主题。if···else语句的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (判断条件) &#123;</span><br><span class="line">    语句主体1;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    语句主体2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如，通过if···else语句判断一个数字是奇数还是偶数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"x是基数！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"x是偶数！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="三目运算符"><a class="markdownIt-Anchor" href="#三目运算符"></a> 三目运算符</h4>
<p>三目运算符可以等价于使用if···else进行变量赋值的语句。如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">三目运算符</th>
<th style="text-align:center">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">?:</td>
<td style="text-align:center">根据条件的成立与否来决定结果为“：”前或者“：”后的表达式</td>
</tr>
</tbody>
</table>
<p>三目运算符的使用格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量 = 条件判断?表达式1:表达式2</span><br></pre></td></tr></table></figure>
<p>该语句的意思是，当条件成立时执行表达式1，否则执行表达式2，通常会将这两个表达式之一的运算结果指定给某个变量，用if···else表示为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (条件判断)&#123;</span><br><span class="line">    变量x = 表达式1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    变量x = 表达式2；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如，使用三目运算符求出两个数字中的最大值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">        max = x &gt; y ? x:y;</span><br><span class="line">        System.out.println(<span class="string">"最大值为："</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ifelse-ifelse语句"><a class="markdownIt-Anchor" href="#ifelse-ifelse语句"></a> if···else if···else语句</h4>
<p>如果需要在if···else中判断多个条件时，就需要if···else if···else语句了，其格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (条件判断1) &#123;</span><br><span class="line">    语句主体1;</span><br><span class="line">&#125;else if (条件判断2) &#123;</span><br><span class="line">    语句主体2;</span><br><span class="line">&#125;</span><br><span class="line">···     // 多个else if()语句</span><br><span class="line">else&#123;</span><br><span class="line">    语句主体3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoreIfElseDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (x ==<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"x的值是1！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"x的值是2！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">3</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"x的值是3！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"x的值不是1、2、3中的一个！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="switch语句"><a class="markdownIt-Anchor" href="#switch语句"></a> switch语句</h4>
<p>switch语句可以将多选一的情况简化，使程序简洁易懂，使用嵌套if···else语句最常发生的状况就是容易将if与else配对混淆，从而造成阅读及运行上的错误，而使用switch语句则可以避免这种错误发生，switch语句的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch (表达式) &#123;</span><br><span class="line">    case 选择值1:	语句主体1;</span><br><span class="line">                   break；</span><br><span class="line">    case 选择值2:	语句主体2：</span><br><span class="line">                   break;</span><br><span class="line">    ……</span><br><span class="line">    case 选择值n:	语句主体n;</span><br><span class="line">                   break;</span><br><span class="line">    default:       语句主体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>特别注意的是，在switch语句中选择值只能是字符或常量，在JDK 1.5之后，switch也支持枚举类的判断。</p>
<p>switch语句执行的流程如下：</p>
<p>（1） switch语句先计算括号内的表达式结果，结果是数字、字符或者枚举。</p>
<p>（2）根据表达式的值检测是否符合case后面的选择值，若是所有case的选择值皆不符合，则执行default所包含的语句，执行完毕即离开switch语句。</p>
<p>（3）如果某个case的选择值符合表达式的结果，就会执行该case所包含的语句，一直遇到break语句后才离开switch语句</p>
<p>（4）如果没有在case语句结尾处加上break语句，则会一直执行到switch语句的尾端才离开switch语句。</p>
<p>（5）若是没有定义default执行语句，则什么都不会执行，直接退出switch语句。</p>
<p>根据以上描述，绘制如下的switch语句的流程图：</p>
<p><img src="//xiyouhujing.github.io/2019/03/18/Java笔记：选择和循环语句/switch%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="switch语句的流程图"></p>
<p>以下程序验证了switch语句的作用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">char</span> oper = <span class="string">'+'</span>;</span><br><span class="line">        <span class="keyword">switch</span> (oper)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:&#123;</span><br><span class="line">                System.out.println(<span class="string">"x + y ="</span> + (x + y));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:&#123;</span><br><span class="line">                System.out.println(<span class="string">"x - y = "</span> + (x - y));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:&#123;</span><br><span class="line">                System.out.println(<span class="string">"x * y = "</span> + (x * y));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:&#123;</span><br><span class="line">                System.out.println(<span class="string">"x / y = "</span> + (x / y));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:&#123;</span><br><span class="line">                System.out.println(<span class="string">"未知操作！"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序的运行结果为：<code>x + y = 9</code></p>
<blockquote>
<p><strong>break语句的作用</strong></p>
<p>从以上程序可以发现，在每一个case语句后面都加上了break语句，如果不加，则switch语句会从第一个满足条件的case开始依此执行操作，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo02</span> </span>&#123;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;         <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">&gt;         <span class="keyword">int</span> y = <span class="number">6</span>;</span><br><span class="line">&gt;         <span class="keyword">char</span> oper = <span class="string">'+'</span>;</span><br><span class="line">&gt;         <span class="keyword">switch</span> (oper)&#123;</span><br><span class="line">&gt;             <span class="keyword">case</span> <span class="string">'+'</span>:&#123;</span><br><span class="line">&gt;                 System.out.println(<span class="string">"x + y ="</span> + (x + y));</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             <span class="keyword">case</span> <span class="string">'-'</span>:&#123;</span><br><span class="line">&gt;                 System.out.println(<span class="string">"x - y ="</span> + (x - y));</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             <span class="keyword">case</span> <span class="string">'*'</span>:&#123;</span><br><span class="line">&gt;                 System.out.println(<span class="string">"x * y ="</span> + (x * y));</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             <span class="keyword">case</span> <span class="string">'/'</span>:&#123;</span><br><span class="line">&gt;                 System.out.println(<span class="string">"x / y ="</span> + (x / y));</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             <span class="keyword">default</span>:&#123;</span><br><span class="line">&gt;                 System.out.println(<span class="string">"未知操作！"</span>);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>最后得到的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; x + y =9</span><br><span class="line">&gt; x - y =-3</span><br><span class="line">&gt; x * y =18</span><br><span class="line">&gt; x / y =0</span><br><span class="line">&gt; 未知操作！</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>从运行的结果可以发现，程序在满足第一个条件后，由于没有设置break语句，所以从第一个满足条件的语句case开始依此向后继续执行，知道最后一个条件执行完毕。</p>
</blockquote>
<h3 id="循环结构"><a class="markdownIt-Anchor" href="#循环结构"></a> 循环结构</h3>
<h4 id="while循环"><a class="markdownIt-Anchor" href="#while循环"></a> while循环</h4>
<p>while是循环语句，也是判断语句，当事前不知道循环执行多少次时，就要用while循环，其格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while (循环条件判断)&#123;</span><br><span class="line">    语句1;</span><br><span class="line">    语句2;</span><br><span class="line">    ···</span><br><span class="line">    语句n;</span><br><span class="line">    循环条件改变；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在while循环语句中，只有一个判断条件，当判断条件为真时，循环就会执行一次，再重复测试判断条件，执行循环主体，知道判断条件为假，才会跳出while循环。下面是while循环的流程及流程图：</p>
<p>（1）第一次进入while循环前，必须先为循环控制变量（或表达式）赋起始值。</p>
<p>（2）根据判断条件的内容决定是否要继续执行循环，如果条件判断值为真（true），继续执行循环主体，若条件判断值为假（false），则跳出循环执行其他语句。</p>
<p>（3）执行完循环主体内的语句后，重新为循环控制变量（或表达式）赋值（增加或者减少），由于while循环不会自动更改循环控制变量（或表达式）的内容，所以while循环中为循环控制变量赋值的工作要自己来做，完成后再回到步骤（2）重新判断是否继续执行循环。</p>
<p><img src="//xiyouhujing.github.io/2019/03/18/Java笔记：选择和循环语句/while%E5%BE%AA%E7%8E%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="while循环流程图"></p>
<p>使用while循环进行累加操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"1--&gt;10累加结果为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：<code>1--&gt;10累加结果为：55</code></p>
<p>如果程序中没有修改循环条件（x++），那么程序将出现“死循环”的情况。</p>
<h4 id="dowhile循环"><a class="markdownIt-Anchor" href="#dowhile循环"></a> do···while循环</h4>
<p>do···while循环也是用于未知循环执行次数的情况，而while循环及do···while循环最大的不同就是进入while循环前，while语句会先测试判断条件的真假，再决定是否执行循环主体，而do···while循环则是每次都是先执行一次循环主体，然后再测试判断条件的真假，<strong>所以无论循环成立的条件是什么，使用do···while循环时，至少都会执行一次循环主体</strong>。do···while循环的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">    语句1;</span><br><span class="line">    语句2;</span><br><span class="line">    ···</span><br><span class="line">    语句n;</span><br><span class="line">    循环条件改变;</span><br><span class="line">&#125;while(循环条件判断)</span><br></pre></td></tr></table></figure>
<p>下面描述的do···while循环的流程及流程图：</p>
<p>（1）进入do···while循环前，要先为循环控制变量（或表达式）赋起始值。</p>
<p>（2）直接执行循环主体，循环主体执行完毕，才开始根据判断条件的内容决定是否继续执行循环，条件为真（true）时，继续执行循环主体；条件为假（false）时，则跳出循环，执行其他语句。</p>
<p>（3）执行完循环主体内的语句后，重新为循环控制变量（或表达式）赋值（增加或减少），由于do···while循环和while循环一样，不会自动更改循环控制变量（或表达式）的内容，所以在do···while循环中赋值循环控制变量的工作要由自己来做，然后再回到步骤（2）重新判断是否继续执行循环。</p>
<p><img src="//xiyouhujing.github.io/2019/03/18/Java笔记：选择和循环语句/do%C2%B7%C2%B7%C2%B7while%E5%BE%AA%E7%8E%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="do···while循环流程图"></p>
<p>使用while循环进行累加操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;<span class="keyword">while</span> (x &lt;= <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"1--&gt;10累加结果为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序的运行结果为：<code>1--&gt;10累加结果为：55</code></p>
<p>从程序的运行结果来看，while和do···while的结果是一样的，但是do···while与while循环不同的是do···while操作中就算条件不满足，也至少会执行一次，而while如果条件不满足，则一次也不会被执行。</p>
<h4 id="for循环"><a class="markdownIt-Anchor" href="#for循环"></a> for循环</h4>
<p>对于while和do···while两种循环来讲，操作时并不一定要明确地知道循环次数，而如果开发者已经明确地知道了循环次数，那么就可以使用另一种循环语句——for循环。for循环的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(赋值初值；判断条件；赋值增减量)&#123;</span><br><span class="line">    语句1;</span><br><span class="line">    ···</span><br><span class="line">    语句n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是for循环的流程和流程图：</p>
<p>（1）第一次进入for循环时，要为循环控制变量赋起始值。</p>
<p>（2）根据判断条件的内容检查是否继续执行循环，当判断条件为真（true）时，继续执行循环主体内的语句；判断条件为假（false）时，则会跳出循环，执行其他语句。</p>
<p>（3）执行完循环主体内的语句后，循环控制变量会根据增减量的要求更改循环控制变量的值，然后再回到步骤（2）重新判断是否继续执行循环。</p>
<p><img src="//xiyouhujing.github.io/2019/03/18/Java笔记：选择和循环语句/for%E5%BE%AA%E7%8E%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="for循环流程图"></p>
<p>使用for循环进行累加操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= <span class="number">10</span>; x++)&#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"1--&gt;10累加结果为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序的运行结果依旧如下：<code>1--&gt;10累加结果为：55</code></p>
<h4 id="循环的嵌套"><a class="markdownIt-Anchor" href="#循环的嵌套"></a> 循环的嵌套</h4>
<p>多个循环语句是可以嵌套操作的，例如下面要打印一个九九乘法表：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForNestedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++)&#123;</span><br><span class="line">                System.out.println(i + <span class="string">"*"</span> + j + <span class="string">"="</span> + (i * j) + <span class="string">"\t"</span>);   <span class="comment">// “\t”制表</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"\n"</span>);      <span class="comment">// 换行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序说明：</p>
<p>（1）i为外层循环的循环控制变量，j为内层循环的循环控制变量。</p>
<p>（2）当i为1时，符合外层for循环的判断条件（i&lt;9），进入另一个内层for循环体，由于是第一次进入内层循环，所以j的初值为1，符合内层for循环的判断条件（j&lt;=i）进入循环主体，输入i*j的值（1*1=1），如果最后j的值任符合内层for循环的判断条件（j&lt;=i），则再次执行计算与输出的工作，直到j的值大于i时，离开内层for循环，回到外层循环。此时，i会加1成为2，符合外层for循环的判断条件，继续执行内层for循环主体，直到i的值大于9时离开嵌套循环。</p>
<h2 id="循环的中断"><a class="markdownIt-Anchor" href="#循环的中断"></a> 循环的中断</h2>
<h3 id="break语句"><a class="markdownIt-Anchor" href="#break语句"></a> break语句</h3>
<p>break语句可以强迫程序中断循环，当程序执行到break语句时，即会离开循环，继续执行循环外的下一个语句，如果break语句出现在嵌套循环中的内层循环，则break语句只会跳出当前层的循环。下面用for循环为例，描述break语句的格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (初值赋值；判断条件；设增减量)&#123;</span><br><span class="line">    语句1；</span><br><span class="line">    语句2；</span><br><span class="line">    	···</span><br><span class="line">    	break；</span><br><span class="line">    ···      // 若执行break语句，则此块的语句将不会被执行</span><br><span class="line">    语句n；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BreakDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"i ="</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i =0</span><br><span class="line">i =1</span><br><span class="line">i =2</span><br></pre></td></tr></table></figure>
<p>从结果可以看出，当i=3时，判断语句满足，则执行了break语句跳出了整个循环，因此没有输出i=3。</p>
<h3 id="continue语句"><a class="markdownIt-Anchor" href="#continue语句"></a> continue语句</h3>
<p>continue语句可以强迫程序跳到循环的起始处，当程序运行到continue语句时，会停止运行剩余的循环主体，而是回到循环的开始处继续运行。下面以for循环为例，描述continue语句的用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (初值赋值；判断条件；设增减量)&#123;</span><br><span class="line">    语句1；</span><br><span class="line">    语句2；</span><br><span class="line">    ···</span><br><span class="line">    continue</span><br><span class="line">    	···   // 若执行continue语句，则此处将不会被执行</span><br><span class="line">    语句n；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContinueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"i = "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i = 0</span><br><span class="line">i = 1</span><br><span class="line">i = 2</span><br><span class="line">i = 4</span><br><span class="line">i = 5</span><br><span class="line">i = 6</span><br><span class="line">i = 7</span><br><span class="line">i = 8</span><br><span class="line">i = 9</span><br></pre></td></tr></table></figure>
<p>从结果中可以发现，当i的值为3时，程序并没有输出，而是退回了循环判断处继续向下执行，所以continue只是中断了一次的循环操作。</p>
<blockquote>
<p>另外，在循环语句中定义的变量属于局部变量，所谓的局部变量是指此变量只能在循环语句中使用，而在循环语句之外则无法使用。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：Java中的运算符</title>
    <url>/2019/03/16/Java%E7%AC%94%E8%AE%B0%EF%BC%9AJava%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p><strong>Java中的运算符</strong></p>
<blockquote>
<p>表达式是Java的一种语句，它由<strong>操作数</strong>和<strong>操作符</strong>组成，操作数可以是常量、变量，也可以是方法，而运算符就是数学中的运算符号，如“+”、“-”、“*”、“/”等，在表达式（z+100）中，z和100都是操作数，“+”就是运算符。Java提供了很多运算符，这些运算符除了做一般的数学运算之外，还可以做逻辑运算、位运算等。根据所使用类的不同，运算符可以分为<strong>赋值运算符</strong>、<strong>算术运算符</strong>、<strong>逻辑运算符</strong>、<strong>条件运算符</strong>以及<strong>括号运算符</strong>。</p>
</blockquote>
<a id="more"></a>
<h3 id="赋值运算符号"><a class="markdownIt-Anchor" href="#赋值运算符号"></a> 赋值运算符号</h3>
<p>想为各种不同数据类型的变量赋值时，就需要使用赋值运算符（=），等号（=）在Java中不是“等于”的意思，二十“赋值”的意思，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">22</span>;</span><br><span class="line">        System.out.println(<span class="string">"第一次输出：num = "</span> + num);</span><br><span class="line">        num = num - <span class="number">3</span>;</span><br><span class="line">        System.out.println(<span class="string">"第二次输出：num = "</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第五行中，把num-3的值赋给了num，所以程序运行的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一次输出：num = 22</span><br><span class="line">第二次输出：num = 19</span><br></pre></td></tr></table></figure>
<p>当然，也可以将等号后面的值赋给其他变量，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = num1 + num2;   <span class="comment">// num1与num2相加之后的值再赋给变量sum存放</span></span><br></pre></td></tr></table></figure>
<h3 id="一元运算符"><a class="markdownIt-Anchor" href="#一元运算符"></a> 一元运算符</h3>
<p>对于大部分表达式而言，运算符的前后都有操作数，但是一元运算符比较特别，它只需要一个操作数。下表列出了一元运算符的成员：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">一元运算符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">+</td>
<td style="text-align:center">正号</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">-</td>
<td style="text-align:center">负号</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">!</td>
<td style="text-align:center">NOT，否</td>
</tr>
</tbody>
</table>
<p>下面程序演示了3种一元运算符的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">false</span>;                                 <span class="comment">// 定义boolean型数据</span></span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">10</span>;                                        <span class="comment">// 定义一个正数</span></span><br><span class="line">        <span class="keyword">int</span> y = -<span class="number">30</span>;                                       <span class="comment">// 定义一个负数</span></span><br><span class="line">        System.out.println(<span class="string">"b = "</span> + b + <span class="string">", !b = "</span> + !b);   <span class="comment">// 取反</span></span><br><span class="line">        System.out.println(<span class="string">"x = "</span> + x + <span class="string">", -x = "</span> + -x);   <span class="comment">// 使用负号</span></span><br><span class="line">        System.out.println(<span class="string">"y = "</span> + y + <span class="string">", +y = "</span> + +y);   <span class="comment">// 使用正号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b = false, !b = true</span><br><span class="line">x = 10, -x = -10</span><br><span class="line">y = -30, +y = -30</span><br></pre></td></tr></table></figure>
<h3 id="算术运算符"><a class="markdownIt-Anchor" href="#算术运算符"></a> 算术运算符</h3>
<p>常用的算术运算符如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">算术运算符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">+</td>
<td style="text-align:center">加法</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">-</td>
<td style="text-align:center">减法</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">*</td>
<td style="text-align:center">乘法</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">/</td>
<td style="text-align:center">除法</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">%</td>
<td style="text-align:center">取模（取余数）</td>
</tr>
</tbody>
</table>
<p>程序中的运用如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">3</span>;</span><br><span class="line">        System.out.println(i + <span class="string">"+"</span> + j + <span class="string">"="</span> + (i + j));   <span class="comment">// 加法操作</span></span><br><span class="line">        System.out.println(i + <span class="string">"-"</span> + j + <span class="string">"="</span> + (i - j));   <span class="comment">// 减法操作</span></span><br><span class="line">        System.out.println(i + <span class="string">"*"</span> + j + <span class="string">"="</span> + (i * j));   <span class="comment">// 乘法操作</span></span><br><span class="line">        System.out.println(i + <span class="string">"/"</span> + j + <span class="string">"="</span> + (i / j));   <span class="comment">// 除法操作</span></span><br><span class="line">        System.out.println(i + <span class="string">"%"</span> + j + <span class="string">"="</span> + (i % j));   <span class="comment">// 取模操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10+3=13</span><br><span class="line">10-3=7</span><br><span class="line">10*3=30</span><br><span class="line">10/3=3</span><br><span class="line">10%3=1</span><br></pre></td></tr></table></figure>
<h3 id="关系运算符"><a class="markdownIt-Anchor" href="#关系运算符"></a> 关系运算符</h3>
<p>Java中经常会在if语句中使用关系运算符，具体格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (布尔表达式)&#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果括号中的布尔表达式成立，就会执行{}中的语句；若是布尔表达式不成立了，则语句不会执行。常用的关系运算符如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">关系运算符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于等于</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">小于等于</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">==</td>
<td style="text-align:center">等于</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">!=</td>
<td style="text-align:center">不等于</td>
</tr>
</tbody>
</table>
<p>需要注意的是，赋值运算符为等号（=），为了避免混淆，当使用关系运算符“等于”时，必须使用两个等号（==）表示。关系运算符在if语句中的使用如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">5</span> &gt; <span class="number">2</span>)&#123;                                       <span class="comment">// 判断5是否大于2</span></span><br><span class="line">            System.out.println(<span class="string">"条件成立：5大于2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>)&#123;                                        <span class="comment">// 判断是否为真</span></span><br><span class="line">            System.out.println(<span class="string">"直接写的true"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">3</span> + <span class="number">6</span>) == (<span class="number">3</span> - <span class="number">6</span>)) &#123;                         <span class="comment">// 判断计算结果内容是否相等</span></span><br><span class="line">            System.out.println(<span class="string">"这是不可能成立的！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">条件成立：5大于2</span><br><span class="line">直接写的true</span><br></pre></td></tr></table></figure>
<p>可以看到程序中最后一个if语句内的内容没有执行，因为if语句中的条件满足了，才会执行if中的内容，否则不执行。另外如果if语句之中只有一条语句，那么可以不用写“{}”，但是不建议这么写。</p>
<h3 id="自增与自减运算符"><a class="markdownIt-Anchor" href="#自增与自减运算符"></a> 自增与自减运算符</h3>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">自增与自减运算符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">++</td>
<td style="text-align:center">自增，变量值加1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">–</td>
<td style="text-align:center">自减，变量值减1</td>
</tr>
</tbody>
</table>
<p>用自增与自减运算符可以使程序更加简洁欸，例如，声明一个int类型的变量a，在程序运行中想让它加1，语句如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = a+<span class="number">1</span>;   <span class="comment">// a加1后再赋值给a</span></span><br></pre></td></tr></table></figure>
<p>将a的值加1后再赋给a存放，也可以利用自增运算符“++”写出语义相同但是语句更简洁的语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a++;   <span class="comment">// a加1后再赋值给a存放，语句更简洁</span></span><br></pre></td></tr></table></figure>
<p>在程序中还可以看到另一种自增运算符“<ins>”的用法，就是将自增运算符“</ins>”写在变量的前面，如<ins>a，这就和a</ins>所表示的意义完全不一样。a<ins>会先执行整个语句后再将a的值加1，而</ins>b则先把b的值加1后，再执行整个语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>, b = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">6</span>, y = <span class="number">6</span>;</span><br><span class="line">        System.out.println(<span class="string">"a = "</span> + a);                            <span class="comment">// 输出变量a的值</span></span><br><span class="line">        System.out.println(<span class="string">"\t a++ = "</span> + (a++) + <span class="string">", a = "</span> + a);    <span class="comment">// 先执行后自增</span></span><br><span class="line">        System.out.println(<span class="string">"b = "</span> + b);                            <span class="comment">// 输出变量b的值</span></span><br><span class="line">        System.out.println(<span class="string">"\t ++b = "</span> + (++b) + <span class="string">", b = "</span> + b);    <span class="comment">// 先自增后执行</span></span><br><span class="line">        System.out.println(<span class="string">"x = "</span> + x);                            <span class="comment">// 输出变量x的值</span></span><br><span class="line">        System.out.println(<span class="string">"\t x-- = "</span> + (x--) + <span class="string">", x = "</span> + x);    <span class="comment">// 先执行后自减</span></span><br><span class="line">        System.out.println(<span class="string">"y = "</span> + y);                            <span class="comment">// 输出变量y的值</span></span><br><span class="line">        System.out.println(<span class="string">"\t --y = "</span> + (--y) + <span class="string">", y = "</span> + y);    <span class="comment">// 先自减后执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = 3</span><br><span class="line">	 a++ = 3, a = 4</span><br><span class="line">b = 3</span><br><span class="line">	 ++b = 4, b = 4</span><br><span class="line">x = 6</span><br><span class="line">	 x-- = 6, x = 5</span><br><span class="line">y = 6</span><br><span class="line">	 --y = 5, y = 5</span><br></pre></td></tr></table></figure>
<h3 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符"></a> 逻辑运算符</h3>
<p>使用逻辑运算符可以连接多个逻辑运算，常用的逻辑运算符如下表：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>逻辑运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>&amp;</td>
<td>AND，与</td>
</tr>
<tr>
<td>2</td>
<td>&amp;&amp;</td>
<td>短路与</td>
</tr>
<tr>
<td>3</td>
<td>|</td>
<td>OR，或</td>
</tr>
<tr>
<td>4</td>
<td>||</td>
<td>短路或</td>
</tr>
</tbody>
</table>
<p>当使用逻辑运算符“&amp;&amp;”时，运算符前后的两个操作数的返回值皆为真，运算的结果才会为真；使用逻辑运算“||”时，运算符前后的两个操作数的返回值只要有一个为真，运算结果就为真。并存在以下规律：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> a = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(<span class="string">"a || b = "</span> + (a || b));</span><br><span class="line">        System.out.println(<span class="string">"a | b = "</span> + (a | b));</span><br><span class="line">        System.out.println(<span class="string">"a &amp;&amp; b = "</span> + (a &amp;&amp; b));</span><br><span class="line">        System.out.println(<span class="string">"a &amp; b = "</span> + (a &amp; b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a || b = true</span><br><span class="line">a | b = true</span><br><span class="line">a &amp;&amp; b = false</span><br><span class="line">a &amp; b = false</span><br></pre></td></tr></table></figure>
<p>根据对逻辑操作理解，可以总结以下规律：</p>
<ul>
<li>对于与操作来说，如果第一个条件为假，后面的条件不管是真是假，最终的结果都是假。</li>
<li>对于或操作来说，如果第一个条件为真，后面的条件不管是真是假，最终的结果都是真。</li>
</ul>
<p>也就是说，对于与和或来说，最先满足的条件就是一个关键性的条件，所以在Java中设置了短路与和短路或，对于短路与和与、短路或和或有以下区别：</p>
<ul>
<li>对于与来说，要求所有的条件都判断，而如果使用短路与，第一个条件又为false，则后面的条件不需要再判断。</li>
<li>对于或来说，要求所有的条件都判断，而如果使用短路或，第一个条件又为true，则后面的条件不需要再判断。</li>
</ul>
<p>下面通过三段代码来理解以上两点：</p>
<ul>
<li>测试代码（一）：观察被除数为0的情况</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">10</span> / <span class="number">0</span>;                    </span><br><span class="line">        System.out.println(<span class="string">"x = "</span> + x);   <span class="comment">// 错误，被除数为0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该段程序运行之后会出现以下错误，即错误的根本原因在于除数为0：</p>
<p><strong>Exception in thread “main” java.lang.ArithmeticException: / by zero</strong></p>
<ul>
<li>测试代码（二）：验证“&amp;”的作用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">10</span> != <span class="number">10</span> &amp; <span class="number">10</span> /<span class="number">0</span> == <span class="number">0</span>) &#123;             <span class="comment">// 非短路与</span></span><br><span class="line">            System.out.println(<span class="string">"条件满足"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行后，又出现了下面的错误提示：</p>
<p><strong>Exception in thread “main” java.lang.ArithmeticException: / by zero</strong></p>
<p>造成以上错误的根本原因在于“与”操作要把所有的条件进行判断，所以在计算10/0时就出现了错误。</p>
<ul>
<li>测试代码（三）：验证“&amp;&amp;”的作用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">10</span> != <span class="number">10</span> &amp;&amp; <span class="number">10</span>/<span class="number">0</span> == <span class="number">0</span>) &#123;               <span class="comment">// 短路与</span></span><br><span class="line">            System.out.println(<span class="string">"条件满足"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该程序运行后，没有出现上面的错误，因为短路与判断第一个条件就为false，那么之后的条件就不用判断了，这就是短路与的作用。短路或和或也是同样的原理。</p>
<h3 id="括号运算符"><a class="markdownIt-Anchor" href="#括号运算符"></a> 括号运算符</h3>
<p>括号“()”也是Java的运算符，用于提高括号中表达式的优先级。</p>
<h3 id="位运算符"><a class="markdownIt-Anchor" href="#位运算符"></a> 位运算符</h3>
<p>Java中支持位运算操作，位运算操作是指进行二进制位的运算，在Java中支持的位运算符如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">位运算符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">按位与</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">|</td>
<td style="text-align:center">按位或</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">^</td>
<td style="text-align:center">异或（相同为0，不同为1）</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">~</td>
<td style="text-align:center">取反</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">&lt;&lt;</td>
<td style="text-align:center">左移位</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">&gt;&gt;</td>
<td style="text-align:center">右移位</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">&gt;&gt;&gt;</td>
<td style="text-align:center">无符号右移位</td>
</tr>
</tbody>
</table>
<p>在Java中所有的数据都是以二进制的形式进行运算的，每一位二进制进行与、或、异或操作的结果如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">二进制数1</th>
<th style="text-align:center">二进制数2</th>
<th style="text-align:center">与操作（&amp;）</th>
<th style="text-align:center">或操作（|）</th>
<th style="text-align:center">异或操作（^）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<p>下面通过一段代码来观察位运算符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;                  <span class="comment">// 3的二进制数据：00000000 00000000 00000000 00000011</span></span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">6</span>;                  <span class="comment">// 6的二进制数据：00000000 00000000 00000000 00000110</span></span><br><span class="line">        System.out.println(x &amp; y);  <span class="comment">// 与操作的结果： 00000000 00000000 00000000 00000010</span></span><br><span class="line">        System.out.println(x | y);  <span class="comment">// 或操作的结果： 00000000 00000000 00000000 00000111</span></span><br><span class="line">        System.out.println(x ^ y);  <span class="comment">// 异或操作结果： 00000000 00000000 00000000 00000101</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">7</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p>在计算机的数据表示中只定义了整数的表现形式，并没有定义负数的表现形式，所以，负数一般用<strong>补码</strong>的形式表示，整数的原码、反码、补码都相同，负数的反码除符号位为1外，其余位取相反；补码就是“<strong>反码+1</strong>”。</p>
<p>求出负数的反码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo16</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = -<span class="number">3</span>;             <span class="comment">// -3的二进制数据：11111111 11111111 11111111 11111101</span></span><br><span class="line">        System.out.println(x + <span class="string">"的反码时："</span> + ~x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序输出的结果位2（二进制数据：00000000 00000000 00000000 00000010），因为计算机中负数都是使用补码的形式计算，补码的计算是“反码+1”，然后对-3进行反码，操作过程如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10000000 00000000 00000000 00000011   // -3原码</span><br><span class="line">11111111 11111111 11111111 11111100   // -3反码</span><br><span class="line">11111111 11111111 11111111 11111101   // -3补码 = -3反码 + 1</span><br><span class="line">00000000 00000000 00000000 00000010   // ~-3</span><br></pre></td></tr></table></figure>
<p>在Java中也提供了左移“&lt;&lt;”和右移“&gt;&gt;”两种操作。左移操作是将运算数的二进制嘛整体左移指定位数，左移之后的空位由0来填充，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo17</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;     <span class="comment">// 3的二进制数据： 00000000 00000000 00000000 00000011</span></span><br><span class="line">        System.out.println(x + <span class="string">"左移2位之后的内容："</span> + (x &lt;&lt; <span class="number">2</span>)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3左移2位之后的内容：12   // 12二进制数：00000000 00000000 00000000 00001100</span><br></pre></td></tr></table></figure>
<p>右移操作“&gt;&gt;”是将运算数的二进制码整体右移，右移之后的空位以符号位填充，即如果整数就用0填充，如果是负数则用1填充，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo18</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;    <span class="comment">// 3的二进制数据：00000000 00000000 00000000 00000011</span></span><br><span class="line">        <span class="keyword">int</span> y = -<span class="number">3</span>;   <span class="comment">// -3的二进制数： 11111111 11111111 11111111 11111101</span></span><br><span class="line">        System.out.println(x + <span class="string">"右移2位之后的内容："</span> + (x &gt;&gt; <span class="number">2</span>));</span><br><span class="line">        System.out.println(y + <span class="string">"右移2位之后的内容："</span> + (y &gt;&gt; <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3右移2位之后的内容：0     // 3右移两位之后的二进制：00000000 00000000 00000000 00000000</span><br><span class="line">-3右移2位之后的内容：-1   // -3右移两位后的二进制： 11111111 11111111 11111111 11111111</span><br></pre></td></tr></table></figure>
<p>因为-3右移后的二进制依然是负数，负数用的补码表示，而补码=反码+1，所以求出对应的反码=补码-1，原码也可以根据反码求出：</p>
<ul>
<li>-3右移两位后的二进制补码：11111111 11111111 11111111 11111111</li>
<li>反码 = 补码-1，即补码为：   11111111 11111111 11111111 11111110</li>
<li>-3右移两位后的二进制原码：10000000 00000000 00000000 00000001</li>
</ul>
<p>以上右移操作是带符号位的右移操作，Java也提供无符号位的右移操作“&gt;&gt;&gt;”，即右移后的空位由0来填充，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo19</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;    <span class="comment">// 3的二进制数据：00000000 00000000 00000000 00000011</span></span><br><span class="line">        <span class="keyword">int</span> y = -<span class="number">3</span>;   <span class="comment">// -3的二进制数： 11111111 11111111 11111111 11111101</span></span><br><span class="line">        System.out.println(x + <span class="string">"右移2位后的内容："</span> + (x &gt;&gt;&gt; <span class="number">2</span>));</span><br><span class="line">        System.out.println(y + <span class="string">"右移2位后的内容："</span> + (y &gt;&gt;&gt; <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3右移2位后的内容：0               // 3右移两位之后的二进制：00000000 00000000 00000000 00000000</span><br><span class="line">-3右移2位后的内容：1073741823     // 不带符号位-3右移两位： 00111111 11111111 11111111 11111111</span><br></pre></td></tr></table></figure>
<h3 id="运算符的优先级"><a class="markdownIt-Anchor" href="#运算符的优先级"></a> 运算符的优先级</h3>
<table>
<thead>
<tr>
<th style="text-align:center">优先级</th>
<th style="text-align:center">运算符</th>
<th style="text-align:center">类</th>
<th style="text-align:center">结合性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">()</td>
<td style="text-align:center">括号运算符</td>
<td style="text-align:center">由左至右</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">[]</td>
<td style="text-align:center">方括号运算符</td>
<td style="text-align:center">由左至右</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">!、+（正号）、-（负号）</td>
<td style="text-align:center">一元运算符</td>
<td style="text-align:center">由右至左</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">~</td>
<td style="text-align:center">位逻辑运算符</td>
<td style="text-align:center">由右至左</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">++、–</td>
<td style="text-align:center">自增与自减运算符</td>
<td style="text-align:center">由右至左</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">*、/、%</td>
<td style="text-align:center">算术运算符</td>
<td style="text-align:center">由左至右</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">+、-</td>
<td style="text-align:center">算术运算符</td>
<td style="text-align:center">由左至右</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">&lt;&lt;、&gt;&gt;</td>
<td style="text-align:center">位左移、位右移运算符</td>
<td style="text-align:center">由左至右</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">&gt;、&gt;=、&lt;、&lt;=</td>
<td style="text-align:center">关系运算符</td>
<td style="text-align:center">由左至右</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">==、!=</td>
<td style="text-align:center">关系运算符</td>
<td style="text-align:center">由左至右</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">&amp;（位运算符AND）</td>
<td style="text-align:center">位逻辑运算符</td>
<td style="text-align:center">由左至右</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">^（位运算符XOR）</td>
<td style="text-align:center">位逻辑运算符</td>
<td style="text-align:center">由左至右</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">|（位运算符OR）</td>
<td style="text-align:center">位逻辑运算符</td>
<td style="text-align:center">由左至右</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">逻辑运算符</td>
<td style="text-align:center">由左至右</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">||</td>
<td style="text-align:center">逻辑运算符</td>
<td style="text-align:center">由左至右</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">?:</td>
<td style="text-align:center">三目运算符</td>
<td style="text-align:center">由右至左</td>
</tr>
</tbody>
</table>
<p>当使用同一级运算符的时候，结合性非常重要，因为它决定了谁会被先处理，即在相同优先级的运算符中，根据结合性来处理操作数。对于以上优先级没有必要完全记下，可以多使用括号改变优先级。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记：Java中的数据类型</title>
    <url>/2019/03/15/Java%E7%AC%94%E8%AE%B0%EF%BC%9AJava%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="数据类型划分"><a class="markdownIt-Anchor" href="#数据类型划分"></a> 数据类型划分</h2>
<p>Java的数据类型可以分为<strong>基本数据类型</strong>和<strong>应用数据类型两类</strong>，原始数据类型也称为基本数据类型，包括最基本的boolean、byte、char、short、int、long、float、与double等类型；引用数据类型以一种特殊的方式指向变量的实体，类似于C/C++的指针，这类变量在声明时不会分配内存，必须另外开辟内存空间的操作，如字符串和数组均属于这种数据类型。</p>
<a id="more"></a>
<p>Java的数据类型如下图所示：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>基本数据类型</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>数值型</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>整数类型（byte、short、int、long）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>浮点类型（float、double）</mtext></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>字符型(char)</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>布尔型（boolean）</mtext></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>引用数据类型</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>类（class）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>接口（interface）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>数组</mtext></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f(n)
\begin{cases}
\text{基本数据类型}
\begin{cases}
\text{数值型}
\begin{cases}
\text{整数类型（byte、short、int、long）}\\
\text{浮点类型（float、double）}
\end{cases}\\
\text{字符型(char)}\\
\text{布尔型（boolean）}
\end{cases}\\
\text{引用数据类型}
\begin{cases}
\text{类（class）}\\
\text{接口（interface）}\\
\text{数组}
\end{cases}
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:10.200039999999998em;vertical-align:-4.85002em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.350019999999998em;"><span style="top:0.8000099999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:0.8000099999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.5000100000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.20001000000000024em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.09998999999999958em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.3999899999999994em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.6999899999999992em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.999989999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.299989999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5999899999999991em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8999899999999992em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1999899999999992em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500099999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.300009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.600009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.900009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.200009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.50001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.8000099999999986em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.100009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.400009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.700009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.000009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.3000099999999986em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.600019999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.85002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.350015000000001em;"><span style="top:-7.350015000000001em;"><span class="pstrut" style="height:5.190015em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">基本数据类型</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9500200000000003em;"><span style="top:-1.59999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.59999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.89999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.90001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.20002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.190015em;"><span style="top:-5.190015em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">数值型</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">整数类型（</span><span class="mord">byte</span><span class="mord cjk_fallback">、</span><span class="mord">short</span><span class="mord cjk_fallback">、</span><span class="mord">int</span><span class="mord cjk_fallback">、</span><span class="mord">long</span><span class="mord cjk_fallback">）</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">浮点类型（</span><span class="mord">float</span><span class="mord cjk_fallback">、</span><span class="mord">double</span><span class="mord cjk_fallback">）</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.9319849999999996em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">字符型</span><span class="mord">(char)</span></span></span></span><span style="top:-1.4919849999999992em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">布尔型（</span><span class="mord">boolean</span><span class="mord cjk_fallback">）</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.6900150000000007em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.2499999999999987em;"><span class="pstrut" style="height:5.190015em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">引用数据类型</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">类（</span><span class="mord">class</span><span class="mord cjk_fallback">）</span></span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">接口（</span><span class="mord">interface</span><span class="mord cjk_fallback">）</span></span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">数组</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.850015000000001em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h2 id="基本数据类型"><a class="markdownIt-Anchor" href="#基本数据类型"></a> 基本数据类型</h2>
<p>Java中基本的数据类型如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">大小/位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">long（长整数）</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">int（整数）</td>
<td style="text-align:center">32</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">short（短整数）</td>
<td style="text-align:center">16</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">byte（位）</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">char（字符）</td>
<td style="text-align:center">16</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">float（单精度）</td>
<td style="text-align:center">32</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">double（双精度）</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">Boolean（布尔）</td>
<td style="text-align:center">—</td>
</tr>
</tbody>
</table>
<h4 id="整数类型"><a class="markdownIt-Anchor" href="#整数类型"></a> 整数类型</h4>
<p>整数类型可以分为<strong>long</strong>、<strong>int</strong>、<strong>short</strong>、及<strong>byte</strong> 4种，其中long为64位，即8个字节（bytes），int为32位，即4个字节，short为16位，也就是2个字节，byte为8位，也就是1个字节。例如，sum是一个短整型变量，在程序中作出如下声明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">short</span> num;   <span class="comment">//声明sum为短整型</span></span><br></pre></td></tr></table></figure>
<p>经过声明之后，Java会在可使用的内存空间中寻找一个占有两个字节的块供sum变量使用。在Java中对于一个整型常量，其默认类型为int型，所以一般在声明常量时不要超过int数据类型的范围。</p>
<h5 id="数据溢出"><a class="markdownIt-Anchor" href="#数据溢出"></a> 数据溢出</h5>
<p>当整数的数据大小超过其类型可以表示的范围，而程序中又没有做数值范围的检查时，一个整型变量所输出的值将会发生紊乱，且不是预期的运行结果。例如下面的程序中声明了一个整型的数，并把它赋值为整型所可以表示范围的最大值，然后将它分别加1和加2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataDemo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MAX_VALUE;                         <span class="comment">// 得到整型的最大值</span></span><br><span class="line">        System.out.println(<span class="string">"整型的最大值："</span> + max);           <span class="comment">// 输出最大值</span></span><br><span class="line">        System.out.println(<span class="string">"整型最大值 + 1："</span> + (max + <span class="number">1</span>));   <span class="comment">// 最大值加1</span></span><br><span class="line">        System.out.println(<span class="string">"整型最大值 + 2："</span> + (max + <span class="number">2</span>));   <span class="comment">// 最大值加2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序的运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整型的最大值：2147483647</span><br><span class="line">整型最大值+1：-2147483648</span><br><span class="line">整型最大值+2：-2147483647</span><br></pre></td></tr></table></figure>
<p>int型的范围为-2147483648~2147483647，从输出结果可以看出，当最大值2147483647加上1之后，结果变成了最小值；当最大值加上2时，结果变成了次小值，这就是<strong>数据类型的溢出</strong>。为了避免int类型的溢出，可以再该表达式中的任一常量后加上大写的L，或者在变量前面加上long，做<strong>强制类型的转换</strong>，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">DataDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MAX_VALUE;                            <span class="comment">// 整型最大值</span></span><br><span class="line">        System.out.println(<span class="string">"整型的最大值："</span> + max);              <span class="comment">// 输出最大值</span></span><br><span class="line">        System.out.println(<span class="string">"整型最大值+1："</span> + (max+<span class="number">1</span>));          <span class="comment">// 最大值加1</span></span><br><span class="line">        System.out.println(<span class="string">"整型最大值+2："</span> + (max+<span class="number">2L</span>));         <span class="comment">// 变成long型 </span></span><br><span class="line">        System.out.println(<span class="string">"整型最大值+2："</span> + ((<span class="keyword">long</span>)max+<span class="number">2</span>));    <span class="comment">// 转换成long型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整型的最大值：2147483647</span><br><span class="line">整型最大值+1：-2147483648</span><br><span class="line">整型最大值+2：2147483649</span><br><span class="line">整型最大值+2：2147483649</span><br></pre></td></tr></table></figure>
<p>处理int型的溢出，可以采用强制类型转换方式，但是对于long型的溢出，就没有处理办法了，此时就需要在程序中加上变量值的界限检查，在运行时才不会发生错误。</p>
<h4 id="字符类型"><a class="markdownIt-Anchor" href="#字符类型"></a> 字符类型</h4>
<p>字符类型在内存中占两个字节，可以用来保存英文字母等字符。给字符变量赋值可以使用数字和字符，它们都能使程序正确的运行，例如，Java中使用Unicode编码系统，Unicode中小写的a是以97表示的，所以，如果要给一个字符变量赋值为a，可以使用小写“a”，也可以使用数字97，需要注意的是，字符要用一队单引号（’ '）括起。程序中字符类型的声明如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="string">'a'</span>;   <span class="comment">// 声明ch为字符型，其值为a</span></span><br></pre></td></tr></table></figure>
<p>在程序中输出一个包括双引号的字符串时，可以把字符变量赋值为转义字符，再将它输出，即：再程序中声明一个字符类型变量ch，然后把ch设置为“\&quot;”，再进行输出操作，或者，也可以直接再要输出的字符穿中加入特殊的转义字符。常用的转义字符如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">转义字符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">\f</td>
<td style="text-align:center">换页</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">\</td>
<td style="text-align:center">反斜线</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">\b</td>
<td style="text-align:center">倒退一格</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">’</td>
<td style="text-align:center">单引号</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">\r</td>
<td style="text-align:center">归位</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">&quot;</td>
<td style="text-align:center">双引号</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">\t</td>
<td style="text-align:center">制表符Tab</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">\n</td>
<td style="text-align:center">换行</td>
</tr>
</tbody>
</table>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch1 = <span class="string">'\"'</span>;                            <span class="comment">// 定义转义字符</span></span><br><span class="line">        <span class="keyword">char</span> ch2 = <span class="string">'\\'</span>;                            <span class="comment">// 定义转义字符</span></span><br><span class="line">        System.out.println(<span class="string">"ch1 = "</span> + ch1);         <span class="comment">// 打印输出</span></span><br><span class="line">        System.out.println(<span class="string">"ch2 = "</span> + ch2);         <span class="comment">// 打印输出</span></span><br><span class="line">        System.out.println(<span class="string">"\"Hello World\""</span>);      <span class="comment">// 直接输出转义字符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ch1 = &quot;</span><br><span class="line">ch2 = \</span><br><span class="line">&quot;Hello World&quot;</span><br></pre></td></tr></table></figure>
<h4 id="浮点数类型与双精度浮点数类型"><a class="markdownIt-Anchor" href="#浮点数类型与双精度浮点数类型"></a> 浮点数类型与双精度浮点数类型</h4>
<p>在Java中，带有小数点的数据类型称为浮点数类型（float），其长度为32个字节，当浮点数的表示范围不够大时，还有一种双精度（double）浮点数可以使用，双精度浮点数类型的长度为64个字节。两种数据类型的声明如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> num;          <span class="comment">// 声明num为双精度浮点型变量</span></span><br><span class="line"><span class="keyword">float</span> sum = <span class="number">3.0f</span>；   <span class="comment">// 声明sum为浮点型变量，其初值为3.0</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是，在Java中使用浮点型数值时，默认类型时double，在数值后面可以加上D或者d，作为double类型的标识，在数据后面加上F或者f，则作为float类型的标识。若什么都没加，Java会将该数据默认为double类型。</p>
<h4 id="布尔类型"><a class="markdownIt-Anchor" href="#布尔类型"></a> 布尔类型</h4>
<p>布尔（boolean）类型的变量只有true（真）和false（假）两种，程序中对布尔类型的数据声明如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;   <span class="comment">// 声明布尔变量flag，并赋值为true</span></span><br></pre></td></tr></table></figure>
<h2 id="数据类型转换"><a class="markdownIt-Anchor" href="#数据类型转换"></a> 数据类型转换</h2>
<p>数据类型的转换方式可以分为<strong>自动类型转换</strong>及<strong>强制类型转换</strong>两种。</p>
<h4 id="自动转换"><a class="markdownIt-Anchor" href="#自动转换"></a> 自动转换</h4>
<p>在程序中已经定义好了数据类型的变量，若要用另一种数据类习表示时，Java会在下列条件皆成立时，自动做数据类型的转换：</p>
<p>​	（1） 转换前的数据类型与转换后的类型兼容。</p>
<p>​	（2） 转换后的数据类型的表示范围比转换前的类型大。</p>
<p>例如，将short类型的变量a转换成int类型，由于short与int皆为整数类型，符合上述条件（1）；而int的表示范围比short大，符合条件（2），因此Java会自动将原为short类型的变量a转换成int类型。</p>
<p>值得注意的是，类型的转换只限该行语句，并不会影响原先所定义的变量的类型，而且通过自动类型的转换可以保证数据的精确度，它不会因为转换而损失数据内容，这种类型的转换方式也称为<strong>扩大转换</strong>。</p>
<p>以扩大转换来看，字符和整数是可以使用自动类型转换的，整数和浮点数亦是兼容的，但是由于boolean类型只能存放true或false，与整数及字符是不兼容的，因此不能做类型的转换。下面介绍当两个数其中一个为浮点数时，其运算结果会怎么变化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class DataDemo04 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int x = 30;</span><br><span class="line">        float y = 22.19f;</span><br><span class="line">        System.out.println(&quot;x/y = &quot; + (x/y));</span><br><span class="line">        System.out.println(&quot;10/3.5 = &quot; + (10/3.5));</span><br><span class="line">        System.out.println(&quot;10/3 = &quot; + (10/3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x/y = 1.3519603</span><br><span class="line">10/3.5 = 2.857142857142857</span><br><span class="line">10/3 = 3</span><br></pre></td></tr></table></figure>
<p>从输出结果来看，int类型与float类型进行计算之后，输出的结果会变成float类型，一个整型常量和一个浮点型常量进行计算之后，结果也会变成一个浮点数据，而如果两个int型的常量进行计算，最终结果也时int型，而其小树部分将会被忽略。也就是说，假设有一个整数和双精度浮点数作运算时，Java会把整数转换成双精度浮点数后再做运算，运算结果也会变成双精度浮点数。</p>
<h4 id="强制转换"><a class="markdownIt-Anchor" href="#强制转换"></a> 强制转换</h4>
<p>当两个整数进行运算时，其运算结果也会是整数，例如，做除法运算8/3，其结果为整数2，而不是实际的2.33333···，因此，在Java中若是想要得到的计算结果是浮点数时，就必须将数据类型做强制性的转换，转换语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（要转换的数据类型） 变量名称；</span><br></pre></td></tr></table></figure>
<p>因为这种强制类型的转换时直接变写在程序代码中的，所以也称为<strong>显示转换</strong>。强制转换例子如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">30.3f</span>;</span><br><span class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>)f;</span><br><span class="line">        System.out.println(<span class="string">"x = "</span> + x);</span><br><span class="line">        System.out.println(<span class="string">"10 / 3 = "</span> + ((<span class="keyword">float</span>)<span class="number">10</span> /<span class="number">3</span> ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x = 30</span><br><span class="line">10 / 3 = 3.3333333</span><br></pre></td></tr></table></figure>
<p>在程序中，首先将一个浮点型的变量f的内容赋给了int型变量x，因为int数据类型的长度小于float类型的长度，所以此处需要进行强制转换。程序的最后使用了两个整型常量进行计算，但是因为将其中一个整型变量变为了float类型，所以在计算时会强制把其他的整型也变成float类型，最后计算结果也就是包含小数的。</p>
<p>和自动转换一样，强制转换并不会影响原先定义的变量的类型，运行时只会将强制转换的那行语句进行变量的数据类型转换。此外，若是将一个超出该变量可表示范围的值赋值给这个变量，这种转换称为<strong>缩小转换</strong>，这种转换可能会丢失数据精度，因此Java并不会主动进行这种类型的转换，此时就必须做强制转换。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
</search>
