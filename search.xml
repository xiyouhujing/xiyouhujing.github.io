<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java选择和循环语句]]></title>
    <url>%2F2019%2F03%2F18%2FJava%E9%80%89%E6%8B%A9%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[程序的结构一般来说程序的结构可以分为顺序结构、选择结构以及循环结构三种，这三种结构只有一个共同点，就是它们只有一个入口，也只有一个出口，这些单一的入、出口可以让程序易读、好维护，也可以减少调试时间。 顺序结构顺序结构下的程序至上而下的逐条执行，一条语句执行完之后继续执行下一条语句，一直到程序的末尾，其结构如下图所示： 选择结构 选择结构循环结构循环的中断]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中的运算符]]></title>
    <url>%2F2019%2F03%2F16%2FJava%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[Java中的运算符表达式时Java的一种语句，它由操作数和操作符组成，操作数可以是常量、变量，也可以是方法，而运算符就是数学中的运算符号，如“+”、“-”、“*”、“/”等，在表达式（z+100）中，z和100都是操作数，“+”就是运算符。 Java提供了很多运算符，这些运算符除了做一般的数学运算之外，还可以做逻辑运算、位运算等。根据所使用类的不同，运算符可以分为赋值运算符、算术运算符、逻辑运算符、条件运算符以及括号运算符。 赋值运算符号想为各种不同数据类型的变量赋值时，就需要使用赋值运算符（=），等号（=）在Java中不是“等于”的意思，二十“赋值”的意思，例如： 12345678public class OperatorDemo01 &#123; public static void main(String[] args) &#123; int num = 22; System.out.println("第一次输出：num = " + num); num = num - 3; System.out.println("第二次输出：num = " + num); &#125;&#125; 第五行中，把num-3的值赋给了num，所以程序运行的结果如下： 12第一次输出：num = 22第二次输出：num = 19 当然，也可以将等号后面的值赋给其他变量，例如： 1int sum = num1 + num2; // num1与num2相加之后的值再赋给变量sum存放 一元运算符对于大部分表达式而言，运算符的前后都有操作数，但是一元运算符比较特别，它只需要一个操作数。下表列出了一元运算符的成员： 序号 一元运算符 描述 1 + 正号 2 - 负号 3 ! NOT，否 下面程序演示了3种一元运算符的使用： 12345678910public class OperatorDemo02 &#123; public static void main(String[] args) &#123; boolean b = false; // 定义boolean型数据 int x = 10; // 定义一个正数 int y = -30; // 定义一个负数 System.out.println("b = " + b + ", !b = " + !b); // 取反 System.out.println("x = " + x + ", -x = " + -x); // 使用负号 System.out.println("y = " + y + ", +y = " + +y); // 使用正号 &#125;&#125; 程序运行结果如下： 123b = false, !b = truex = 10, -x = -10y = -30, +y = -30 算术运算符常用的算术运算符如下表： 序号 算术运算符 描述 1 + 加法 2 - 减法 3 * 乘法 4 / 除法 5 % 取模（取余数） 程序中的运用如下： 1234567891011public class OperatorDemo03 &#123; public static void main(String[] args) &#123; int i = 10; int j = 3; System.out.println(i + "+" + j + "=" + (i + j)); // 加法操作 System.out.println(i + "-" + j + "=" + (i - j)); // 减法操作 System.out.println(i + "*" + j + "=" + (i * j)); // 乘法操作 System.out.println(i + "/" + j + "=" + (i / j)); // 除法操作 System.out.println(i + "%" + j + "=" + (i % j)); // 取模操作 &#125;&#125; 运行的结果如下： 1234510+3=1310-3=710*3=3010/3=310%3=1 关系运算符Java中经常会在if语句中使用关系运算符，具体格式如下： 123if (布尔表达式)&#123; 语句;&#125; 如果括号中的布尔表达式成立，就会执行{}中的语句；若是布尔表达式不成立了，则语句不会执行。常用的关系运算符如下表所示： 序号 关系运算符 描述 1 &gt; 大于 2 &lt; 小于 3 &gt;= 大于等于 4 &lt;= 小于等于 5 == 等于 6 != 不等于 需要注意的是，赋值运算符为等号（=），为了避免混淆，当使用关系运算符“等于”时，必须使用两个等号（==）表示。关系运算符在if语句中的使用如下： 12345678910111213public class OperatorDemo04 &#123; public static void main(String[] args) &#123; if (5 &gt; 2)&#123; // 判断5是否大于2 System.out.println("条件成立：5大于2"); &#125; if (true)&#123; // 判断是否为真 System.out.println("直接写的true"); &#125; if ((3 + 6) == (3 - 6)) &#123; // 判断计算结果内容是否相等 System.out.println("这是不可能成立的！"); &#125; &#125;&#125; 程序运行结果如下： 12条件成立：5大于2直接写的true 可以看到程序中最后一个if语句内的内容没有执行，因为if语句中的条件满足了，才会执行if中的内容，否则不执行。另外如果if语句之中只有一条语句，那么可以不用写“{}”，但是不建议这么写。 自增与自减运算符 序号 自增与自减运算符 描述 1 ++ 自增，变量值加1 2 — 自减，变量值减1 用自增与自减运算符可以使程序更加简洁欸，例如，声明一个int类型的变量a，在程序运行中想让它加1，语句如下： 1a = a+1; // a加1后再赋值给a 将a的值加1后再赋给a存放，也可以利用自增运算符“++”写出语义相同但是语句更简洁的语句： 1a++; // a加1后再赋值给a存放，语句更简洁 在程序中还可以看到另一种自增运算符“++”的用法，就是将自增运算符“++”写在变量的前面，如++a，这就和a++所表示的意义完全不一样。a++会先执行整个语句后再将a的值加1，而++b则先把b的值加1后，再执行整个语句。 1234567891011121314public class OperatorDemo05 &#123; public static void main(String[] args) &#123; int a = 3, b = 3; int x = 6, y = 6; System.out.println("a = " + a); // 输出变量a的值 System.out.println("\t a++ = " + (a++) + ", a = " + a); // 先执行后自增 System.out.println("b = " + b); // 输出变量b的值 System.out.println("\t ++b = " + (++b) + ", b = " + b); // 先自增后执行 System.out.println("x = " + x); // 输出变量x的值 System.out.println("\t x-- = " + (x--) + ", x = " + x); // 先执行后自减 System.out.println("y = " + y); // 输出变量y的值 System.out.println("\t --y = " + (--y) + ", y = " + y); // 先自减后执行 &#125;&#125; 程序运行结果如下： 12345678a = 3 a++ = 3, a = 4b = 3 ++b = 4, b = 4x = 6 x-- = 6, x = 5y = 6 --y = 5, y = 5 逻辑运算符使用逻辑运算符可以连接多个逻辑运算，常用的逻辑运算符如下表： 序号 逻辑运算符 描述 1 &amp; AND，与 2 &amp;&amp; 短路与 3 &#124; OR，或 4 &#124;&#124; 短路或 当使用逻辑运算符“&amp;&amp;”时，运算符前后的两个操作数的返回值皆为真，运算的结果才会为真；使用逻辑运算“||”时，运算符前后的两个操作数的返回值只要有一个为真，运算结果就为真。并存在以下规律： 12345678910public class OperatorDemo06 &#123; public static void main(String[] args) &#123; boolean a = true; boolean b = false; System.out.println("a || b = " + (a || b)); System.out.println("a | b = " + (a | b)); System.out.println("a &amp;&amp; b = " + (a &amp;&amp; b)); System.out.println("a &amp; b = " + (a &amp; b)); &#125;&#125; 程序运行结果为： 1234a || b = truea | b = truea &amp;&amp; b = falsea &amp; b = false 根据对逻辑操作理解，可以总结以下规律： 对于与操作来说，如果第一个条件为假，后面的条件不管是真是假，最终的结果都是假。 对于或操作来说，如果第一个条件为真，后面的条件不管是真是假，最终的结果都是真。 也就是说，对于与和或来说，最先满足的条件就是一个关键性的条件，所以在Java中设置了短路与和短路或，对于短路与和与、短路或和或有以下区别： 对于与来说，要求所有的条件都判断，而如果使用短路与，第一个条件又为false，则后面的条件不需要再判断。 对于或来说，要求所有的条件都判断，而如果使用短路或，第一个条件又为true，则后面的条件不需要再判断。 下面通过三段代码来理解以上两点： 测试代码（一）：观察被除数为0的情况 123456public class OperatorDemo07 &#123; public static void main(String[] args) &#123; int x = 10 / 0; System.out.println("x = " + x); // 错误，被除数为0 &#125;&#125; 该段程序运行之后会出现以下错误，即错误的根本原因在于除数为0： Exception in thread “main” java.lang.ArithmeticException: / by zero 测试代码（二）：验证“&amp;”的作用 1234567public class OperatorDemo08 &#123; public static void main(String[] args) &#123; if (10 != 10 &amp; 10 /0 == 0) &#123; // 非短路与 System.out.println("条件满足"); &#125; &#125;&#125; 程序运行后，又出现了下面的错误提示： Exception in thread “main” java.lang.ArithmeticException: / by zero 造成以上错误的根本原因在于“与”操作要把所有的条件进行判断，所以在计算10/0时就出现了错误。 测试代码（三）：验证“&amp;&amp;”的作用 1234567public class OperatorDemo09 &#123; public static void main(String[] args) &#123; if (10 != 10 &amp;&amp; 10/0 == 0) &#123; // 短路与 System.out.println("条件满足"); &#125; &#125;&#125; 该程序运行后，没有出现上面的错误，因为短路与判断第一个条件就为false，那么之后的条件就不用判断了，这就是短路与的作用。短路或和或也是同样的原理。 括号运算符括号“()”也是Java的运算符，用于提高括号中表达式的优先级。 位运算符Java中支持位运算操作，位运算操作是指进行二进制位的运算，在Java中支持的位运算符如下表所示： 序号 位运算符 描述 1 &amp; 按位与 2 &#124; 按位或 3 ^ 异或（相同为0，不同为1） 4 ~ 取反 5 &lt;&lt; 左移位 6 &gt;&gt; 右移位 7 &gt;&gt;&gt; 无符号右移位 在Java中所有的数据都是以二进制的形式进行运算的，每一位二进制进行与、或、异或操作的结果如下表所示： 序号 二进制数1 二进制数2 与操作（&amp;） 或操作（&#124;） 异或操作（^） 1 0 0 0 0 0 2 0 1 0 1 1 3 1 0 0 1 1 4 1 1 1 1 0 下面通过一段代码来观察位运算符： 123456789public class OperatorDemo10 &#123; public static void main(String[] args) &#123; int x = 3; // 3的二进制数据：00000000 00000000 00000000 00000011 int y = 6; // 6的二进制数据：00000000 00000000 00000000 00000110 System.out.println(x &amp; y); // 与操作的结果： 00000000 00000000 00000000 00000010 System.out.println(x | y); // 或操作的结果： 00000000 00000000 00000000 00000111 System.out.println(x ^ y); // 异或操作结果： 00000000 00000000 00000000 00000101 &#125;&#125; 运行结果如下：123275 在计算机的数据表示中只定义了整数的表现形式，并没有定义负数的表现形式，所以，负数一般用补码的形式表示，整数的原码、反码、补码都相同，负数的反码除符号位为1外，其余位取相反；补码就是“反码+1”。 求出负数的反码： 123456public class OperatorDemo16 &#123; public static void main(String[] args) &#123; int x = -3; // -3的二进制数据：11111111 11111111 11111111 11111101 System.out.println(x + "的反码时：" + ~x); &#125;&#125; 程序输出的结果位2（二进制数据：00000000 00000000 00000000 00000010），因为计算机中负数都是使用补码的形式计算，补码的计算是“反码+1”，然后对-3进行反码，操作过程如下所示： 123410000000 00000000 00000000 00000011 // -3原码11111111 11111111 11111111 11111100 // -3反码11111111 11111111 11111111 11111101 // -3补码 = -3反码 + 100000000 00000000 00000000 00000010 // ~-3 在Java中也提供了左移“&lt;&lt;”和右移“&gt;&gt;”两种操作。左移操作是将运算数的二进制嘛整体左移指定位数，左移之后的空位由0来填充，例如： 123456public class OperatorDemo17 &#123; public static void main(String[] args) &#123; int x = 3; // 3的二进制数据： 00000000 00000000 00000000 00000011 System.out.println(x + "左移2位之后的内容：" + (x &lt;&lt; 2)); &#125;&#125; 程序输出为： 13左移2位之后的内容：12 // 12二进制数：00000000 00000000 00000000 00001100 右移操作“&gt;&gt;”是将运算数的二进制码整体右移，右移之后的空位以符号位填充，即如果整数就用0填充，如果是负数则用1填充，例如： 12345678public class OperatorDemo18 &#123; public static void main(String[] args) &#123; int x = 3; // 3的二进制数据：00000000 00000000 00000000 00000011 int y = -3; // -3的二进制数： 11111111 11111111 11111111 11111101 System.out.println(x + "右移2位之后的内容：" + (x &gt;&gt; 2)); System.out.println(y + "右移2位之后的内容：" + (y &gt;&gt; 2)); &#125;&#125; 程序运行结果： 123右移2位之后的内容：0 // 3右移两位之后的二进制：00000000 00000000 00000000 00000000-3右移2位之后的内容：-1 // -3右移两位后的二进制： 11111111 11111111 11111111 11111111 因为-3右移后的二进制依然是负数，负数用的补码表示，而补码=反码+1，所以求出对应的反码=补码-1，原码也可以根据反码求出： -3右移两位后的二进制补码：11111111 11111111 11111111 11111111 反码 = 补码-1，即补码为： 11111111 11111111 11111111 11111110 -3右移两位后的二进制原码：10000000 00000000 00000000 00000001 以上右移操作是带符号位的右移操作，Java也提供无符号位的右移操作“&gt;&gt;&gt;”，即右移后的空位由0来填充，例如： 12345678public class OperatorDemo19 &#123; public static void main(String[] args) &#123; int x = 3; // 3的二进制数据：00000000 00000000 00000000 00000011 int y = -3; // -3的二进制数： 11111111 11111111 11111111 11111101 System.out.println(x + "右移2位后的内容：" + (x &gt;&gt;&gt; 2)); System.out.println(y + "右移2位后的内容：" + (y &gt;&gt;&gt; 2)); &#125;&#125; 程序运行结果： 123右移2位后的内容：0 // 3右移两位之后的二进制：00000000 00000000 00000000 00000000-3右移2位后的内容：1073741823 // 不带符号位-3右移两位： 00111111 11111111 11111111 11111111 运算符的优先级 优先级 运算符 类 结合性 1 () 括号运算符 由左至右 1 [] 方括号运算符 由左至右 2 !、+（正号）、-（负号） 一元运算符 由右至左 2 ~ 位逻辑运算符 由右至左 2 ++、— 自增与自减运算符 由右至左 3 *、/、% 算术运算符 由左至右 4 +、- 算术运算符 由左至右 5 &lt;&lt;、&gt;&gt; 位左移、位右移运算符 由左至右 6 &gt;、&gt;=、&lt;、&lt;= 关系运算符 由左至右 7 ==、!= 关系运算符 由左至右 8 &amp;（位运算符AND） 位逻辑运算符 由左至右 9 ^（位运算符XOR） 位逻辑运算符 由左至右 10 &#124;（位运算符OR） 位逻辑运算符 由左至右 11 &amp;&amp; 逻辑运算符 由左至右 12 &#124;&#124; 逻辑运算符 由左至右 13 ?: 三目运算符 由右至左 当使用同一级运算符的时候，结合性非常重要，因为它决定了谁会被先处理，即在相同优先级的运算符中，根据结合性来处理操作数。对于以上优先级没有必要完全记下，可以多使用括号改变优先级。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java数据类型]]></title>
    <url>%2F2019%2F03%2F15%2FJava%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[数据类型划分Java的数据类型可以分为基本数据类型和应用数据类型两类，原始数据类型也称为基本数据类型，包括最基本的boolean、byte、char、short、int、long、float、与double等类型；引用数据类型以一种特殊的方式指向变量的实体，类似于C/C++的指针，这类变量在声明时不会分配内存，必须另外开辟内存空间的操作，如字符串和数组均属于这种数据类型。Java的数据类型如下图所示： f(n) \begin{cases} 基本数据类型 \begin{cases} 数值型 \begin{cases} 整数类型（byte、short、int、long）\\ 浮点类型（float、double） \end{cases}\\ 字符型(char)\\ 布尔型（boolean） \end{cases}\\ 引用数据类型 \begin{cases} 类（class）\\ 接口（interface）\\ 数组 \end{cases} \end{cases}基本数据类型Java中基本的数据类型如下表所示： 序号 数据类型 大小/位 1 long（长整数） 64 2 int（整数） 32 3 short（短整数） 16 4 byte（位） 8 5 char（字符） 16 6 float（单精度） 32 7 double（双精度） 64 8 Boolean（布尔） — 整数类型整数类型可以分为long、int、short、及byte 4种，其中long为64位，即8个字节（bytes），int为32位，即4个字节，short为16位，也就是2个字节，byte为8位，也就是1个字节。例如，sum是一个短整型变量，在程序中作出如下声明： 1short num; //声明sum为短整型 经过声明之后，Java会在可使用的内存空间中寻找一个占有两个字节的块供sum变量使用。在Java中对于一个整型常量，其默认类型为int型，所以一般在声明常量时不要超过int数据类型的范围。 数据溢出当整数的数据大小超过其类型可以表示的范围，而程序中又没有做数值范围的检查时，一个整型变量所输出的值将会发生紊乱，且不是预期的运行结果。例如下面的程序中声明了一个整型的数，并把它赋值为整型所可以表示范围的最大值，然后将它分别加1和加2： 12345678class DataDemo01&#123; public static void main(String[] args)&#123; int max = Integer.MAX_VALUE; // 得到整型的最大值 System.out.println("整型的最大值：" + max); // 输出最大值 System.out.println("整型最大值 + 1：" + (max + 1)); // 最大值加1 System.out.println("整型最大值 + 2：" + (max + 2)); // 最大值加2 &#125;&#125; 程序的运行结果如下： 123整型的最大值：2147483647整型最大值+1：-2147483648整型最大值+2：-2147483647 int型的范围为-2147483648~2147483647，从输出结果可以看出，当最大值2147483647加上1之后，结果变成了最小值；当最大值加上2时，结果变成了次小值，这就是数据类型的溢出。为了避免int类型的溢出，可以再该表达式中的任一常量后加上大写的L，或者在变量前面加上long，做强制类型的转换，例如： 123456789ublic class DataDemo02 &#123; public static void main(String[] args)&#123; int max = Integer.MAX_VALUE; // 整型最大值 System.out.println("整型的最大值：" + max); // 输出最大值 System.out.println("整型最大值+1：" + (max+1)); // 最大值加1 System.out.println("整型最大值+2：" + (max+2L)); // 变成long型 System.out.println("整型最大值+2：" + ((long)max+2)); // 转换成long型 &#125;&#125; 程序运行的结果如下： 1234整型的最大值：2147483647整型最大值+1：-2147483648整型最大值+2：2147483649整型最大值+2：2147483649 处理int型的溢出，可以采用强制类型转换方式，但是对于long型的溢出，就没有处理办法了，此时就需要在程序中加上变量值的界限检查，在运行时才不会发生错误。 字符类型字符类型在内存中占两个字节，可以用来保存英文字母等字符。给字符变量赋值可以使用数字和字符，它们都能使程序正确的运行，例如，Java中使用Unicode编码系统，Unicode中小写的a是以97表示的，所以，如果要给一个字符变量赋值为a，可以使用小写“a”，也可以使用数字97，需要注意的是，字符要用一队单引号（’ ‘）括起。程序中字符类型的声明如下： 1char ch = 'a'; // 声明ch为字符型，其值为a 在程序中输出一个包括双引号的字符串时，可以把字符变量赋值为转义字符，再将它输出，即：再程序中声明一个字符类型变量ch，然后把ch设置为“\\””，再进行输出操作，或者，也可以直接再要输出的字符穿中加入特殊的转义字符。常用的转义字符如下表： 序号 转义字符 描述 1 \f 换页 2 \\ 反斜线 3 \b 倒退一格 4 \’ 单引号 5 \r 归位 6 \” 双引号 7 \t 制表符Tab 8 \n 换行 例如： 123456789public class DataDemo03 &#123; public static void main(String[] args) &#123; char ch1 = '\"'; // 定义转义字符 char ch2 = '\\'; // 定义转义字符 System.out.println("ch1 = " + ch1); // 打印输出 System.out.println("ch2 = " + ch2); // 打印输出 System.out.println("\"Hello World\""); // 直接输出转义字符 &#125;&#125; 程序输出如下： 123ch1 = &quot;ch2 = \&quot;Hello World&quot; 浮点数类型与双精度浮点数类型在Java中，带有小数点的数据类型称为浮点数类型（float），其长度为32个字节，当浮点数的表示范围不够大时，还有一种双精度（double）浮点数可以使用，双精度浮点数类型的长度为64个字节。两种数据类型的声明如下： 12double num; // 声明num为双精度浮点型变量float sum = 3.0f； // 声明sum为浮点型变量，其初值为3.0 需要注意的是，在Java中使用浮点型数值时，默认类型时double，在数值后面可以加上D或者d，作为double类型的标识，在数据后面加上F或者f，则作为float类型的标识。若什么都没加，Java会将该数据默认为double类型。 布尔类型布尔（boolean）类型的变量只有true（真）和false（假）两种，程序中对布尔类型的数据声明如下： 1boolean flag = true; // 声明布尔变量flag，并赋值为true 数据类型转换数据类型的转换方式可以分为自动类型转换及强制类型转换两种。 自动转换在程序中已经定义好了数据类型的变量，若要用另一种数据类习表示时，Java会在下列条件皆成立时，自动做数据类型的转换： ​ （1） 转换前的数据类型与转换后的类型兼容。 ​ （2） 转换后的数据类型的表示范围比转换前的类型大。 例如，将short类型的变量a转换成int类型，由于short与int皆为整数类型，符合上述条件（1）；而int的表示范围比short大，符合条件（2），因此Java会自动将原为short类型的变量a转换成int类型。 值得注意的是，类型的转换只限该行语句，并不会影响原先所定义的变量的类型，而且通过自动类型的转换可以保证数据的精确度，它不会因为转换而损失数据内容，这种类型的转换方式也称为扩大转换。 以扩大转换来看，字符和整数是可以使用自动类型转换的，整数和浮点数亦是兼容的，但是由于boolean类型只能存放true或false，与整数及字符是不兼容的，因此不能做类型的转换。下面介绍当两个数其中一个为浮点数时，其运算结果会怎么变化： 123456789public class DataDemo04 &#123; public static void main(String[] args) &#123; int x = 30; float y = 22.19f; System.out.println(&quot;x/y = &quot; + (x/y)); System.out.println(&quot;10/3.5 = &quot; + (10/3.5)); System.out.println(&quot;10/3 = &quot; + (10/3)); &#125;&#125; 程序运行结果为： 123x/y = 1.351960310/3.5 = 2.85714285714285710/3 = 3 从输出结果来看，int类型与float类型进行计算之后，输出的结果会变成float类型，一个整型常量和一个浮点型常量进行计算之后，结果也会变成一个浮点数据，而如果两个int型的常量进行计算，最终结果也时int型，而其小树部分将会被忽略。也就是说，假设有一个整数和双精度浮点数作运算时，Java会把整数转换成双精度浮点数后再做运算，运算结果也会变成双精度浮点数。 强制转换当两个整数进行运算时，其运算结果也会是整数，例如，做除法运算8/3，其结果为整数2，而不是实际的2.33333···，因此，在Java中若是想要得到的计算结果是浮点数时，就必须将数据类型做强制性的转换，转换语法如下： 1（要转换的数据类型） 变量名称； 因为这种强制类型的转换时直接变写在程序代码中的，所以也称为显示转换。强制转换例子如下： 12345678public class DataDemo05 &#123; public static void main(String[] args) &#123; float f = 30.3f; int x = (int)f; System.out.println("x = " + x); System.out.println("10 / 3 = " + ((float)10 /3 )); &#125;&#125; 程序运行结果如下： 12x = 3010 / 3 = 3.3333333 在程序中，首先将一个浮点型的变量f的内容赋给了int型变量x，因为int数据类型的长度小于float类型的长度，所以此处需要进行强制转换。程序的最后使用了两个整型常量进行计算，但是因为将其中一个整型变量变为了float类型，所以在计算时会强制把其他的整型也变成float类型，最后计算结果也就是包含小数的。 和自动转换一样，强制转换并不会影响原先定义的变量的类型，运行时只会将强制转换的那行语句进行变量的数据类型转换。此外，若是将一个超出该变量可表示范围的值赋值给这个变量，这种转换称为缩小转换，这种转换可能会丢失数据精度，因此Java并不会主动进行这种类型的转换，此时就必须做强制转换。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
</search>
