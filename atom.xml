<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiyou</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiyouhujing.github.io/"/>
  <updated>2019-04-03T10:58:09.685Z</updated>
  <id>http://xiyouhujing.github.io/</id>
  
  <author>
    <name>xiyou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中数组的定义及使用</title>
    <link href="http://xiyouhujing.github.io/2019/03/30/Java%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://xiyouhujing.github.io/2019/03/30/Java中数组的定义及使用/</id>
    <published>2019-03-30T07:43:06.000Z</published>
    <updated>2019-04-03T10:58:09.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><p><strong>数组</strong>是一组相关数据的集合，一个数组实际上就是一连串的变量，数组按使用可以分为<strong>一维数组</strong>、<strong>二位数组</strong>和<strong>多维数组</strong>。</p><p>一维数组可以存放上千万个数据，并且这些数据的类型完全相同。要使用Java的数组，必须经过声明数组和分配内存给数组两个步骤，一维数组的声明与分配内存的语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[] = null;      // 声明一维数组</span><br><span class="line">数组名 = new 数据类型[长度]；  // 分配内存给数组</span><br></pre></td></tr></table></figure><p>对于数组的声明方式也可以用下面的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = null;     // 声明一维数组</span><br></pre></td></tr></table></figure><p>在数组的声明格式中，“数据类型”指的是声明数组元素的数据类型，常见的类型有整型、浮点型与字符型等。“数组名”是用来统一这组相同数据类型的元素的名称，其命名规则和变量相同。数组声明后实际上在内存中保存了此数组的名称（实际上是保存对一堆内存的引用地址），接下来便要在堆内存中配置数组所需的内存。其中，“长度”是告诉编辑器所声明的数组要存放多少个元素，而关键字new则是命令编译器根据括号里的长度在堆内存中开辟一块堆内存供该数组使用，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score[] = <span class="keyword">null</span>;         <span class="comment">// 声明整型数组score</span></span><br><span class="line">score = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];         <span class="comment">// 为整型数组score分配内存空间，其元素个数为3</span></span><br></pre></td></tr></table></figure><p>当声明一个整型数组score时，score可视为数组类型的变量，此时，这个变量并没有包含任何内容，编译器仅会在栈内存中分配一块内存给它，用来指向数组实体的地址的名称。声明之后，就要做堆内存分配的操作了，也就是上面第二行的语句，这一行会开辟3个可供保存整数的内存空间，并把此内存空间的参考地址赋给score变量。因为数组是引用数据类型，所以数组变量score所保存的并非是数组的实体，而是数组堆内存的参考地址。</p><blockquote><p><strong>堆栈内存的解释</strong></p><p>数组操作中，在栈内存中保存的永远是数组的名称，只开辟了栈内存空间的数组是永远无法使用的，必须有指向的堆内存才可以使用，要想开辟新的堆内存则必须使用关键字new，然后只是将此堆内存的使用权交给了对应的栈内存空间，而且一个堆内存空间可以同时被多个栈内存空间所指向。</p></blockquote><p>另外，可以在声明数组的同时分配内存空间，其格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[] = new 数据类型[个数]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];  <span class="comment">//声明一个元素个数为10的整数数组score，同时开辟一块内存空间供其使用</span></span><br></pre></td></tr></table></figure><h3 id="数组中元素的表示方法"><a href="#数组中元素的表示方法" class="headerlink" title="数组中元素的表示方法"></a>数组中元素的表示方法</h3><p>若要访问数组中的元素，可以利用索引来完成，Java的数组索引编号由0开始，以score[10]整型数组为例，score[0]代表第一个元素，而score[9]代表第10个元素，也就是最后一个元素。</p><p>数组的声明及输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = <span class="keyword">null</span>;                            <span class="comment">// 声明数组，但未开辟堆内存空间</span></span><br><span class="line">        score = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];                            <span class="comment">// 为数组开辟堆内存空间</span></span><br><span class="line">        System.out.println(<span class="string">"score[0] = "</span> + score[<span class="number">0</span>]);  <span class="comment">// 分别输出每个元素</span></span><br><span class="line">        System.out.println(<span class="string">"score[1] = "</span> + score[<span class="number">1</span>]);  <span class="comment">// 分别输出每个元素</span></span><br><span class="line">        System.out.println(<span class="string">"score[2] = "</span> + score[<span class="number">2</span>]);  <span class="comment">// 分别输出每个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x++)&#123;                   <span class="comment">// 使用循环依此输出数组中的全部内容</span></span><br><span class="line">            System.out.println(<span class="string">"score["</span>+x+<span class="string">"] = "</span> + score[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">score[0] = 0</span><br><span class="line">score[1] = 0</span><br><span class="line">score[2] = 0</span><br><span class="line">score[0] = 0</span><br><span class="line">score[1] = 0</span><br><span class="line">score[2] = 0</span><br></pre></td></tr></table></figure><p>从运行结果可以看出，对于数组的访问采用“数组名称[下标]”的方式，之前一共开辟了3个空间大小的数组，所以下标的取值为0~2，如果超出了这个下标，例如score[3]，则会出现如下错误：<code>java.lang.ArrayIndexOutOfBoundsException:3</code>。</p><p>此外，可以发现以上数组中的内容都是0，这是因为声明的是整型数组，而此时又没有为整型数组中的内容赋值，所以现在都是默认值，整型的默认值为0。下面的范例将为数组中的元素进行赋值并输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = <span class="keyword">null</span>;</span><br><span class="line">        score = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x++)&#123;</span><br><span class="line">            score[x] = x * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"score["</span> + x + <span class="string">"] = "</span> + score[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">score[0] = 1</span><br><span class="line">score[1] = 3</span><br><span class="line">score[2] = 5</span><br></pre></td></tr></table></figure><p>在Java中取得数组的长度（也就是数组元素的长度）可以利用“数组名称.length”的形式，会返回一个int型数据。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(<span class="string">"数组长度为"</span> + score.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果为：<code>数组长度为3</code></p><h3 id="数组的静态初始化"><a href="#数组的静态初始化" class="headerlink" title="数组的静态初始化"></a>数组的静态初始化</h3><p>数组的内容分为<strong>动态初始化</strong>和<strong>静态初始化</strong>两种，之前所讲的代码是采用先声明数组之后为数组中的每个内容赋值的方式完成的，所以属于数组的动态初始化，也可以通过数组静态初始化，在数组声明时就指定其具体内容，只要在数组的声明格式后面加上初值的赋值即可，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[] = &#123;初值0，初值1，···，初值n&#125;</span><br></pre></td></tr></table></figure><p>在大括号内的初值会依此指定给数组的第1、···、n个元素。此外，在声明时，并不需要将数组元素的个数列出来，编译器根据所给出的初值个数来判断数组的长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; score.length; x++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"score["</span> + x + <span class="string">"] = "</span> + score[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">score[0] = 91</span><br><span class="line">score[1] = 92</span><br><span class="line">score[2] = 93</span><br><span class="line">score[3] = 94</span><br><span class="line">score[4] = 95</span><br><span class="line">score[5] = 96</span><br></pre></td></tr></table></figure><h3 id="数组应用范例"><a href="#数组应用范例" class="headerlink" title="数组应用范例"></a>数组应用范例</h3><ol><li><strong>求出数组中的最大和最小值</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">67</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">75</span>, <span class="number">90</span>&#125;;      <span class="comment">// 静态初始化数组</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;                                          <span class="comment">// 定义变量保存最大值</span></span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">0</span>;                                          <span class="comment">// 定义变量保存最小值</span></span><br><span class="line">        max = min = score[<span class="number">0</span>];                                 <span class="comment">// 把第一个元素的内容赋值给max和min</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; score.length; x++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (score[x] &gt; max)&#123;                              <span class="comment">// 依此判断后续元素是否比max大</span></span><br><span class="line">                max = score[x];                               <span class="comment">// 如果大，则修改max内容</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (score[x] &lt; min)&#123;                              <span class="comment">// 依此判断后续的元素是否比min小</span></span><br><span class="line">                min = score[x];                               <span class="comment">// 如果小，则修改min内容</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"最高成绩："</span> + max);               <span class="comment">// 输出最大值</span></span><br><span class="line">        System.out.println(<span class="string">"最低成绩："</span> + min);               <span class="comment">// 输出最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">最高成绩：100</span><br><span class="line">最低成绩：67</span><br></pre></td></tr></table></figure><p>本程序中，首先将数组的最大和最小值都当作数组中的第一个元素，然后用for循环依此和数组后面的元素比较，如果比当前的max值大，则将该值赋给max，如果比当前的min值小，则将该值赋给min，直到数组里的元素都比较完毕，max存储了数组中的最大值，min存储了数组里的最小值。</p><ol><li><strong>对整型数组按照由小到大的顺序进行排列</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">67</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">75</span>, <span class="number">90</span>&#125;;   <span class="comment">// 声明数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; score.length; i++)&#123;            <span class="comment">// 循环判断</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; score.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (score[i] &lt; score[j])&#123;                  <span class="comment">// 交换位置</span></span><br><span class="line">                    <span class="keyword">int</span> temp = score[i];</span><br><span class="line">                    score[i] = score[j];</span><br><span class="line">                    score[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; score.length; i++)&#123;</span><br><span class="line">            System.out.println(score[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：<code>67    69    75    87    89    90    90    100</code>。</p><p>以上程序采用了冒泡算法进行排序。即把数组中的每个元素进行比较，如果第i个元素大于第i+1个元素，那么就要把两个数字进行交换，这样反复的比较就可以将一个数组按照由大到小的顺序进行排序。</p><ol><li><strong>修改之前的代码，显示每次的排序结果</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">67</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">75</span>, <span class="number">90</span>&#125;;     <span class="comment">// 声明数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; score.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; score.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (score[i] &lt; score[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = score[i];</span><br><span class="line">                    score[i] = score[j];</span><br><span class="line">                    score[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">"第"</span>+i+<span class="string">"次排序的结果：\t"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; score.length; j++)&#123;          <span class="comment">// 循环输出</span></span><br><span class="line">                System.out.print(score[j] + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">""</span>);                         <span class="comment">// 换行</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">"最终的排序结果为：\t"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; score.length; i++)&#123;</span><br><span class="line">            System.out.print(score[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第1次排序的结果：67100876989907590</span><br><span class="line">第2次排序的结果：67871006989907590</span><br><span class="line">第3次排序的结果：67698710089907590</span><br><span class="line">第4次排序的结果：67698789100907590</span><br><span class="line">第5次排序的结果：67698789901007590</span><br><span class="line">第6次排序的结果：67697587899010090</span><br><span class="line">第7次排序的结果：67697587899090100</span><br><span class="line">最终的排序结果为：67697587899090100</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>二维数组的声明方式和一维数组类似，内存的分配也要使用关键字new完成，其声明与分配内存的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[][];</span><br><span class="line">数组名 = new 数据类型[][];</span><br></pre></td></tr></table></figure><p>与一维数组不同的是，二维数组在分配内存时，必须告诉编译器二维数组的行与列的个数，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score[][];           <span class="comment">// 声明整型数组score</span></span><br><span class="line">score = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];   <span class="comment">// 配置一块内存空间，供4行3列的整型数组score使用</span></span><br></pre></td></tr></table></figure><p>同样的，也可以利用较为简洁的声明和分配内存语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[][] = new 数据类型[行的个数][列的个数]</span><br></pre></td></tr></table></figure><p>二维数组的定义及使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];         <span class="comment">// 声明并实例化二维数组</span></span><br><span class="line">        score[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">30</span>;</span><br><span class="line">        score[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">31</span>;</span><br><span class="line">        score[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">32</span>;</span><br><span class="line">        score[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">33</span>;</span><br><span class="line">        score[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; score.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; score[i].length; j++)&#123;</span><br><span class="line">                System.out.print(score[i][j] + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0300</span><br><span class="line">31300</span><br><span class="line">0032</span><br><span class="line">0330</span><br></pre></td></tr></table></figure><p>可以看出，一维数组输出只需要使用一层循环，而二维数组全部输出则需要使用两层循环，同理，对于N维数组，则要使用N+1层循环。</p><p>二维数组也可以利用大括号进行静态初始化，只要在数组的声明格式后面再加上所赋的初值即可，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数组类型 数组名[][] = &#123;</span><br><span class="line">    &#123;第0行初值&#125;，</span><br><span class="line">    &#123;第1行初值&#125;，</span><br><span class="line">    ···</span><br><span class="line">    &#123;第n行初值&#125;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>要特别注意的是，用户不必定义数组的长度，因此，在数组名后面的中括号中不必填入任何内容。下面是二维数组声明及赋初值的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态初始化一个二维数组，每行的数组元素个数都不一样</span></span><br><span class="line">        <span class="keyword">int</span> score[][] = &#123;&#123;<span class="number">67</span>, <span class="number">61</span>&#125;, &#123;<span class="number">78</span>, <span class="number">89</span>, <span class="number">83</span>&#125;, &#123;<span class="number">99</span>, <span class="number">100</span>, <span class="number">98</span>, <span class="number">66</span>, <span class="number">95</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; score.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; score[i].length; j++)&#123;</span><br><span class="line">                System.out.print(score[i][j] + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6761</span><br><span class="line">788983</span><br><span class="line">99100986695</span><br></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>想要提高数组的维数，只要在声明数组时将索引与中括号再加一组即可，即三维数组的声明为<code>int score[][][]</code>，而四维数组的声明为<code>int score[][][][]</code>···，依此类推。使用多维数组时，输入、输出的方式和一维、二维数组相同，但是每多一维，嵌套循环的层数就必须多一层，所以维数越高的数组其复杂度也就越高。例如下面是三维数组的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个三维数组，使用静态初始化的方式</span></span><br><span class="line">        <span class="keyword">int</span> score[][][] = &#123;&#123;&#123;<span class="number">5</span>, <span class="number">1</span>&#125;, &#123;<span class="number">6</span>, <span class="number">7</span>&#125;&#125;, &#123;&#123;<span class="number">9</span>, <span class="number">4</span>&#125;, &#123;<span class="number">8</span>, <span class="number">3</span>&#125;&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; score.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; score[i].length; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; score[i][j].length; k++)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"score["</span> + i + <span class="string">"]["</span> + j + <span class="string">"]["</span> + k +<span class="string">"]="</span> + score[i][j][k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">score[0][0][0]=5</span><br><span class="line">score[0][0][1]=1</span><br><span class="line">score[0][1][0]=6</span><br><span class="line">score[0][1][1]=7</span><br><span class="line">score[1][0][0]=9</span><br><span class="line">score[1][0][1]=4</span><br><span class="line">score[1][1][0]=8</span><br><span class="line">score[1][1][1]=3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一维数组&quot;&gt;&lt;a href=&quot;#一维数组&quot; class=&quot;headerlink&quot; title=&quot;一维数组&quot;&gt;&lt;/a&gt;一维数组&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;数组&lt;/strong&gt;是一组相关数据的集合，一个数组实际上就是一连串的变量，数组按使用可以分为&lt;strong
      
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="Java基础" scheme="http://xiyouhujing.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java开发实战经典习题3.7</title>
    <link href="http://xiyouhujing.github.io/2019/03/21/Java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%BB%8F%E5%85%B8%E4%B9%A0%E9%A2%983-7/"/>
    <id>http://xiyouhujing.github.io/2019/03/21/Java开发实战经典习题3-7/</id>
    <published>2019-03-21T06:59:47.000Z</published>
    <updated>2019-03-21T12:27:02.733Z</updated>
    
    <content type="html"><![CDATA[<h4 id="打印出1-10000范围中所有的“水仙花数”，所谓“水仙花数”是指一个3位数，其各位数字立方和等于该数本身。例如，153就是一个“水仙花数”，因为153-（1的三次方-5的三次方-3的三次方）。"><a href="#打印出1-10000范围中所有的“水仙花数”，所谓“水仙花数”是指一个3位数，其各位数字立方和等于该数本身。例如，153就是一个“水仙花数”，因为153-（1的三次方-5的三次方-3的三次方）。" class="headerlink" title="打印出1~10000范围中所有的“水仙花数”，所谓“水仙花数”是指一个3位数，其各位数字立方和等于该数本身。例如，153就是一个“水仙花数”，因为153=（1的三次方+5的三次方+3的三次方）。"></a>打印出1~10000范围中所有的“水仙花数”，所谓“水仙花数”是指一个3位数，其各位数字立方和等于该数本身。例如，153就是一个“水仙花数”，因为153=（1的三次方+5的三次方+3的三次方）。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">首先“水仙花数”是一个三位数，所以题目给的1~10000的范围是比较大的，可以缩小为100~999，另外需要明白这题需要用到循环结构，一次验证范围内的3位数是为“水仙花数”，我们可以采用while、do···while以及for循环中的任意一种，这里采用的是for循环。本题 一个难点是如何提取个十百位的数，我们可以采用取余算法（%）。然后用if语句判断该数是否为“水仙化数”，是就打印，不是就再执行for循环验证下一个数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> m = i % <span class="number">10</span>;            <span class="comment">// 取个位数</span></span><br><span class="line">            <span class="keyword">int</span> n = (i / <span class="number">10</span>) % <span class="number">10</span>;     <span class="comment">// 取十位数</span></span><br><span class="line">            <span class="keyword">int</span> h = i / <span class="number">100</span>;           <span class="comment">// 取百位数</span></span><br><span class="line">            <span class="keyword">if</span> (i == m * m * m + n * n * n + h * h * h)&#123;    <span class="comment">// 验证是否为水仙花数</span></span><br><span class="line">                System.out.println(i + <span class="string">"是水仙花数"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">153是水仙花数</span><br><span class="line">370是水仙花数</span><br><span class="line">371是水仙花数</span><br><span class="line">407是水仙花数</span><br></pre></td></tr></table></figure><h4 id="通过代码完成两个整数内容的交换"><a href="#通过代码完成两个整数内容的交换" class="headerlink" title="通过代码完成两个整数内容的交换"></a>通过代码完成两个整数内容的交换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"交换之前的内容："</span> + <span class="string">"a = "</span> + a + <span class="string">"，b = "</span> + b);</span><br><span class="line">        a = a + b;</span><br><span class="line">        b = a - b;</span><br><span class="line">        a = a - b;</span><br><span class="line">        System.out.println(<span class="string">"交换之后的内容："</span> + <span class="string">"a = "</span> + a + <span class="string">"，b = "</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">交换之前的内容：a = 10，b = 5</span><br><span class="line">交换之后的内容：a = 5，b = 10</span><br></pre></td></tr></table></figure><h4 id="给定3个数字，求出这3个数字中的最大值，并将最大值输出"><a href="#给定3个数字，求出这3个数字中的最大值，并将最大值输出" class="headerlink" title="给定3个数字，求出这3个数字中的最大值，并将最大值输出"></a>给定3个数字，求出这3个数字中的最大值，并将最大值输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>, b = <span class="number">5</span>, c = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        max = a &gt; b ? (a &gt; c ? a : c) : (b &gt; c ? b : c);</span><br><span class="line">        System.out.println(<span class="string">"最大值为："</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最大值为：5</span><br></pre></td></tr></table></figure><h4 id="判断某数能否被3、5、7同时整除"><a href="#判断某数能否被3、5、7同时整除" class="headerlink" title="判断某数能否被3、5、7同时整除"></a>判断某数能否被3、5、7同时整除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">105</span>;</span><br><span class="line">        <span class="keyword">if</span> (num%<span class="number">3</span>==<span class="number">0</span> &amp;&amp; num%<span class="number">5</span>==<span class="number">0</span> &amp;&amp; num%<span class="number">7</span>==<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(num + <span class="string">"能被3、5、7同时整除"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(num + <span class="string">"不能被3、5、7同时整除"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">105能被3、5、7同时整除</span><br></pre></td></tr></table></figure><h4 id="变写程序，分别利用while循环、do···while循环和for循环求出100-200的累加和。"><a href="#变写程序，分别利用while循环、do···while循环和for循环求出100-200的累加和。" class="headerlink" title="变写程序，分别利用while循环、do···while循环和for循环求出100~200的累加和。"></a>变写程序，分别利用while循环、do···while循环和for循环求出100~200的累加和。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">while循环求100~200的累加和</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_5_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">200</span>)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"100~200的累加和为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">do···while循环求100~200的累加和。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_5_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">while</span> (i &lt;= <span class="number">200</span>);</span><br><span class="line">        System.out.println(<span class="string">"100~200的累加和为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">for循环求100~200的累加和。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_5_3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"100~200的累加和为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写程序Java程序，求13-23-33-43-···-973-983-993-1003的值"><a href="#编写程序Java程序，求13-23-33-43-···-973-983-993-1003的值" class="headerlink" title="编写程序Java程序，求13-23+33-43+···+973-983+993-1003的值"></a>编写程序Java程序，求13-23+33-43+···+973-983+993-1003的值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3_6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">13</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt;= <span class="number">1003</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                sum += x;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                sum -= x;</span><br><span class="line">            &#125;</span><br><span class="line">            x += <span class="number">10</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"3-23+33-43+···+973-983+993-1003 = "</span> + sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3-23+33-43+···+973-983+993-1003 = -500</span><br></pre></td></tr></table></figure><h4 id="编写一个程序，实现两个数字的交换。"><a href="#编写一个程序，实现两个数字的交换。" class="headerlink" title="编写一个程序，实现两个数字的交换。"></a>编写一个程序，实现两个数字的交换。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这一题我理解为交换两位数的个位和十位。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3_7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">35</span>;</span><br><span class="line">        <span class="keyword">int</span> n = a % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> m = a / <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"交换后的数字为："</span> + (n*<span class="number">10</span>+m));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写一个程序求3个数中的最大值"><a href="#编写一个程序求3个数中的最大值" class="headerlink" title="编写一个程序求3个数中的最大值"></a>编写一个程序求3个数中的最大值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参考第三题</span><br></pre></td></tr></table></figure><h4 id="编写一个程序，实现1-100的累加"><a href="#编写一个程序，实现1-100的累加" class="headerlink" title="编写一个程序，实现1~100的累加"></a>编写一个程序，实现1~100的累加</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3_9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"1~100的累加和为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求1-1000之间可以同时被3、5、7整除的数字。"><a href="#求1-1000之间可以同时被3、5、7整除的数字。" class="headerlink" title="求1~1000之间可以同时被3、5、7整除的数字。"></a>求1~1000之间可以同时被3、5、7整除的数字。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3_10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">3</span>==<span class="number">0</span> &amp;&amp; i%<span class="number">5</span>==<span class="number">0</span> &amp;&amp; i%<span class="number">7</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编程求1-2-3-···-20-的值。"><a href="#编程求1-2-3-···-20-的值。" class="headerlink" title="编程求1!+2!+3!+···+20!的值。"></a>编程求1!+2!+3!+···+20!的值。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">此处需要注意，阶乘是很大的数，所以不能按常规设定阶乘pro和阶乘累加和sum为int型，范围可能不够大，所以设为long型数据。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3_11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> pro = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)&#123;</span><br><span class="line">            pro *= i;     <span class="comment">// 计算每项的阶乘</span></span><br><span class="line">            sum += pro;   <span class="comment">// 计算每项阶乘的累加和</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"1!+2!+3!+...+20! = "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1!+2!+3!+...+20! = 2561327494111820313</span><br></pre></td></tr></table></figure><h4 id="使用for循环打印由-组成的三角形，三角形每行的星数和行数相等"><a href="#使用for循环打印由-组成的三角形，三角形每行的星数和行数相等" class="headerlink" title="使用for循环打印由*组成的三角形，三角形每行的星数和行数相等"></a>使用for循环打印由*组成的三角形，三角形每行的星数和行数相等</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3_12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">4</span>-i; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);      <span class="comment">// 注意print为不换行输出</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">"* "</span>);     <span class="comment">// print不换行输出，注意星号后面还需要打印一个空格，不然三角形不对称</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"  "</span>);       <span class="comment">// println换行输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行的结果如图：</p><p><img src="//xiyouhujing.github.io/2019/03/21/Java开发实战经典习题3-7/三角形.png" alt="三角形"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;打印出1-10000范围中所有的“水仙花数”，所谓“水仙花数”是指一个3位数，其各位数字立方和等于该数本身。例如，153就是一个“水仙花数”，因为153-（1的三次方-5的三次方-3的三次方）。&quot;&gt;&lt;a href=&quot;#打印出1-10000范围中所有的“水仙花数”，
      
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="Java练习" scheme="http://xiyouhujing.github.io/tags/Java%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java选择和循环语句</title>
    <link href="http://xiyouhujing.github.io/2019/03/18/Java%E9%80%89%E6%8B%A9%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <id>http://xiyouhujing.github.io/2019/03/18/Java选择和循环语句/</id>
    <published>2019-03-18T03:14:09.000Z</published>
    <updated>2019-03-21T03:32:24.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序的结构"><a href="#程序的结构" class="headerlink" title="程序的结构"></a>程序的结构</h2><p>一般来说程序的结构可以分为<strong>顺序结构</strong>、<strong>选择结构</strong>以及<strong>循环结构</strong>三种，这三种结构只有一个共同点，就是它们只有一个入口，也只有一个出口，这些单一的入、出口可以让程序易读、好维护，也可以减少调试时间。</p><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>顺序结构下的程序至上而下的逐条执行，一条语句执行完之后继续执行下一条语句，一直到程序的末尾，其结构如下图所示：</p><p><img src="//xiyouhujing.github.io/2019/03/18/Java选择和循环语句/程序的顺序结构流程图.png" alt="程序的顺序结构流程图"></p><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><p>选择结构的流程图如下，这种结构可以依据判断条件的结构来决定要执行的语句，当判断条件的值为真时，就运行语句1；当判断的条件为假，则执行语句2。不论执行哪一句，最后都会回到语句3继续执行。选择结构的流程图如下：</p><p><img src="//xiyouhujing.github.io/2019/03/18/Java选择和循环语句/程序的选择结构流程图.png" alt="程序的选择结构流程图"></p><p>验证选择结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"======比较开始====="</span>);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y)&#123;</span><br><span class="line">            System.out.println(<span class="string">"x比y大！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; y)&#123;</span><br><span class="line">            System.out.println(<span class="string">"x比y小！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"=====比较完成====="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">======比较开始=====</span><br><span class="line">x比y小！</span><br><span class="line">=====比较完成=====</span><br></pre></td></tr></table></figure><p>选择结构包括if、if···else及switch语句。</p><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p>要根据判断的结果来执行不同的语句时，使用if语句是一个很好的选择，它会准确地判断条件成立与否，再决定是否要执行后面的语句。if语句的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (判断条件) &#123;</span><br><span class="line">    语句1;</span><br><span class="line">    ···</span><br><span class="line">    语句2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当判断条件的值不满足时（true），就会逐一执行大括号里面所有的语句，否则执行大括号外的语句。</p><h4 id="if···else语句"><a href="#if···else语句" class="headerlink" title="if···else语句"></a>if···else语句</h4><p>当程序中存在含有分支的判断语句时，就可以用if···else语句处理，当判断条件成立时，即执行if语句主题；判断条件不成立时，则会执行else后面的语句主题。if···else语句的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (判断条件) &#123;</span><br><span class="line">    语句主体1;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    语句主体2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，通过if···else语句判断一个数字是奇数还是偶数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"x是基数！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"x是偶数！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><p>三目运算符可以等价于使用if···else进行变量赋值的语句。如下表所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center">三目运算符</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">?:</td><td style="text-align:center">根据条件的成立与否来决定结果为“：”前或者“：”后的表达式</td></tr></tbody></table></div><p>三目运算符的使用格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 = 条件判断?表达式1:表达式2</span><br></pre></td></tr></table></figure><p>该语句的意思是，当条件成立时执行表达式1，否则执行表达式2，通常会将这两个表达式之一的运算结果指定给某个变量，用if···else表示为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (条件判断)&#123;</span><br><span class="line">    变量x = 表达式1;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    变量x = 表达式2；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，使用三目运算符求出两个数字中的最大值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">        max = x &gt; y ? x:y;</span><br><span class="line">        System.out.println(<span class="string">"最大值为："</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if···else-if···else语句"><a href="#if···else-if···else语句" class="headerlink" title="if···else if···else语句"></a>if···else if···else语句</h4><p>如果需要在if···else中判断多个条件时，就需要if···else if···else语句了，其格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (条件判断1) &#123;</span><br><span class="line">    语句主体1;</span><br><span class="line">&#125;else if (条件判断2) &#123;</span><br><span class="line">    语句主体2;</span><br><span class="line">&#125;</span><br><span class="line">···     // 多个else if()语句</span><br><span class="line">else&#123;</span><br><span class="line">    语句主体3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoreIfElseDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (x ==<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"x的值是1！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"x的值是2！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">3</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"x的值是3！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"x的值不是1、2、3中的一个！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p>switch语句可以将多选一的情况简化，使程序简洁易懂，使用嵌套if···else语句最常发生的状况就是容易将if与else配对混淆，从而造成阅读及运行上的错误，而使用switch语句则可以避免这种错误发生，switch语句的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">switch (表达式) &#123;</span><br><span class="line">    case 选择值1:语句主体1;</span><br><span class="line">                   break；</span><br><span class="line">    case 选择值2:语句主体2：</span><br><span class="line">                   break;</span><br><span class="line">    ……</span><br><span class="line">    case 选择值n:语句主体n;</span><br><span class="line">                   break;</span><br><span class="line">    default:       语句主体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特别注意的是，在switch语句中选择值只能是字符或常量，在JDK 1.5之后，switch也支持枚举类的判断。</p><p>switch语句执行的流程如下：</p><p>（1） switch语句先计算括号内的表达式结果，结果是数字、字符或者枚举。</p><p>（2）根据表达式的值检测是否符合case后面的选择值，若是所有case的选择值皆不符合，则执行default所包含的语句，执行完毕即离开switch语句。</p><p>（3）如果某个case的选择值符合表达式的结果，就会执行该case所包含的语句，一直遇到break语句后才离开switch语句</p><p>（4）如果没有在case语句结尾处加上break语句，则会一直执行到switch语句的尾端才离开switch语句。</p><p>（5）若是没有定义default执行语句，则什么都不会执行，直接退出switch语句。</p><p>根据以上描述，绘制如下的switch语句的流程图：</p><p><img src="//xiyouhujing.github.io/2019/03/18/Java选择和循环语句/switch语句的流程图.png" alt="switch语句的流程图"></p><p>以下程序验证了switch语句的作用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">char</span> oper = <span class="string">'+'</span>;</span><br><span class="line">        <span class="keyword">switch</span> (oper)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:&#123;</span><br><span class="line">                System.out.println(<span class="string">"x + y ="</span> + (x + y));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:&#123;</span><br><span class="line">                System.out.println(<span class="string">"x - y = "</span> + (x - y));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:&#123;</span><br><span class="line">                System.out.println(<span class="string">"x * y = "</span> + (x * y));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:&#123;</span><br><span class="line">                System.out.println(<span class="string">"x / y = "</span> + (x / y));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:&#123;</span><br><span class="line">                System.out.println(<span class="string">"未知操作！"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果为：<code>x + y = 9</code></p><blockquote><p><strong>break语句的作用</strong></p><p>从以上程序可以发现，在每一个case语句后面都加上了break语句，如果不加，则switch语句会从第一个满足条件的case开始依此执行操作，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo02</span> </span>&#123;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;         <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">&gt;         <span class="keyword">int</span> y = <span class="number">6</span>;</span><br><span class="line">&gt;         <span class="keyword">char</span> oper = <span class="string">'+'</span>;</span><br><span class="line">&gt;         <span class="keyword">switch</span> (oper)&#123;</span><br><span class="line">&gt;             <span class="keyword">case</span> <span class="string">'+'</span>:&#123;</span><br><span class="line">&gt;                 System.out.println(<span class="string">"x + y ="</span> + (x + y));</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             <span class="keyword">case</span> <span class="string">'-'</span>:&#123;</span><br><span class="line">&gt;                 System.out.println(<span class="string">"x - y ="</span> + (x - y));</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             <span class="keyword">case</span> <span class="string">'*'</span>:&#123;</span><br><span class="line">&gt;                 System.out.println(<span class="string">"x * y ="</span> + (x * y));</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             <span class="keyword">case</span> <span class="string">'/'</span>:&#123;</span><br><span class="line">&gt;                 System.out.println(<span class="string">"x / y ="</span> + (x / y));</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             <span class="keyword">default</span>:&#123;</span><br><span class="line">&gt;                 System.out.println(<span class="string">"未知操作！"</span>);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>最后得到的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; x + y =9</span><br><span class="line">&gt; x - y =-3</span><br><span class="line">&gt; x * y =18</span><br><span class="line">&gt; x / y =0</span><br><span class="line">&gt; 未知操作！</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>从运行的结果可以发现，程序在满足第一个条件后，由于没有设置break语句，所以从第一个满足条件的语句case开始依此向后继续执行，知道最后一个条件执行完毕。</p></blockquote><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while是循环语句，也是判断语句，当事前不知道循环执行多少次时，就要用while循环，其格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while (循环条件判断)&#123;</span><br><span class="line">    语句1;</span><br><span class="line">    语句2;</span><br><span class="line">    ···</span><br><span class="line">    语句n;</span><br><span class="line">    循环条件改变；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在while循环语句中，只有一个判断条件，当判断条件为真时，循环就会执行一次，再重复测试判断条件，执行循环主体，知道判断条件为假，才会跳出while循环。下面是while循环的流程及流程图：</p><p>（1）第一次进入while循环前，必须先为循环控制变量（或表达式）赋起始值。</p><p>（2）根据判断条件的内容决定是否要继续执行循环，如果条件判断值为真（true），继续执行循环主体，若条件判断值为假（false），则跳出循环执行其他语句。</p><p>（3）执行完循环主体内的语句后，重新为循环控制变量（或表达式）赋值（增加或者减少），由于while循环不会自动更改循环控制变量（或表达式）的内容，所以while循环中为循环控制变量赋值的工作要自己来做，完成后再回到步骤（2）重新判断是否继续执行循环。</p><p><img src="//xiyouhujing.github.io/2019/03/18/Java选择和循环语句/while循环流程图.png" alt="while循环流程图"></p><p>使用while循环进行累加操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"1--&gt;10累加结果为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：<code>1--&gt;10累加结果为：55</code></p><p>如果程序中没有修改循环条件（x++），那么程序将出现“死循环”的情况。</p><h4 id="do···while循环"><a href="#do···while循环" class="headerlink" title="do···while循环"></a>do···while循环</h4><p>do···while循环也是用于未知循环执行次数的情况，而while循环及do···while循环最大的不同就是进入while循环前，while语句会先测试判断条件的真假，再决定是否执行循环主体，而do···while循环则是每次都是先执行一次循环主体，然后再测试判断条件的真假，<strong>所以无论循环成立的条件是什么，使用do···while循环时，至少都会执行一次循环主体</strong>。do···while循环的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">    语句1;</span><br><span class="line">    语句2;</span><br><span class="line">    ···</span><br><span class="line">    语句n;</span><br><span class="line">    循环条件改变;</span><br><span class="line">&#125;while(循环条件判断)</span><br></pre></td></tr></table></figure><p>下面描述的do···while循环的流程及流程图：</p><p>（1）进入do···while循环前，要先为循环控制变量（或表达式）赋起始值。</p><p>（2）直接执行循环主体，循环主体执行完毕，才开始根据判断条件的内容决定是否继续执行循环，条件为真（true）时，继续执行循环主体；条件为假（false）时，则跳出循环，执行其他语句。</p><p>（3）执行完循环主体内的语句后，重新为循环控制变量（或表达式）赋值（增加或减少），由于do···while循环和while循环一样，不会自动更改循环控制变量（或表达式）的内容，所以在do···while循环中赋值循环控制变量的工作要由自己来做，然后再回到步骤（2）重新判断是否继续执行循环。</p><p><img src="//xiyouhujing.github.io/2019/03/18/Java选择和循环语句/do···while循环流程图.png" alt="do···while循环流程图"></p><p>使用while循环进行累加操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;<span class="keyword">while</span> (x &lt;= <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"1--&gt;10累加结果为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果为：<code>1--&gt;10累加结果为：55</code></p><p>从程序的运行结果来看，while和do···while的结果是一样的，但是do···while与while循环不同的是do···while操作中就算条件不满足，也至少会执行一次，而while如果条件不满足，则一次也不会被执行。</p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>对于while和do···while两种循环来讲，操作时并不一定要明确地知道循环次数，而如果开发者已经明确地知道了循环次数，那么就可以使用另一种循环语句——for循环。for循环的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(赋值初值；判断条件；赋值增减量)&#123;</span><br><span class="line">    语句1;</span><br><span class="line">    ···</span><br><span class="line">    语句n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是for循环的流程和流程图：</p><p>（1）第一次进入for循环时，要为循环控制变量赋起始值。</p><p>（2）根据判断条件的内容检查是否继续执行循环，当判断条件为真（true）时，继续执行循环主体内的语句；判断条件为假（false）时，则会跳出循环，执行其他语句。</p><p>（3）执行完循环主体内的语句后，循环控制变量会根据增减量的要求更改循环控制变量的值，然后再回到步骤（2）重新判断是否继续执行循环。</p><p><img src="//xiyouhujing.github.io/2019/03/18/Java选择和循环语句/for循环流程图.png" alt="for循环流程图"></p><p>使用for循环进行累加操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= <span class="number">10</span>; x++)&#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"1--&gt;10累加结果为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果依旧如下：<code>1--&gt;10累加结果为：55</code></p><h4 id="循环的嵌套"><a href="#循环的嵌套" class="headerlink" title="循环的嵌套"></a>循环的嵌套</h4><p>多个循环语句是可以嵌套操作的，例如下面要打印一个九九乘法表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForNestedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++)&#123;</span><br><span class="line">                System.out.println(i + <span class="string">"*"</span> + j + <span class="string">"="</span> + (i * j) + <span class="string">"\t"</span>);   <span class="comment">// “\t”制表</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"\n"</span>);      <span class="comment">// 换行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序说明：</p><p>（1）i为外层循环的循环控制变量，j为内层循环的循环控制变量。</p><p>（2）当i为1时，符合外层for循环的判断条件（i&lt;9），进入另一个内层for循环体，由于是第一次进入内层循环，所以j的初值为1，符合内层for循环的判断条件（j&lt;=i）进入循环主体，输入i<em>j的值（1\</em>1=1），如果最后j的值任符合内层for循环的判断条件（j&lt;=i），则再次执行计算与输出的工作，直到j的值大于i时，离开内层for循环，回到外层循环。此时，i会加1成为2，符合外层for循环的判断条件，继续执行内层for循环主体，直到i的值大于9时离开嵌套循环。</p><h2 id="循环的中断"><a href="#循环的中断" class="headerlink" title="循环的中断"></a>循环的中断</h2><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>break语句可以强迫程序中断循环，当程序执行到break语句时，即会离开循环，继续执行循环外的下一个语句，如果break语句出现在嵌套循环中的内层循环，则break语句只会跳出当前层的循环。下面用for循环为例，描述break语句的格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for (初值赋值；判断条件；设增减量)&#123;</span><br><span class="line">    语句1；</span><br><span class="line">    语句2；</span><br><span class="line">    ···</span><br><span class="line">    break；</span><br><span class="line">    ···      // 若执行break语句，则此块的语句将不会被执行</span><br><span class="line">    语句n；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BreakDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"i ="</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i =0</span><br><span class="line">i =1</span><br><span class="line">i =2</span><br></pre></td></tr></table></figure><p>从结果可以看出，当i=3时，判断语句满足，则执行了break语句跳出了整个循环，因此没有输出i=3。</p><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p>continue语句可以强迫程序跳到循环的起始处，当程序运行到continue语句时，会停止运行剩余的循环主体，而是回到循环的开始处继续运行。下面以for循环为例，描述continue语句的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for (初值赋值；判断条件；设增减量)&#123;</span><br><span class="line">    语句1；</span><br><span class="line">    语句2；</span><br><span class="line">    ···</span><br><span class="line">    continue</span><br><span class="line">    ···   // 若执行continue语句，则此处将不会被执行</span><br><span class="line">    语句n；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContinueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"i = "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i = 0</span><br><span class="line">i = 1</span><br><span class="line">i = 2</span><br><span class="line">i = 4</span><br><span class="line">i = 5</span><br><span class="line">i = 6</span><br><span class="line">i = 7</span><br><span class="line">i = 8</span><br><span class="line">i = 9</span><br></pre></td></tr></table></figure><p>从结果中可以发现，当i的值为3时，程序并没有输出，而是退回了循环判断处继续向下执行，所以continue只是中断了一次的循环操作。</p><blockquote><p>另外，在循环语句中定义的变量属于局部变量，所谓的局部变量是指此变量只能在循环语句中使用，而在循环语句之外则无法使用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;程序的结构&quot;&gt;&lt;a href=&quot;#程序的结构&quot; class=&quot;headerlink&quot; title=&quot;程序的结构&quot;&gt;&lt;/a&gt;程序的结构&lt;/h2&gt;&lt;p&gt;一般来说程序的结构可以分为&lt;strong&gt;顺序结构&lt;/strong&gt;、&lt;strong&gt;选择结构&lt;/strong&gt;以及
      
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="java基础" scheme="http://xiyouhujing.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java中的运算符</title>
    <link href="http://xiyouhujing.github.io/2019/03/16/Java%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://xiyouhujing.github.io/2019/03/16/Java中的运算符/</id>
    <published>2019-03-16T12:01:55.000Z</published>
    <updated>2019-03-30T08:14:43.618Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java中的运算符"><a href="#Java中的运算符" class="headerlink" title="Java中的运算符"></a>Java中的运算符</h3><p>表达式时Java的一种语句，它由<strong>操作数</strong>和<strong>操作符</strong>组成，操作数可以是常量、变量，也可以是方法，而运算符就是数学中的运算符号，如“+”、“-”、“*”、“/”等，在表达式（z+100）中，z和100都是操作数，“+”就是运算符。</p><p>Java提供了很多运算符，这些运算符除了做一般的数学运算之外，还可以做逻辑运算、位运算等。根据所使用类的不同，运算符可以分为<strong>赋值运算符</strong>、<strong>算术运算符</strong>、<strong>逻辑运算符</strong>、<strong>条件运算符</strong>以及<strong>括号运算符</strong>。</p><h3 id="赋值运算符号"><a href="#赋值运算符号" class="headerlink" title="赋值运算符号"></a>赋值运算符号</h3><p>想为各种不同数据类型的变量赋值时，就需要使用赋值运算符（=），等号（=）在Java中不是“等于”的意思，二十“赋值”的意思，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">22</span>;</span><br><span class="line">        System.out.println(<span class="string">"第一次输出：num = "</span> + num);</span><br><span class="line">        num = num - <span class="number">3</span>;</span><br><span class="line">        System.out.println(<span class="string">"第二次输出：num = "</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第五行中，把num-3的值赋给了num，所以程序运行的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一次输出：num = 22</span><br><span class="line">第二次输出：num = 19</span><br></pre></td></tr></table></figure><p>当然，也可以将等号后面的值赋给其他变量，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = num1 + num2;   <span class="comment">// num1与num2相加之后的值再赋给变量sum存放</span></span><br></pre></td></tr></table></figure><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><p>对于大部分表达式而言，运算符的前后都有操作数，但是一元运算符比较特别，它只需要一个操作数。下表列出了一元运算符的成员：</p><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">一元运算符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">+</td><td style="text-align:center">正号</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">-</td><td style="text-align:center">负号</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">!</td><td style="text-align:center">NOT，否</td></tr></tbody></table></div><p>下面程序演示了3种一元运算符的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">false</span>;                                 <span class="comment">// 定义boolean型数据</span></span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">10</span>;                                        <span class="comment">// 定义一个正数</span></span><br><span class="line">        <span class="keyword">int</span> y = -<span class="number">30</span>;                                       <span class="comment">// 定义一个负数</span></span><br><span class="line">        System.out.println(<span class="string">"b = "</span> + b + <span class="string">", !b = "</span> + !b);   <span class="comment">// 取反</span></span><br><span class="line">        System.out.println(<span class="string">"x = "</span> + x + <span class="string">", -x = "</span> + -x);   <span class="comment">// 使用负号</span></span><br><span class="line">        System.out.println(<span class="string">"y = "</span> + y + <span class="string">", +y = "</span> + +y);   <span class="comment">// 使用正号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = false, !b = true</span><br><span class="line">x = 10, -x = -10</span><br><span class="line">y = -30, +y = -30</span><br></pre></td></tr></table></figure><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>常用的算术运算符如下表：</p><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">算术运算符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">+</td><td style="text-align:center">加法</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">-</td><td style="text-align:center">减法</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">*</td><td style="text-align:center">乘法</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">/</td><td style="text-align:center">除法</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">%</td><td style="text-align:center">取模（取余数）</td></tr></tbody></table></div><p>程序中的运用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">3</span>;</span><br><span class="line">        System.out.println(i + <span class="string">"+"</span> + j + <span class="string">"="</span> + (i + j));   <span class="comment">// 加法操作</span></span><br><span class="line">        System.out.println(i + <span class="string">"-"</span> + j + <span class="string">"="</span> + (i - j));   <span class="comment">// 减法操作</span></span><br><span class="line">        System.out.println(i + <span class="string">"*"</span> + j + <span class="string">"="</span> + (i * j));   <span class="comment">// 乘法操作</span></span><br><span class="line">        System.out.println(i + <span class="string">"/"</span> + j + <span class="string">"="</span> + (i / j));   <span class="comment">// 除法操作</span></span><br><span class="line">        System.out.println(i + <span class="string">"%"</span> + j + <span class="string">"="</span> + (i % j));   <span class="comment">// 取模操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">10+3=13</span><br><span class="line">10-3=7</span><br><span class="line">10*3=30</span><br><span class="line">10/3=3</span><br><span class="line">10%3=1</span><br></pre></td></tr></table></figure><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>Java中经常会在if语句中使用关系运算符，具体格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (布尔表达式)&#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果括号中的布尔表达式成立，就会执行{}中的语句；若是布尔表达式不成立了，则语句不会执行。常用的关系运算符如下表所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">关系运算符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">&gt;=</td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">&lt;=</td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">==</td><td style="text-align:center">等于</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">!=</td><td style="text-align:center">不等于</td></tr></tbody></table></div><p>需要注意的是，赋值运算符为等号（=），为了避免混淆，当使用关系运算符“等于”时，必须使用两个等号（==）表示。关系运算符在if语句中的使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">5</span> &gt; <span class="number">2</span>)&#123;                                       <span class="comment">// 判断5是否大于2</span></span><br><span class="line">            System.out.println(<span class="string">"条件成立：5大于2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>)&#123;                                        <span class="comment">// 判断是否为真</span></span><br><span class="line">            System.out.println(<span class="string">"直接写的true"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">3</span> + <span class="number">6</span>) == (<span class="number">3</span> - <span class="number">6</span>)) &#123;                         <span class="comment">// 判断计算结果内容是否相等</span></span><br><span class="line">            System.out.println(<span class="string">"这是不可能成立的！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">条件成立：5大于2</span><br><span class="line">直接写的true</span><br></pre></td></tr></table></figure><p>可以看到程序中最后一个if语句内的内容没有执行，因为if语句中的条件满足了，才会执行if中的内容，否则不执行。另外如果if语句之中只有一条语句，那么可以不用写“{}”，但是不建议这么写。</p><h3 id="自增与自减运算符"><a href="#自增与自减运算符" class="headerlink" title="自增与自减运算符"></a>自增与自减运算符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">自增与自减运算符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">++</td><td style="text-align:center">自增，变量值加1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">—</td><td style="text-align:center">自减，变量值减1</td></tr></tbody></table></div><p>用自增与自减运算符可以使程序更加简洁欸，例如，声明一个int类型的变量a，在程序运行中想让它加1，语句如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a+<span class="number">1</span>;   <span class="comment">// a加1后再赋值给a</span></span><br></pre></td></tr></table></figure><p>将a的值加1后再赋给a存放，也可以利用自增运算符“++”写出语义相同但是语句更简洁的语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a++;   <span class="comment">// a加1后再赋值给a存放，语句更简洁</span></span><br></pre></td></tr></table></figure><p>在程序中还可以看到另一种自增运算符“++”的用法，就是将自增运算符“++”写在变量的前面，如++a，这就和a++所表示的意义完全不一样。a++会先执行整个语句后再将a的值加1，而++b则先把b的值加1后，再执行整个语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>, b = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">6</span>, y = <span class="number">6</span>;</span><br><span class="line">        System.out.println(<span class="string">"a = "</span> + a);                            <span class="comment">// 输出变量a的值</span></span><br><span class="line">        System.out.println(<span class="string">"\t a++ = "</span> + (a++) + <span class="string">", a = "</span> + a);    <span class="comment">// 先执行后自增</span></span><br><span class="line">        System.out.println(<span class="string">"b = "</span> + b);                            <span class="comment">// 输出变量b的值</span></span><br><span class="line">        System.out.println(<span class="string">"\t ++b = "</span> + (++b) + <span class="string">", b = "</span> + b);    <span class="comment">// 先自增后执行</span></span><br><span class="line">        System.out.println(<span class="string">"x = "</span> + x);                            <span class="comment">// 输出变量x的值</span></span><br><span class="line">        System.out.println(<span class="string">"\t x-- = "</span> + (x--) + <span class="string">", x = "</span> + x);    <span class="comment">// 先执行后自减</span></span><br><span class="line">        System.out.println(<span class="string">"y = "</span> + y);                            <span class="comment">// 输出变量y的值</span></span><br><span class="line">        System.out.println(<span class="string">"\t --y = "</span> + (--y) + <span class="string">", y = "</span> + y);    <span class="comment">// 先自减后执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = 3</span><br><span class="line"> a++ = 3, a = 4</span><br><span class="line">b = 3</span><br><span class="line"> ++b = 4, b = 4</span><br><span class="line">x = 6</span><br><span class="line"> x-- = 6, x = 5</span><br><span class="line">y = 6</span><br><span class="line"> --y = 5, y = 5</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>使用逻辑运算符可以连接多个逻辑运算，常用的逻辑运算符如下表：</p><div class="table-container"><table><thead><tr><th>序号</th><th>逻辑运算符</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>&amp;</td><td>AND，与</td></tr><tr><td>2</td><td>&amp;&amp;</td><td>短路与</td></tr><tr><td>3</td><td>&#124;</td><td>OR，或</td></tr><tr><td>4</td><td>&#124;&#124;</td><td>短路或</td></tr></tbody></table></div><p>当使用逻辑运算符“&amp;&amp;”时，运算符前后的两个操作数的返回值皆为真，运算的结果才会为真；使用逻辑运算“||”时，运算符前后的两个操作数的返回值只要有一个为真，运算结果就为真。并存在以下规律：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> a = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(<span class="string">"a || b = "</span> + (a || b));</span><br><span class="line">        System.out.println(<span class="string">"a | b = "</span> + (a | b));</span><br><span class="line">        System.out.println(<span class="string">"a &amp;&amp; b = "</span> + (a &amp;&amp; b));</span><br><span class="line">        System.out.println(<span class="string">"a &amp; b = "</span> + (a &amp; b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a || b = true</span><br><span class="line">a | b = true</span><br><span class="line">a &amp;&amp; b = false</span><br><span class="line">a &amp; b = false</span><br></pre></td></tr></table></figure><p>根据对逻辑操作理解，可以总结以下规律：</p><ul><li>对于与操作来说，如果第一个条件为假，后面的条件不管是真是假，最终的结果都是假。</li><li>对于或操作来说，如果第一个条件为真，后面的条件不管是真是假，最终的结果都是真。</li></ul><p>也就是说，对于与和或来说，最先满足的条件就是一个关键性的条件，所以在Java中设置了短路与和短路或，对于短路与和与、短路或和或有以下区别：</p><ul><li>对于与来说，要求所有的条件都判断，而如果使用短路与，第一个条件又为false，则后面的条件不需要再判断。</li><li>对于或来说，要求所有的条件都判断，而如果使用短路或，第一个条件又为true，则后面的条件不需要再判断。</li></ul><p>下面通过三段代码来理解以上两点：</p><ul><li>测试代码（一）：观察被除数为0的情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">10</span> / <span class="number">0</span>;                    </span><br><span class="line">        System.out.println(<span class="string">"x = "</span> + x);   <span class="comment">// 错误，被除数为0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该段程序运行之后会出现以下错误，即错误的根本原因在于除数为0：</p><p><strong>Exception in thread “main” java.lang.ArithmeticException: / by zero</strong> </p><ul><li>测试代码（二）：验证“&amp;”的作用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">10</span> != <span class="number">10</span> &amp; <span class="number">10</span> /<span class="number">0</span> == <span class="number">0</span>) &#123;             <span class="comment">// 非短路与</span></span><br><span class="line">            System.out.println(<span class="string">"条件满足"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行后，又出现了下面的错误提示：</p><p><strong>Exception in thread “main” java.lang.ArithmeticException: / by zero</strong></p><p>造成以上错误的根本原因在于“与”操作要把所有的条件进行判断，所以在计算10/0时就出现了错误。</p><ul><li>测试代码（三）：验证“&amp;&amp;”的作用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">10</span> != <span class="number">10</span> &amp;&amp; <span class="number">10</span>/<span class="number">0</span> == <span class="number">0</span>) &#123;               <span class="comment">// 短路与</span></span><br><span class="line">            System.out.println(<span class="string">"条件满足"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序运行后，没有出现上面的错误，因为短路与判断第一个条件就为false，那么之后的条件就不用判断了，这就是短路与的作用。短路或和或也是同样的原理。</p><h3 id="括号运算符"><a href="#括号运算符" class="headerlink" title="括号运算符"></a>括号运算符</h3><p>括号“()”也是Java的运算符，用于提高括号中表达式的优先级。</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>Java中支持位运算操作，位运算操作是指进行二进制位的运算，在Java中支持的位运算符如下表所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">位运算符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">&amp;</td><td style="text-align:center">按位与</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">&#124;</td><td style="text-align:center">按位或</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">^</td><td style="text-align:center">异或（相同为0，不同为1）</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">~</td><td style="text-align:center">取反</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">左移位</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">右移位</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">&gt;&gt;&gt;</td><td style="text-align:center">无符号右移位</td></tr></tbody></table></div><p>在Java中所有的数据都是以二进制的形式进行运算的，每一位二进制进行与、或、异或操作的结果如下表所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">二进制数1</th><th style="text-align:center">二进制数2</th><th style="text-align:center">与操作（&amp;）</th><th style="text-align:center">或操作（&#124;）</th><th style="text-align:center">异或操作（^）</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table></div><p>下面通过一段代码来观察位运算符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;                  <span class="comment">// 3的二进制数据：00000000 00000000 00000000 00000011</span></span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">6</span>;                  <span class="comment">// 6的二进制数据：00000000 00000000 00000000 00000110</span></span><br><span class="line">        System.out.println(x &amp; y);  <span class="comment">// 与操作的结果： 00000000 00000000 00000000 00000010</span></span><br><span class="line">        System.out.println(x | y);  <span class="comment">// 或操作的结果： 00000000 00000000 00000000 00000111</span></span><br><span class="line">        System.out.println(x ^ y);  <span class="comment">// 异或操作结果： 00000000 00000000 00000000 00000101</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">7</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><p>在计算机的数据表示中只定义了整数的表现形式，并没有定义负数的表现形式，所以，负数一般用<strong>补码</strong>的形式表示，整数的原码、反码、补码都相同，负数的反码除符号位为1外，其余位取相反；补码就是“<strong>反码+1</strong>”。</p><p>求出负数的反码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo16</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = -<span class="number">3</span>;             <span class="comment">// -3的二进制数据：11111111 11111111 11111111 11111101</span></span><br><span class="line">        System.out.println(x + <span class="string">"的反码时："</span> + ~x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出的结果位2（二进制数据：00000000 00000000 00000000 00000010），因为计算机中负数都是使用补码的形式计算，补码的计算是“反码+1”，然后对-3进行反码，操作过程如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10000000 00000000 00000000 00000011   // -3原码</span><br><span class="line">11111111 11111111 11111111 11111100   // -3反码</span><br><span class="line">11111111 11111111 11111111 11111101   // -3补码 = -3反码 + 1</span><br><span class="line">00000000 00000000 00000000 00000010   // ~-3</span><br></pre></td></tr></table></figure><p>在Java中也提供了左移“&lt;&lt;”和右移“&gt;&gt;”两种操作。左移操作是将运算数的二进制嘛整体左移指定位数，左移之后的空位由0来填充，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo17</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;     <span class="comment">// 3的二进制数据： 00000000 00000000 00000000 00000011</span></span><br><span class="line">        System.out.println(x + <span class="string">"左移2位之后的内容："</span> + (x &lt;&lt; <span class="number">2</span>)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3左移2位之后的内容：12   // 12二进制数：00000000 00000000 00000000 00001100</span><br></pre></td></tr></table></figure><p>右移操作“&gt;&gt;”是将运算数的二进制码整体右移，右移之后的空位以符号位填充，即如果整数就用0填充，如果是负数则用1填充，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo18</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;    <span class="comment">// 3的二进制数据：00000000 00000000 00000000 00000011</span></span><br><span class="line">        <span class="keyword">int</span> y = -<span class="number">3</span>;   <span class="comment">// -3的二进制数： 11111111 11111111 11111111 11111101</span></span><br><span class="line">        System.out.println(x + <span class="string">"右移2位之后的内容："</span> + (x &gt;&gt; <span class="number">2</span>));</span><br><span class="line">        System.out.println(y + <span class="string">"右移2位之后的内容："</span> + (y &gt;&gt; <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3右移2位之后的内容：0     // 3右移两位之后的二进制：00000000 00000000 00000000 00000000</span><br><span class="line">-3右移2位之后的内容：-1   // -3右移两位后的二进制： 11111111 11111111 11111111 11111111</span><br></pre></td></tr></table></figure><p>因为-3右移后的二进制依然是负数，负数用的补码表示，而补码=反码+1，所以求出对应的反码=补码-1，原码也可以根据反码求出：</p><ul><li>-3右移两位后的二进制补码：11111111 11111111 11111111 11111111</li><li>反码 = 补码-1，即补码为：   11111111 11111111 11111111 11111110</li><li>-3右移两位后的二进制原码：10000000 00000000 00000000 00000001</li></ul><p>以上右移操作是带符号位的右移操作，Java也提供无符号位的右移操作“&gt;&gt;&gt;”，即右移后的空位由0来填充，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo19</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">3</span>;    <span class="comment">// 3的二进制数据：00000000 00000000 00000000 00000011</span></span><br><span class="line">        <span class="keyword">int</span> y = -<span class="number">3</span>;   <span class="comment">// -3的二进制数： 11111111 11111111 11111111 11111101</span></span><br><span class="line">        System.out.println(x + <span class="string">"右移2位后的内容："</span> + (x &gt;&gt;&gt; <span class="number">2</span>));</span><br><span class="line">        System.out.println(y + <span class="string">"右移2位后的内容："</span> + (y &gt;&gt;&gt; <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3右移2位后的内容：0               // 3右移两位之后的二进制：00000000 00000000 00000000 00000000</span><br><span class="line">-3右移2位后的内容：1073741823     // 不带符号位-3右移两位： 00111111 11111111 11111111 11111111</span><br></pre></td></tr></table></figure><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><div class="table-container"><table><thead><tr><th style="text-align:center">优先级</th><th style="text-align:center">运算符</th><th style="text-align:center">类</th><th style="text-align:center">结合性</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">()</td><td style="text-align:center">括号运算符</td><td style="text-align:center">由左至右</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">[]</td><td style="text-align:center">方括号运算符</td><td style="text-align:center">由左至右</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">!、+（正号）、-（负号）</td><td style="text-align:center">一元运算符</td><td style="text-align:center">由右至左</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">~</td><td style="text-align:center">位逻辑运算符</td><td style="text-align:center">由右至左</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">++、—</td><td style="text-align:center">自增与自减运算符</td><td style="text-align:center">由右至左</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">*、/、%</td><td style="text-align:center">算术运算符</td><td style="text-align:center">由左至右</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">+、-</td><td style="text-align:center">算术运算符</td><td style="text-align:center">由左至右</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">&lt;&lt;、&gt;&gt;</td><td style="text-align:center">位左移、位右移运算符</td><td style="text-align:center">由左至右</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">&gt;、&gt;=、&lt;、&lt;=</td><td style="text-align:center">关系运算符</td><td style="text-align:center">由左至右</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">==、!=</td><td style="text-align:center">关系运算符</td><td style="text-align:center">由左至右</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">&amp;（位运算符AND）</td><td style="text-align:center">位逻辑运算符</td><td style="text-align:center">由左至右</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">^（位运算符XOR）</td><td style="text-align:center">位逻辑运算符</td><td style="text-align:center">由左至右</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">&#124;（位运算符OR）</td><td style="text-align:center">位逻辑运算符</td><td style="text-align:center">由左至右</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">逻辑运算符</td><td style="text-align:center">由左至右</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">&#124;&#124;</td><td style="text-align:center">逻辑运算符</td><td style="text-align:center">由左至右</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">?:</td><td style="text-align:center">三目运算符</td><td style="text-align:center">由右至左</td></tr></tbody></table></div><p>当使用同一级运算符的时候，结合性非常重要，因为它决定了谁会被先处理，即在相同优先级的运算符中，根据结合性来处理操作数。对于以上优先级没有必要完全记下，可以多使用括号改变优先级。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java中的运算符&quot;&gt;&lt;a href=&quot;#Java中的运算符&quot; class=&quot;headerlink&quot; title=&quot;Java中的运算符&quot;&gt;&lt;/a&gt;Java中的运算符&lt;/h3&gt;&lt;p&gt;表达式时Java的一种语句，它由&lt;strong&gt;操作数&lt;/strong&gt;和&lt;stro
      
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="java基础" scheme="http://xiyouhujing.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java数据类型</title>
    <link href="http://xiyouhujing.github.io/2019/03/15/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://xiyouhujing.github.io/2019/03/15/Java数据类型/</id>
    <published>2019-03-15T08:58:43.179Z</published>
    <updated>2019-03-18T12:03:13.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型划分"><a href="#数据类型划分" class="headerlink" title="数据类型划分"></a>数据类型划分</h2><p>Java的数据类型可以分为<strong>基本数据类型</strong>和<strong>应用数据类型两类</strong>，原始数据类型也称为基本数据类型，包括最基本的boolean、byte、char、short、int、long、float、与double等类型；引用数据类型以一种特殊的方式指向变量的实体，类似于C/C++的指针，这类变量在声明时不会分配内存，必须另外开辟内存空间的操作，如字符串和数组均属于这种数据类型。Java的数据类型如下图所示：</p><script type="math/tex; mode=display">f(n)\begin{cases}基本数据类型\begin{cases}数值型\begin{cases}整数类型（byte、short、int、long）\\浮点类型（float、double）\end{cases}\\字符型(char)\\布尔型（boolean）\end{cases}\\引用数据类型\begin{cases}类（class）\\接口（interface）\\数组\end{cases}\end{cases}</script><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java中基本的数据类型如下表所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">数据类型</th><th style="text-align:center">大小/位</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">long（长整数）</td><td style="text-align:center">64</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">int（整数）</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">short（短整数）</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">byte（位）</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">char（字符）</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">float（单精度）</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">double（双精度）</td><td style="text-align:center">64</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">Boolean（布尔）</td><td style="text-align:center">—</td></tr></tbody></table></div><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><p>整数类型可以分为<strong>long</strong>、<strong>int</strong>、<strong>short</strong>、及<strong>byte</strong> 4种，其中long为64位，即8个字节（bytes），int为32位，即4个字节，short为16位，也就是2个字节，byte为8位，也就是1个字节。例如，sum是一个短整型变量，在程序中作出如下声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> num;   <span class="comment">//声明sum为短整型</span></span><br></pre></td></tr></table></figure><p>经过声明之后，Java会在可使用的内存空间中寻找一个占有两个字节的块供sum变量使用。在Java中对于一个整型常量，其默认类型为int型，所以一般在声明常量时不要超过int数据类型的范围。</p><h5 id="数据溢出"><a href="#数据溢出" class="headerlink" title="数据溢出"></a>数据溢出</h5><p>当整数的数据大小超过其类型可以表示的范围，而程序中又没有做数值范围的检查时，一个整型变量所输出的值将会发生紊乱，且不是预期的运行结果。例如下面的程序中声明了一个整型的数，并把它赋值为整型所可以表示范围的最大值，然后将它分别加1和加2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataDemo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MAX_VALUE;                         <span class="comment">// 得到整型的最大值</span></span><br><span class="line">        System.out.println(<span class="string">"整型的最大值："</span> + max);           <span class="comment">// 输出最大值</span></span><br><span class="line">        System.out.println(<span class="string">"整型最大值 + 1："</span> + (max + <span class="number">1</span>));   <span class="comment">// 最大值加1</span></span><br><span class="line">        System.out.println(<span class="string">"整型最大值 + 2："</span> + (max + <span class="number">2</span>));   <span class="comment">// 最大值加2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">整型的最大值：2147483647</span><br><span class="line">整型最大值+1：-2147483648</span><br><span class="line">整型最大值+2：-2147483647</span><br></pre></td></tr></table></figure><p>int型的范围为-2147483648~2147483647，从输出结果可以看出，当最大值2147483647加上1之后，结果变成了最小值；当最大值加上2时，结果变成了次小值，这就是<strong>数据类型的溢出</strong>。为了避免int类型的溢出，可以再该表达式中的任一常量后加上大写的L，或者在变量前面加上long，做<strong>强制类型的转换</strong>，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">DataDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MAX_VALUE;                            <span class="comment">// 整型最大值</span></span><br><span class="line">        System.out.println(<span class="string">"整型的最大值："</span> + max);              <span class="comment">// 输出最大值</span></span><br><span class="line">        System.out.println(<span class="string">"整型最大值+1："</span> + (max+<span class="number">1</span>));          <span class="comment">// 最大值加1</span></span><br><span class="line">        System.out.println(<span class="string">"整型最大值+2："</span> + (max+<span class="number">2L</span>));         <span class="comment">// 变成long型 </span></span><br><span class="line">        System.out.println(<span class="string">"整型最大值+2："</span> + ((<span class="keyword">long</span>)max+<span class="number">2</span>));    <span class="comment">// 转换成long型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">整型的最大值：2147483647</span><br><span class="line">整型最大值+1：-2147483648</span><br><span class="line">整型最大值+2：2147483649</span><br><span class="line">整型最大值+2：2147483649</span><br></pre></td></tr></table></figure><p>处理int型的溢出，可以采用强制类型转换方式，但是对于long型的溢出，就没有处理办法了，此时就需要在程序中加上变量值的界限检查，在运行时才不会发生错误。</p><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><p>字符类型在内存中占两个字节，可以用来保存英文字母等字符。给字符变量赋值可以使用数字和字符，它们都能使程序正确的运行，例如，Java中使用Unicode编码系统，Unicode中小写的a是以97表示的，所以，如果要给一个字符变量赋值为a，可以使用小写“a”，也可以使用数字97，需要注意的是，字符要用一队单引号（’ ‘）括起。程序中字符类型的声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="string">'a'</span>;   <span class="comment">// 声明ch为字符型，其值为a</span></span><br></pre></td></tr></table></figure><p>在程序中输出一个包括双引号的字符串时，可以把字符变量赋值为转义字符，再将它输出，即：再程序中声明一个字符类型变量ch，然后把ch设置为“\\””，再进行输出操作，或者，也可以直接再要输出的字符穿中加入特殊的转义字符。常用的转义字符如下表：</p><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">转义字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">\f</td><td style="text-align:center">换页</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">\\</td><td style="text-align:center">反斜线</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">\b</td><td style="text-align:center">倒退一格</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">\’</td><td style="text-align:center">单引号</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">\r</td><td style="text-align:center">归位</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">\”</td><td style="text-align:center">双引号</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">\t</td><td style="text-align:center">制表符Tab</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">\n</td><td style="text-align:center">换行</td></tr></tbody></table></div><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch1 = <span class="string">'\"'</span>;                            <span class="comment">// 定义转义字符</span></span><br><span class="line">        <span class="keyword">char</span> ch2 = <span class="string">'\\'</span>;                            <span class="comment">// 定义转义字符</span></span><br><span class="line">        System.out.println(<span class="string">"ch1 = "</span> + ch1);         <span class="comment">// 打印输出</span></span><br><span class="line">        System.out.println(<span class="string">"ch2 = "</span> + ch2);         <span class="comment">// 打印输出</span></span><br><span class="line">        System.out.println(<span class="string">"\"Hello World\""</span>);      <span class="comment">// 直接输出转义字符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ch1 = &quot;</span><br><span class="line">ch2 = \</span><br><span class="line">&quot;Hello World&quot;</span><br></pre></td></tr></table></figure><h4 id="浮点数类型与双精度浮点数类型"><a href="#浮点数类型与双精度浮点数类型" class="headerlink" title="浮点数类型与双精度浮点数类型"></a>浮点数类型与双精度浮点数类型</h4><p>在Java中，带有小数点的数据类型称为浮点数类型（float），其长度为32个字节，当浮点数的表示范围不够大时，还有一种双精度（double）浮点数可以使用，双精度浮点数类型的长度为64个字节。两种数据类型的声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> num;          <span class="comment">// 声明num为双精度浮点型变量</span></span><br><span class="line"><span class="keyword">float</span> sum = <span class="number">3.0f</span>；   <span class="comment">// 声明sum为浮点型变量，其初值为3.0</span></span><br></pre></td></tr></table></figure><p>需要注意的是，在Java中使用浮点型数值时，默认类型时double，在数值后面可以加上D或者d，作为double类型的标识，在数据后面加上F或者f，则作为float类型的标识。若什么都没加，Java会将该数据默认为double类型。</p><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><p>布尔（boolean）类型的变量只有true（真）和false（假）两种，程序中对布尔类型的数据声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;   <span class="comment">// 声明布尔变量flag，并赋值为true</span></span><br></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>数据类型的转换方式可以分为<strong>自动类型转换</strong>及<strong>强制类型转换</strong>两种。</p><h4 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h4><p>在程序中已经定义好了数据类型的变量，若要用另一种数据类习表示时，Java会在下列条件皆成立时，自动做数据类型的转换：</p><p>​    （1） 转换前的数据类型与转换后的类型兼容。</p><p>​    （2） 转换后的数据类型的表示范围比转换前的类型大。</p><p>例如，将short类型的变量a转换成int类型，由于short与int皆为整数类型，符合上述条件（1）；而int的表示范围比short大，符合条件（2），因此Java会自动将原为short类型的变量a转换成int类型。</p><p>值得注意的是，类型的转换只限该行语句，并不会影响原先所定义的变量的类型，而且通过自动类型的转换可以保证数据的精确度，它不会因为转换而损失数据内容，这种类型的转换方式也称为<strong>扩大转换</strong>。</p><p>以扩大转换来看，字符和整数是可以使用自动类型转换的，整数和浮点数亦是兼容的，但是由于boolean类型只能存放true或false，与整数及字符是不兼容的，因此不能做类型的转换。下面介绍当两个数其中一个为浮点数时，其运算结果会怎么变化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class DataDemo04 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int x = 30;</span><br><span class="line">        float y = 22.19f;</span><br><span class="line">        System.out.println(&quot;x/y = &quot; + (x/y));</span><br><span class="line">        System.out.println(&quot;10/3.5 = &quot; + (10/3.5));</span><br><span class="line">        System.out.println(&quot;10/3 = &quot; + (10/3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x/y = 1.3519603</span><br><span class="line">10/3.5 = 2.857142857142857</span><br><span class="line">10/3 = 3</span><br></pre></td></tr></table></figure><p>从输出结果来看，int类型与float类型进行计算之后，输出的结果会变成float类型，一个整型常量和一个浮点型常量进行计算之后，结果也会变成一个浮点数据，而如果两个int型的常量进行计算，最终结果也时int型，而其小树部分将会被忽略。也就是说，假设有一个整数和双精度浮点数作运算时，Java会把整数转换成双精度浮点数后再做运算，运算结果也会变成双精度浮点数。</p><h4 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h4><p>当两个整数进行运算时，其运算结果也会是整数，例如，做除法运算8/3，其结果为整数2，而不是实际的2.33333···，因此，在Java中若是想要得到的计算结果是浮点数时，就必须将数据类型做强制性的转换，转换语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（要转换的数据类型） 变量名称；</span><br></pre></td></tr></table></figure><p>因为这种强制类型的转换时直接变写在程序代码中的，所以也称为<strong>显示转换</strong>。强制转换例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">30.3f</span>;</span><br><span class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>)f;</span><br><span class="line">        System.out.println(<span class="string">"x = "</span> + x);</span><br><span class="line">        System.out.println(<span class="string">"10 / 3 = "</span> + ((<span class="keyword">float</span>)<span class="number">10</span> /<span class="number">3</span> ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = 30</span><br><span class="line">10 / 3 = 3.3333333</span><br></pre></td></tr></table></figure><p>在程序中，首先将一个浮点型的变量f的内容赋给了int型变量x，因为int数据类型的长度小于float类型的长度，所以此处需要进行强制转换。程序的最后使用了两个整型常量进行计算，但是因为将其中一个整型变量变为了float类型，所以在计算时会强制把其他的整型也变成float类型，最后计算结果也就是包含小数的。</p><p>和自动转换一样，强制转换并不会影响原先定义的变量的类型，运行时只会将强制转换的那行语句进行变量的数据类型转换。此外，若是将一个超出该变量可表示范围的值赋值给这个变量，这种转换称为<strong>缩小转换</strong>，这种转换可能会丢失数据精度，因此Java并不会主动进行这种类型的转换，此时就必须做强制转换。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据类型划分&quot;&gt;&lt;a href=&quot;#数据类型划分&quot; class=&quot;headerlink&quot; title=&quot;数据类型划分&quot;&gt;&lt;/a&gt;数据类型划分&lt;/h2&gt;&lt;p&gt;Java的数据类型可以分为&lt;strong&gt;基本数据类型&lt;/strong&gt;和&lt;strong&gt;应用数据类型两类&lt;
      
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="java基础" scheme="http://xiyouhujing.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
