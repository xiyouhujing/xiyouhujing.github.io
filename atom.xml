<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiyou&#39;s blog</title>
  
  <subtitle>即使你不相信，python也是世界上最好的编程语言！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiyouhujing.github.io/"/>
  <updated>2019-12-06T01:21:56.067Z</updated>
  <id>http://xiyouhujing.github.io/</id>
  
  <author>
    <name>xiyou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>创建python虚拟环境</title>
    <link href="http://xiyouhujing.github.io/2019/12/05/%E5%88%9B%E5%BB%BApython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://xiyouhujing.github.io/2019/12/05/创建python虚拟环境/</id>
    <published>2019-12-05T09:15:10.000Z</published>
    <updated>2019-12-06T01:21:56.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="虚拟环境"><a class="markdownIt-Anchor" href="#虚拟环境"></a> 虚拟环境</h2><h3 id="为什么需要虚拟环境"><a class="markdownIt-Anchor" href="#为什么需要虚拟环境"></a> 为什么需要虚拟环境</h3><p>我们通过pip install XXX的方式安装第三方包，这样所有的包安装到系统的python环境中，但是这样就有一个问题，当我电脑上的Django版本和我需要迁移过来的django项目版本不一致时，就会出现问题，但是如果我电脑上同时拥有这两个版本的django，就解决这个问题了。如何让两个版本的django同时存在呢，这就需要用到虚拟环境了。</p><a id="more"></a><h3 id="virtualenv"><a class="markdownIt-Anchor" href="#virtualenv"></a> virtualenv</h3><h4 id="安装virtualenv"><a class="markdownIt-Anchor" href="#安装virtualenv"></a> 安装virtualenv</h4><p>virtualenv是用来创建虚拟环境的软件工具，可以通过pip或者pip3来安装（如果安装了两个版本的python环境，用pip3来安装工具到python3）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure><h4 id="创建虚拟环境"><a class="markdownIt-Anchor" href="#创建虚拟环境"></a> 创建虚拟环境</h4><p>在需要创建虚拟环境的路径下，通过以下命令创建虚拟环境，如果电脑同时存在两个版本的python，想指定特定的版本作为虚拟环境的解释器的话，可以通过<code>-p</code>参数来指定具体的python解释器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv [-p C:\python36\python.exe] [virutalenv name]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%88%9B%E5%BB%BApython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83.png" alt=""></p><p>执行命令之后会在相应的路径下生成一个虚拟环境的文件夹abc-env</p><h4 id="进入和退出虚拟环境"><a class="markdownIt-Anchor" href="#进入和退出虚拟环境"></a> 进入和退出虚拟环境</h4><p>创建好虚拟环境之后，可以进入虚拟环境中，需要注意的是，windows和linux进入虚拟环境的方式不同，本篇是在window上进行操作的。</p><p>windows进入虚拟环境：进入到虚拟环境abc-env的Scripts文件夹中，然后执行<code>activate</code></p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%88%9B%E5%BB%BApython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/%E8%BF%9B%E5%85%A5%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83.png" alt=""></p><p>然后可以在这个虚拟环境下安装我们的python包，例如安装1.10版本的Django，当我们迁移不同版本django项目时，创建虚拟环境十分有用。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%88%9B%E5%BB%BApython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/%E5%AE%89%E8%A3%85django.png" alt=""></p><p>当我们需要退出虚拟环境时，直接执行命令<code>deactivate</code>。</p><h3 id="virtualenvwrapper"><a class="markdownIt-Anchor" href="#virtualenvwrapper"></a> virtualenvwrapper</h3><p>virtualenvwrapper这个软件包可以让我们更方便简单的管理虚拟环境，不再需要像virtualenv那也需要跑到某个目录下来创建虚拟环境，并且激活的时候也要到相应的scripts目录下激活。</p><h4 id="安装virtualenvwrapper"><a class="markdownIt-Anchor" href="#安装virtualenvwrapper"></a> 安装virtualenvwrapper</h4><p>安装vitualenvwrapper时会自动安装virtualenv，所以可以直接安装virtualenvwrapper，在windows操作系统下安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br><span class="line">pip3 install virtualenvwrapper-win</span><br></pre></td></tr></table></figure><h4 id="创建虚拟环境-2"><a class="markdownIt-Anchor" href="#创建虚拟环境-2"></a> 创建虚拟环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv my_env</span><br></pre></td></tr></table></figure><p>用这种方法创建虚拟环境不用像之前那样指定文件夹下创建，它会在在你当前用户下创建一个env的文件夹，然后将这个虚拟环境安装到这个目录下，如果你的电脑安装了python2和python3，并且两个版本都安装了virtualenvwrapper，那么将会使用环境变量中第一个出现的python版本作为虚拟环境的python解释器。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%88%9B%E5%BB%BApython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%832.png" alt=""></p><p>如图，即使我在F盘中直接创建虚拟环境，也只会在我的用户名文件夹下生成一个Envs文件夹用来存放虚拟环境，并在创建完成后自动进入该虚拟环境中。</p><h4 id="操作虚拟环境"><a class="markdownIt-Anchor" href="#操作虚拟环境"></a> 操作虚拟环境</h4><ol><li>进入虚拟环境</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon my_env</span><br></pre></td></tr></table></figure><ol start="2"><li>退出当前虚拟环境</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>和virtualenv退出虚拟环境的命令相同</p><ol start="3"><li>删除某个虚拟环境</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmvirtualenv my_env</span><br></pre></td></tr></table></figure><p>其实也就是删除Envs文件夹下相应的虚拟环境文件夹</p><ol start="4"><li>列出虚拟环境</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsvirtualenv</span><br></pre></td></tr></table></figure><ol start="5"><li>进入虚拟环境所在的目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cdvirtualenv</span><br></pre></td></tr></table></figure><h4 id="修改virtualenv的默认路径"><a class="markdownIt-Anchor" href="#修改virtualenv的默认路径"></a> 修改virtualenv的默认路径</h4><p>因为虚拟环境默认时安装到C盘的，而如果安装多个虚拟环境，会占用C盘大量的空间，是不明智的，所以，可以更改virtualenv的默认路径。</p><p>在【我的电脑】-&gt;【右键】-&gt;【属性】-&gt;【高级系统设置】-&gt; 【环境变量】-&gt;【系统变量】中添加一个参数WORKON_HOME，将这个参数的值设置为你需要的路径。这里我在E盘创建了Envs文件夹，所以参数值为<code>E:\Envs\</code>：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%88%9B%E5%BB%BApython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84.png" alt=""></p><p>修改完环境变量后，新建虚拟环境，发现虚拟环境的默认路径已经修改为指定的默认路径：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%88%9B%E5%BB%BApython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/%E6%88%90%E5%8A%9F%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84.png" alt=""></p><h4 id="创建虚拟环境时指定python版本"><a class="markdownIt-Anchor" href="#创建虚拟环境时指定python版本"></a> 创建虚拟环境时指定python版本</h4><p>在使用<code>mkvirtualenvs</code>的时候，可以指定<code>--python</code>的参数来指定具体的python路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv --python==C:\python36\python.exe my_env</span><br></pre></td></tr></table></figure><h3 id="pycharm中创建虚拟环境"><a class="markdownIt-Anchor" href="#pycharm中创建虚拟环境"></a> pycharm中创建虚拟环境</h3><p>如果利用pycharm创建django项目，可以在创建的同时创建虚拟环境。</p><p>选择【File】-&gt;【New project】-&gt;【Django】:</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%88%9B%E5%BB%BApython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/pycharm%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83.png" alt=""></p><p>其中虚拟环境的路径，会根据你的项目路径改变，自动放在项目文件夹的venv文件夹下，当然也可以自己选择存放虚拟环境的路径。虚拟环境的解释器也可以根据本地存在的python解释器来选择。这种方式比较方便，但是创建项目的时候就会比较慢了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;虚拟环境&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#虚拟环境&quot;&gt;&lt;/a&gt; 虚拟环境&lt;/h2&gt;
&lt;h3 id=&quot;为什么需要虚拟环境&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#为什么需要虚拟环境&quot;&gt;&lt;/a&gt; 为什么需要虚拟环境&lt;/h3&gt;
&lt;p&gt;我们通过pip install XXX的方式安装第三方包，这样所有的包安装到系统的python环境中，但是这样就有一个问题，当我电脑上的Django版本和我需要迁移过来的django项目版本不一致时，就会出现问题，但是如果我电脑上同时拥有这两个版本的django，就解决这个问题了。如何让两个版本的django同时存在呢，这就需要用到虚拟环境了。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://xiyouhujing.github.io/categories/python/"/>
    
    
      <category term="Django" scheme="http://xiyouhujing.github.io/tags/Django/"/>
    
      <category term="python" scheme="http://xiyouhujing.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在github上搭建typora图床</title>
    <link href="http://xiyouhujing.github.io/2019/11/27/%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BAtypora%E5%9B%BE%E5%BA%8A/"/>
    <id>http://xiyouhujing.github.io/2019/11/27/在github上搭建typora图床/</id>
    <published>2019-11-27T01:03:22.000Z</published>
    <updated>2019-11-27T07:14:38.859Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>图床是指存储图片的服务器，简单来说，就是一个保存图片的仓库，将图片上传到这个仓库后，我们可以用一个URL地址来查看这张图片。</p></blockquote><a id="more"></a><h3 id="为何要使用图床"><a class="markdownIt-Anchor" href="#为何要使用图床"></a> 为何要使用图床</h3><p>最近用typora写博客，需要插入大量的截图，使用这些截图时，一般有两种方式，一是将截图先保存到本地，然后在typora中出插入图片的本地路径，另外一种是将图片放在我写的博客的相同路径下，在拖到相应的md文件中。但是，本地路径获取图片不太靠谱，一旦我的图片改变路径了，博客中就没法显示，我用的是第二种，但是这种会造成增加文件的体积，博客越来越多时，上传到博客的速度也会变慢。所以我开始考虑选择使用图床。</p><p>国内有很多免费图床，但是我都不太放心，毕竟一旦这些图床挂掉了，我博客里的图片就无法显示了。所以，我选择自己在github上自己搭建图床，比较靠谱。</p><h3 id="在github中创建项目"><a class="markdownIt-Anchor" href="#在github中创建项目"></a> 在GitHub中创建项目</h3><p>在前言中提到图床起始就是一个保存图片的库，所以，首先我们需要用github创建一个图片库来保存我们的图片。</p><p>没有使用过github的首先需要在注册<a href="https://github.com/" target="_blank" rel="noopener">GitHub账号</a>，很简单，就部介绍了。登陆后点击主页面右上角的加号，选择“New repository”:</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/%E5%88%9B%E5%BB%BArepository.png" alt=""></p><p>在建库页面，进行相关的设置：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/%E5%BB%BA%E5%BA%93%E9%A1%B5%E9%9D%A2%E8%AE%BE%E7%BD%AE.png" alt=""></p><p>建好的页面是这个样子的：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/%E5%88%9B%E5%BB%BA%E5%A5%BD%E7%9A%84%E4%BB%93%E5%BA%93.png" alt=""></p><p>创建好后，需要在GitHub上生成一个token以便PicGo来操作我们的仓库。点击GitHub页面右上角的头像，选择“settings”，在跳转的页面中选择左侧栏的“Developer settings”：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/DeveloperSettings.png" alt=""></p><p>在跳转的页面中选择“Personal access tokens”，然后点击右上角的“Generate new token”创建一个新的token：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/PersonalAccessTokens.png" alt=""></p><p>填写Note，勾选上的repo，然后点击最下方的“Generate token”绿色按钮：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/%E5%88%9B%E5%BB%BAtoken.png" alt=""></p><p>下面就是生成的token，记得点击红框中右侧的按钮，复制保存到其他地方，这个token只显示一次。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/%E5%A4%8D%E5%88%B6token.png" alt=""></p><h3 id="安装配置picgo"><a class="markdownIt-Anchor" href="#安装配置picgo"></a> 安装配置PicGo</h3><p>PicGo是一款简易的图床上传工具，可以通过拖拽或者复制粘贴的方式将图片上传至图床，下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.1.2%EF%BC%9A" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases/tag/v2.1.2：</a></p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/%E4%B8%8B%E8%BD%BDPicGo.png" alt=""></p><p>正常安装下载好的PicGo，打开后界面如下：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/picgo%E7%95%8C%E9%9D%A2.png" alt=""></p><p>点击左边栏的【图床设置】-【GitHub图床】，将我们在GitHub上建的图片仓库与之绑定，如下图：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/picgo%E8%AE%BE%E7%BD%AE.png" alt=""></p><p>设置完成后点击确定即可完成绑定，然后点击【设为默认图床】。</p><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><p>点击PicGo左侧的上传，然后点击【上传区】，将本地图片拖上去，或者在截图之后，点击剪贴板图片上传，然后会默认生成链接，直接在typora中复制链接就行。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87.png" alt=""></p><p>上传完成后，可以在PicGo的相册和GitHub的仓库中看到上传的照片了。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/GitHub%E7%9B%B8%E5%86%8C.png" alt=""></p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/GitHub%E5%9B%BE%E5%BA%93%E7%95%8C%E9%9D%A2.png" alt=""></p><p>另外，直接上传截图的话，是没有命名的，我们可以在相册里给图片重新命名：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/%E6%88%AA%E5%9B%BE%E5%91%BD%E5%90%8D.png" alt=""></p><p>另外，我们也可以在【PicGo设置】中，设置图片上传前重命名：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%9C%A8git2ub%E4%B8%8A%E6%90%AD%E5%BB%BAtyporpm%E5%9B%BE%E5%BA%8A/picgo%E9%87%8D%E5%91%BD%E5%90%8D%E8%AE%BE%E7%BD%AE.png" alt=""></p><p>同时，还可以选中多张图片批量上传。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图床是指存储图片的服务器，简单来说，就是一个保存图片的仓库，将图片上传到这个仓库后，我们可以用一个URL地址来查看这张图片。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="http://xiyouhujing.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="typora" scheme="http://xiyouhujing.github.io/tags/typora/"/>
    
  </entry>
  
  <entry>
    <title>Typora主题美化</title>
    <link href="http://xiyouhujing.github.io/2019/11/26/Typora%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
    <id>http://xiyouhujing.github.io/2019/11/26/Typora主题美化/</id>
    <published>2019-11-26T07:18:37.000Z</published>
    <updated>2019-11-28T02:38:16.801Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>Typora是一款非常好用的makedown文本编辑器，界面简单干净，所见即所得，所以在记笔记写博客时是一款非常好用的工具。当然了，一个好看的适合自己的主题，会让自己在写作时赏心悦目。这篇文章是根据我自己的风格和喜好，在typora官网night主题的基础上，结合catfish主题的优点，进行的一些调整，注意是字体上的调整。</p></blockquote><a id="more"></a><h3 id="偏好设置"><a class="markdownIt-Anchor" href="#偏好设置"></a> 偏好设置</h3><p>首先我们打开typora，选择【文件】-【偏好设置】-【外观】</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/typora%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE1.png" alt=""></p><p>点击上面图片的【打开主题文件夹】，会直接跳到本地你的typora主题文件夹，包括各个主题的文件夹，和各个主题的css文件：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/typora%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt=""></p><p>点击偏好页面的【获取主题】，将会跳转到<a href="http://theme.typora.io/" target="_blank" rel="noopener">typora主题官网</a>，我们可以在这个网站上找到我们心仪的主题：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/typora%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/%E4%B8%BB%E9%A2%98%E7%BD%91%E7%AB%99.png" alt=""></p><h3 id="night和catfish主题"><a class="markdownIt-Anchor" href="#night和catfish主题"></a> night和catfish主题</h3><p>我比较喜欢night的全黑界面，但是nigth默认的字体是宋体，不是很好看，例如：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/typora%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/night%E4%B8%BB%E9%A2%98.png" alt=""></p><p>官网上的另一个主题catfish，其官方说明是：</p><blockquote><p>无衬线字体，衬线字体和等宽字体分别采用思源黑体，思源宋体， mononoki ，在 Windows 下有良好的中文呈现效果。</p></blockquote><p>但是，catfish的页面是白色的，我不喜欢白色，看长了时间眼睛会累，另外，它的代码块字体我也不是很喜欢，还是比较喜欢night主题的代码块，而且，catfish主题的表格样式没有竖线，我也不喜欢，所以，综上来看，除了catfish主题的正文字体，我还是比较喜欢night主题的风格，所以，我决定在night主题的基础上进行修改，这样修改的幅度较小。</p><h3 id="修改night主题"><a class="markdownIt-Anchor" href="#修改night主题"></a> 修改night主题</h3><p>由于只需要catfish主题中的字体，而catfish中自带了思源黑体、思源宋体、mononoki字体文件，我们可以直接下载这些字体，这里我为了方便就直接下载catfish主题了：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/typora%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/catfish%E4%B8%BB%E9%A2%98%E4%B8%8B%E8%BD%BD.png" alt=""></p><p>解压下载下来的catfish主题文件，打开catfish文件夹，可以看到下面有很多字体文件：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/typora%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6.png" alt=""></p><p>依次右键ttc和otf文件，并点击安装，至于woff字体文件，我也不知道在win10上怎么安装（恕我无能-_-），不过也没关系，我们在catfish中发现，也只有一处用到了这个字体，所以就直接忽略吧。安装完字体后，我们可以在C:\Windows\Fonts这个路径中发现多了思源黑体和思源宋体文件。</p><p>最后，我们打开night主题的样式文件night.css，这里我建议复制该样式文件，重命名为“my-night.css”,为了防止我们将该样式文件改崩了，然后我们在my-night.css中进行修改，搜索“font-family”，将每个font-family后面的字体都替换成“Source Han Sans SC, sans-serif”，例如，修改正文字体：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/typora%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/%E5%AD%97%E4%BD%93%E6%9B%BF%E6%8D%A2.png" alt=""></p><h3 id="主题选择"><a class="markdownIt-Anchor" href="#主题选择"></a> 主题选择</h3><p>重启typora，在菜单栏点击【主题】，可以发现，在下拉菜单中会多出一个“my night”的主题，选择改主题，可以发现在night主题的基础上，字体变好看了：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/typora%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/mynight%E4%B8%BB%E9%A2%98.png" alt=""></p><p>当然了，如果在这个主题样式中，依旧有不满意的，可以继续修改，比如字体大小、代码块样式等，本人没学过css，所以就不继续瞎改了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Typora是一款非常好用的makedown文本编辑器，界面简单干净，所见即所得，所以在记笔记写博客时是一款非常好用的工具。当然了，一个好看的适合自己的主题，会让自己在写作时赏心悦目。这篇文章是根据我自己的风格和喜好，在typora官网night主题的基础上，结合catfish主题的优点，进行的一些调整，注意是字体上的调整。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="http://xiyouhujing.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Typora" scheme="http://xiyouhujing.github.io/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>将hexo博客部署到coding</title>
    <link href="http://xiyouhujing.github.io/2019/11/25/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/"/>
    <id>http://xiyouhujing.github.io/2019/11/25/将hexo博客部署到coding/</id>
    <published>2019-11-25T02:31:51.000Z</published>
    <updated>2019-11-27T07:25:22.781Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>在将hexo博客部署到coding之前，我已经在github上部署过，但是考虑到github是国外网站，每次打开博客访问较慢，而coding是国内网站，速度肯定快一些。所以，在部署到github的基础上，我又将hexo博客部署到coding上。coding pages是国内有名的软件研发管理平台coding旗下的一个功能，可以实时发布在coding.net里托管的代码。</p></blockquote><a id="more"></a><h4 id="注册coding账号"><a class="markdownIt-Anchor" href="#注册coding账号"></a> 注册Coding账号</h4><p>进入<a href="https://coding.net/" target="_blank" rel="noopener">coding官网</a>，点击右上角的注册按钮，注意不要点个人版登陆来注册，我试过个人版，部署到个人版之后，页面会显示404，所以直接注册就行，团队名称自己随意设置。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/%E6%B3%A8%E5%86%8C1.png" alt=""></p><h4 id="创建项目"><a class="markdownIt-Anchor" href="#创建项目"></a> 创建项目</h4><p>注册后登陆，在项目页面点新建项目：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE1.png" alt=""></p><p>创建项目页面，项目名称随便填，项目地址格式为：<a href="http://xn--6qqv7i2xdt95b.coding.me" target="_blank" rel="noopener">你的域名.coding.me</a>。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE2.png" alt=""></p><h4 id="配置ssh公钥"><a class="markdownIt-Anchor" href="#配置ssh公钥"></a> 配置SSH公钥</h4><p>点击coding页面右上角的头像，选择个人设置，点击SSH公钥，再点击右上角的新增公钥：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/%E6%96%B0%E5%A2%9E%E5%85%AC%E9%92%A51.png" alt=""></p><p>如果之前没有部署到github，可以点击上面图片中的“点击查看SSH公钥使用办法”来生成公钥。我这里之前部署到github了，可以使用同一个公钥，在本地文件夹C:\Users\你的user名\.ssh中，找到id_rsa.pub文件，并将其内容复制到如下页面，记得勾选上永久有效，最后点添加：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/%E6%96%B0%E5%A2%9E%E5%85%AC%E9%92%A52.png" alt=""></p><h4 id="配置站点配置文件"><a class="markdownIt-Anchor" href="#配置站点配置文件"></a> 配置站点配置文件</h4><p>打开coding中的你的项目，右下角选择SSH，复制SSH后面的地址：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/SSH%E5%9C%B0%E5%9D%80.png" alt=""></p><p>打开站点配置文件_config.yml（注意非主题配置文件），搜索deploy，在后面添加coding: 你的项目SSH地址。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9.png" alt=""></p><p>配置完成后，在git中依次执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>显示如下表示成功：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/push%E5%92%8Cdeploy.png" alt=""></p><p>部署成功之后，coding项目中可以查看部署成功的代码：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/%E6%9F%A5%E7%9C%8B%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2%E7%9A%84%E4%BB%A3%E7%A0%81.png" alt=""></p><h4 id="构建静态网站"><a class="markdownIt-Anchor" href="#构建静态网站"></a> 构建静态网站</h4><p>进入项目页面-构建与部署-静态网站，点击新建（这里我之前已经为我的博客新建了静态网站，所以，下面会有一个静态网站）：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/pages%E6%9C%8D%E5%8A%A11.png" alt=""></p><p>在新建静态网站页面，填写网站名称，触发机制默认自动部署，选择推送到master时触发构建，填写完成后点保存：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/pages%E6%9C%8D%E5%8A%A12.png" alt=""></p><p>新建完成后回到静态网站页面，点击右下角的立即部署：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/pages%E6%9C%8D%E5%8A%A13.png" alt=""></p><p>最后可以点击上面图片中的<a href="http://qtuuy5.coding-pages.com" target="_blank" rel="noopener">访问地址</a>来访问自己的博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在将hexo博客部署到coding之前，我已经在github上部署过，但是考虑到github是国外网站，每次打开博客访问较慢，而coding是国内网站，速度肯定快一些。所以，在部署到github的基础上，我又将hexo博客部署到coding上。coding pages是国内有名的软件研发管理平台coding旗下的一个功能，可以实时发布在coding.net里托管的代码。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="http://xiyouhujing.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://xiyouhujing.github.io/tags/hexo/"/>
    
      <category term="coding" scheme="http://xiyouhujing.github.io/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>通信原理笔记（一）：通信系统的组成</title>
    <link href="http://xiyouhujing.github.io/2019/11/18/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%84%E6%88%90/"/>
    <id>http://xiyouhujing.github.io/2019/11/18/通信原理笔记（一）：通信系统的组成/</id>
    <published>2019-11-18T06:19:50.000Z</published>
    <updated>2019-11-27T06:30:32.811Z</updated>
    
    <content type="html"><![CDATA[<h4 id="通信系统一般模型"><a class="markdownIt-Anchor" href="#通信系统一般模型"></a> 通信系统一般模型</h4><p>对于电通信来说，首先要把消息转变成电信号，然后经过发送设备，将信号送入信道，在接收端利用接收设备对接收信号作相应的处理后，送给信宿再转换为原来的消息。这个过程可以用下图所示的通信系统一般模型来概括。</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E4%B8%80%E8%88%AC%E6%A8%A1%E5%9E%8B.jpg" alt=""></p><p>1、信息源</p><p>信息源简称<strong>信源</strong>，其作用是把各种消息转换成原始电信号，根据消息的种类不同，信源可以分为<strong>模拟信源</strong>和<strong>数字信源</strong>。<strong>模拟信源</strong>输出连续的模拟信号，如话筒（声音-音频信号）、摄像机（图像-视频信号）；<strong>数字信源</strong>则输出离散的数字信号，如电传机（键盘字符-数字信号）、计算机等各种数字终端。并且，模拟信源送出的信号经数字化处理后也可以发送数字信号。</p><p>2、发送设备</p><p>发送设备的作用是生产适合于在信道中传输的信号，即使发送信号的特性和信道特性相匹配，具有抗信道干扰的能力，并且具有足够的功率以满足远距离传输的需要。因此，发送设备涵盖的内容很多，可能包含变换、放大、滤波、编码、调制等过程。对于多路传输系统，发送设备中还包括多路复用器。</p><p>3、信道</p><p>信道是一种物理媒质，用来将来自发送设备的信号传送到接收端。在<strong>无线信道</strong>中，信道可以是自由空间；在<strong>有线信道</strong>中看，可以是明线、电缆和光纤。信道即给信号以通路，也会对信号产生各种干扰和噪声。</p><p>上图中的噪声源是信道中的噪声及分散在通信系统其他各处的噪声的集中表示。噪声通常是随机的，形式多样的，它的出现干扰了正常的信号的传输。</p><p>4、接收设备</p><p>接收设备的功能是将信号放大和反变换（如译码、调解等），其目的是从受到减损的接收信号中正确恢复出原始电信号，对于多路复用信号，接收设备中还包括解除多路复用，实现正确分路的功能，此外，它还要尽可能减小在传输过程中噪声与干扰所带来的影响。</p><p>5、受信者</p><p>受信者简称<strong>信宿</strong>是传送消息的目的地，其功能与信源相反，即把原始电信号还原成相应的消息，如扬声器等。</p><h4 id="模拟通信系统模型和数字通信系统模型"><a class="markdownIt-Anchor" href="#模拟通信系统模型和数字通信系统模型"></a> 模拟通信系统模型和数字通信系统模型</h4><p>通信传输的消息是多种多样的，大致可以分为两大类：一类为<strong>连续消息</strong>；另一类称为<strong>离散消息</strong>。<strong>连续消息</strong>是指消息的状态连续变化或不可数的，例如连续变化的话音、图像等；<strong>离散消息</strong>则是指消息的状态是可数的或离散的，如符号、数据等。</p><p>消息的传递时通过它的物理载体——电信号来实现的，即把消息寄托在电信号的某一参量上（如连续波的幅度、频率或相位；脉冲波的幅度、宽度或位置）。按信号参量的取值方式不同，可以把信号分为两类：<strong>模拟信号</strong>和<strong>数字信号</strong>。如果电信号的参数取值连续（不可数、无穷多），则称之为<strong>模拟信号</strong>，模拟信号有时也称为<strong>连续信号</strong>，这里连续的含义时指某信号的某一参量连续变化，或者说在某一取值范围内可以取无穷多个值，而不一定在时间上也连续；如果电信号的参量仅可能取有限个值，则称之为<strong>数字信号</strong>，数字信号有时也称为离散信号，这个离散是指信号的某一参量是离散变化的，而不一定在时间上也离散。</p><p>通常，按照信道中传输的是模拟信号还是数字信号，相应地把通信系统分为<strong>模拟通信系统</strong>和<strong>数字通信系统</strong>。</p><p>1、模拟通信系统模型</p><p>模拟通信系统是利用模拟信号来传递信息的通信系统，其模型如下图所示，其中包含了两种重要变换。第一种变换是，在发送端把连续消息变换成原始电信号，在接收端进行相反的变换，这种变换由信源和信宿来完成；第二种变换是，把基带信号变换成适合在信道中传输的信号，并在接收端进行反变换，完成这种变换和反变换的通常是调制器和解调器。经过调制以后的信号称为<strong>已调信号</strong>，它由两个基本特征：一是携带有信息；而是适应在信道中传输。由于已调信号的频谱通常具有带通形式，因而已调信号又称为<strong>带通信号</strong>（也称为<strong>频带信号</strong>）。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/%E6%A8%A1%E6%8B%9F%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B.jpg" alt=""></p><p>2、数字通信系统模型</p><p>数字通信系统是利用数字信号来传递信息系统，如下图所示，数字通信涉及的技术问题很多，其中主要有信源编码与译码、信道编码与译码、数字调制与解调、同步以及加密与解密等。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/%E6%95%B0%E5%AD%97%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B.jpg" alt=""></p><p>1）信源编码与译码</p><p>信源编码有两个基本功能：一是提高信息传输的有效性，即通过某种数据压缩技术设法减少码元数目和降低码元速率。码元速率决定传输所占的带宽，而传输带宽反映了通信的有效性。二是完成模/数（A/D）转换，即当信息源给出的是模拟信号时，信源编码器将其转换成数字信号，以实现模拟信号的数字化传输。信源译码时信源编码的逆过程。</p><p>2）信道编码与译码</p><p>信道编码的目的时增强数字信号的抗干扰能力。数字信号在信道传输时受到噪声等影响后将会引起差错。为了减小差错，信道编码器对传输的信息码元按一定的规则加入保护成分（监督元），组成所谓“抗干扰编码”。接收端的信道译码器按相应的逆规则进行解码，从中发现错误或纠正错误，提高通信系统的可靠性。</p><p>3）加密与解密</p><p>在需要实现保密通信的场合，为了保证所传信息的安全，认为的将被传输的数字序列扰乱，即加上密码，这种处理过程叫做加密。在接收端利用与发送端相同的密码复制品对受到的数字序列进行解密，恢复原来的信息。</p><p>4）数字调制与解调</p><p>数字调制就是把数字基带信号的频谱搬移到高频处，形成适合在信道中传输的带通信号。基本的数字调制方式有振幅键控（ASK）、频移键控（FSK）、绝对相移键控（PSK）、相对（差分）相移键控（DPSK）。在接收端可以采用相干解调或者非相干解调还原数字基本基带信号。</p><p>5）同步</p><p>同步是使收发两端的信号在时间上保持步调一致，是保证数字通信系统有序、准确、可靠工作的前提条件。按照同步的功能不同，分为载波同步、位同步、群（帧）同步和网同步。</p><p>需要注意的是，上图是数字通信系统的一般化模型，实际上的数字痛惜系统不一定包括土中的所有环节，例如数字基带传输系统中，无需调制和解调；有的环节由于分散在各处，在图中也没有画出，例如同步。</p><h4 id="数字通信的特点"><a class="markdownIt-Anchor" href="#数字通信的特点"></a> 数字通信的特点</h4><p>数字通信的发展速度已明显超过模拟通信，成为当代通信技术的主流，数字通信具有以下优点：</p><ol><li><p>抗干扰能力强，且噪声不积累。数字通信系统中传输的是离散取值的数字波形，接收端的目标不是精确地还原被传输的波形。而是从受到噪声干扰的信号中判决出发送端所发送的是哪一个波形。</p></li><li><p>传输差错可控。在数字通信系统中，可通过信道编码技术进行检错与纠错，降低误码率，提高传输质量。</p></li><li><p>便于用于现代数字信号处理技术对数字信息进行处理、变换、存储。这种数字处理的灵活性表为可以将来自不同信源的信号综合到一起传输。</p></li><li><p>便于集成，使通信设备微型化，重量轻。</p></li><li><p>便于加密处理，且保密性好。</p></li></ol><p>数字通信的缺点是，一般需要较大的传输带宽。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;通信系统一般模型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#通信系统一般模型&quot;&gt;&lt;/a&gt; 通信系统一般模型&lt;/h4&gt;
&lt;p&gt;对于电通信来说，首先要把消息转变成电信号，然后经过发送设备，将信号送入信道，在接收端利用接收设备对接收信号作相应的处理后，送给信宿再转换为原来的消息。这个过程可以用下图所示的通信系统一般模型来概括。&lt;/p&gt;
    
    </summary>
    
      <category term="通信" scheme="http://xiyouhujing.github.io/categories/%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="通信原理" scheme="http://xiyouhujing.github.io/tags/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Django开发大型企业网站</title>
    <link href="http://xiyouhujing.github.io/2019/11/15/Django%E5%BC%80%E5%8F%91%E5%A4%A7%E5%9E%8B%E4%BC%81%E4%B8%9A%E7%BD%91%E7%AB%99/"/>
    <id>http://xiyouhujing.github.io/2019/11/15/Django开发大型企业网站/</id>
    <published>2019-11-15T06:57:20.000Z</published>
    <updated>2019-12-06T06:14:07.115Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>这篇博客的目的是通过python的web框架Django来搭建一个大型的企业网站。学习的课程来源于b站：<a href="https://www.bilibili.com/video/av60229021?p=6" target="_blank" rel="noopener">https://www.bilibili.com/video/av60229021?p=6</a></p></blockquote><a id="more"></a><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><h3 id="web服务器和应用服务器以及web应用框架"><a class="markdownIt-Anchor" href="#web服务器和应用服务器以及web应用框架"></a> web服务器和应用服务器以及web应用框架</h3><ul><li><strong>web服务器</strong>：负责处理http请求，响应静态文件，常见的由Apache，Nginx以及微软的IIS</li><li><strong>应用服务器</strong>：负责处理逻辑的服务器。比如php、python的代码，是不能直接通过nginx这种web服务器来处理的，只能通过应用服务器来处理，常见的应用服务器由uwsgi、tomcat等。</li><li><strong>web应用框架</strong>：一般使用某种语言，封装了常用的web功能的框架就是web应用框架，flask、Django以及java中的SSH框架都是web应用框架。</li></ul><h3 id="url组成部分"><a class="markdownIt-Anchor" href="#url组成部分"></a> URL组成部分</h3><p>URL即<strong>统一资源定位符</strong>。一个url由以下几个部分组成：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme://host:post/path/?query-string=xxx#anchor</span><br></pre></td></tr></table></figure><ul><li><strong>scheme</strong>：代表的是访问的协议，一般为http或者https以及ftp等</li><li><strong>host</strong>：主机名，域名，<a href="http://xn--www-eo8er22f.baidu.com" target="_blank" rel="noopener">比如www.baidu.com</a></li><li><strong>post</strong>：端口号，当你访问一个网站的时候，浏览器默认使用80端口</li><li><strong>path</strong>：查找路径。比如：<a href="http://www.jianshu.com/trending/now" target="_blank" rel="noopener">www.jianshu.com/trending/now</a> ，后面的trending/now就是path</li><li><strong>query-string</strong>：查询字符串，比如：<a href="http://www.baidu.com/s?wd=python" target="_blank" rel="noopener">www.baidu.com/s?wd=python</a> ，后面的wd=python就是查询字符串。</li><li><strong>anchor</strong>：锚点，后台一般不用管，前端用来做网页定位的</li></ul><p>注意：URL中的所有字符串都是ASCII字符串，如果出现非ASCII字符串，比如中文，浏览器会进行编码再进行传输。</p><h2 id="第一个django项目"><a class="markdownIt-Anchor" href="#第一个django项目"></a> 第一个Django项目</h2><h3 id="安装虚拟环境和django"><a class="markdownIt-Anchor" href="#安装虚拟环境和django"></a> 安装虚拟环境和Django</h3><p>1、安装虚拟环境</p><p>打开cmd，在命令行中输入<code>mkvirtualenv django-env</code>，这样便在我们设置的默认路径中创建了一个名为django-env的虚拟环境</p><p>2、安装Django</p><p>在cmd中输入<code>workon django-env</code>来进入我们创建的虚拟环境，当然，如果当时创建的话，创建完就进入虚拟环境了，然后再输入<code>pip install django</code>来安装django</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Django%E5%BC%80%E5%8F%91%E5%A4%A7%E5%9E%8B%E4%BC%81%E4%B8%9A%E7%BD%91%E7%AB%99/%E5%AE%89%E8%A3%85django.png" alt=""></p><h3 id="创建一个django项目"><a class="markdownIt-Anchor" href="#创建一个django项目"></a> 创建一个Django项目</h3><h4 id="用命令行的方式创建"><a class="markdownIt-Anchor" href="#用命令行的方式创建"></a> 用命令行的方式创建</h4><p>1、创建项目：cmd中进入到我们要创建项目的目录（注意是在虚workon虚拟环境的前提下），输入<code>django-admin startproject first_project</code>，则在响应的目录下创建了一个名为<code>first_project</code>的Django项目，例如，我的项目路径为：<code>F:\DjangoProject\python_django\project01</code>。在sublime text中打开我们的项目，可以看到如下的项目结构：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Django%E5%BC%80%E5%8F%91%E5%A4%A7%E5%9E%8B%E4%BC%81%E4%B8%9A%E7%BD%91%E7%AB%99/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt=""></p><p>然后进入我们的项目文件夹<code>first_project</code>输入命令<code>python manage.py runserver</code>来运行我们的项目，出现如下界面则表示运行成功：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Django%E5%BC%80%E5%8F%91%E5%A4%A7%E5%9E%8B%E4%BC%81%E4%B8%9A%E7%BD%91%E7%AB%99/Django%E6%88%90%E5%8A%9F%E8%BF%90%E8%A1%8C.png" alt=""></p><p>红色框起来的是我们要在浏览器中需要访问的url，在lia</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这篇博客的目的是通过python的web框架Django来搭建一个大型的企业网站。学习的课程来源于b站：&lt;a href=&quot;https://www.bilibili.com/video/av60229021?p=6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/av60229021?p=6&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="http://xiyouhujing.github.io/categories/python/"/>
    
    
      <category term="Django" scheme="http://xiyouhujing.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>LNMP环境搭建及zabbix服务搭建配置</title>
    <link href="http://xiyouhujing.github.io/2019/10/18/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/"/>
    <id>http://xiyouhujing.github.io/2019/10/18/LNMP环境搭建及zabbix服务搭建配置/</id>
    <published>2019-10-18T08:03:22.000Z</published>
    <updated>2019-11-28T02:56:31.323Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>在linux环境中安装nginx、mysql、php，搭建LNMP环境。搭建zabbix服务端，在客户机上安装zabbix客户端，基于zabbix客户端，编写一个脚本程序，检测linux客户端上特定软件包（本次指定openssl）的版本，上报到服务端</p></blockquote><a id="more"></a><h3 id="lnmp环境搭建"><a class="markdownIt-Anchor" href="#lnmp环境搭建"></a> LNMP环境搭建</h3><h4 id="环境说明"><a class="markdownIt-Anchor" href="#环境说明"></a> 环境说明：</h4><p>OS：   centos7.7_x64</p><p>nginx： nginx-1.8.0</p><p>php：   php-5.6.28</p><p>mysql： mysql-5.7.28</p><p>zabbix：zabbix-3.4.3</p><h4 id="安装前准备"><a class="markdownIt-Anchor" href="#安装前准备"></a> 安装前准备</h4><h5 id="关闭防火墙和selinux"><a class="markdownIt-Anchor" href="#关闭防火墙和selinux"></a> 关闭防火墙和selinux</h5><p># systemctl status firewalld  //查看防火墙状态</p><p># systemctl stop firewalld   //停止防火墙</p><p># systemctl disable firewalld.service  //禁止开机启用防火墙</p><p># vi /etc/selinux/config    //进入配置文件  设置：SELINUX=disabled（重启才生效）</p><h5 id="准备yum源"><a class="markdownIt-Anchor" href="#准备yum源"></a> 准备yum源</h5><p># wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p><p># yum -y install epel-release</p><h5 id="安装依赖关系"><a class="markdownIt-Anchor" href="#安装依赖关系"></a> 安装依赖关系</h5><p># yum install pcre*   //为了支持rewrite功能</p><p># yum install openssl  openssl-devel</p><p>#yum install gcc make gd-devel libjpeg-devel libpng-devel libxml2-devel bzip2-devel libcurl-devel -y  //编译需要的依赖包</p><h4 id="nginx安装"><a class="markdownIt-Anchor" href="#nginx安装"></a> nginx安装</h4><h5 id="下载安装包"><a class="markdownIt-Anchor" href="#下载安装包"></a> 下载安装包</h5><p># wget <a href="http://nginx.org/download/nginx-1.8.0.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.8.0.tar.gz</a></p><h5 id="编译安装"><a class="markdownIt-Anchor" href="#编译安装"></a> 编译安装</h5><p># tar –zxvf nginx-1.8.0.tar.gz -C /usr/local     //解压nginx到/usr/local路径下</p><p># cd /usr/local/nginx-1.8.0/</p><p>#./configure --user=nobody --group=nobody --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --with-http_sub_module --with-http_ssl_module</p><p># make &amp;&amp; make install</p><h5 id="启动nginx服务"><a class="markdownIt-Anchor" href="#启动nginx服务"></a> 启动nginx服务</h5><p># /usr/local/nginx/sbin/nginx</p><p>打开浏览器访问此机器的 IP，如果浏览器出现 Welcome to nginx! 则表示 Nginx 已经安装并运行成功。</p><h5 id="编辑nginx主配置文件"><a class="markdownIt-Anchor" href="#编辑nginx主配置文件"></a> 编辑nginx主配置文件</h5><p># vi /usr/local/nginx/conf/nginx.conf</p><p>主要对server项做如下的改动：</p><p>​       server {</p><p>​        listen       80;</p><p>​        server_name  localhost;</p><p>​        location / {</p><p>​            root   /usr/local/nginx-1.8.0/html/;</p><p>​            index  index.html index.htm index.php;</p><p>​            autoindex on;</p><p>​        }</p><p>autoindex on;</p><p>​        autoindex_exact_size on;</p><p>autoindex_localtime on;</p><p>​        location ~ .php$ {</p><p>​            root           /usr/loca/nginx-1.8.0/html;</p><p>​            fastcgi_pass   127.0.0.1:9000;</p><p>​            fastcgi_index  index.php;</p><p>​            fastcgi_param  SCRIPT_FILENAME  /usr/local/nginx-1.8.0/html$fastcgi_script_name;</p><p>​            # fastcgi_param  SCRIPT_FILENAME  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>o</mi><mi>c</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mi>r</mi></msub><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">document_root</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span></span></span></span>fastcgi_script_name;</p><p>​            include        fastcgi_params;</p><p>​        }</p><p>}</p><h5 id="重启nginx"><a class="markdownIt-Anchor" href="#重启nginx"></a> 重启nginx</h5><p># /usr/local/nginx/sbin/nginx –s reload</p><h4 id="安装mysql"><a class="markdownIt-Anchor" href="#安装mysql"></a> 安装mysql</h4><h5 id="下载和安装mysql57"><a class="markdownIt-Anchor" href="#下载和安装mysql57"></a> 下载和安装mysql5.7</h5><p># wget <a href="http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm" target="_blank" rel="noopener">http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</a></p><p># yum localinstall mysql57-community-release-el7-7.noarch.rpm</p><p># yum repolist enabled | grep “mysql.<em>-community.</em>”</p><p># yum install mysql-community-server</p><p># systemctl start mysqld.service</p><p># grep ‘temporary password’ /var/log/mysqld.log  //记录随机密码</p><p># mysql_secure_installation  //初始化</p><p># mysql -u root –p  //用随机密码登陆</p><h5 id="新建以及初始化数据库zabbix"><a class="markdownIt-Anchor" href="#新建以及初始化数据库zabbix"></a> 新建以及初始化数据库zabbix</h5><p>&gt; create database zabbix character set utf8;;</p><p>&gt; use zabbix;</p><p>&gt; source /root/zabbix-3.4.3/database/mysql/schema.sql;  // 在安装完zabbix后的操作</p><p>&gt; source /root/zabbix-3.4.3/database/mysql/data.sql;     // 在安装完zabbix后的操作</p><p>&gt; source /root/zabbix-3.4.3/database/mysql/images.sql;   // 在安装完zabbix后的操作</p><h4 id="安装php"><a class="markdownIt-Anchor" href="#安装php"></a> 安装php</h4><h5 id="安装依赖扩展包"><a class="markdownIt-Anchor" href="#安装依赖扩展包"></a> 安装依赖扩展包</h5><p># yum -y install libmcrypt libmcrypt-devel</p><p>mhash mhash-devel mcrypt libxml2-devel bzip2-devel libcurl-devel libjpeg-devel libpng<br>libpng-devel freetype freetype-devel libmcrypt libmcrypt-devel</p><h5 id="下载php"><a class="markdownIt-Anchor" href="#下载php"></a> 下载php</h5><p># wget <a href="http://php.net/get/php-5.6.28.tar.gz/from/this/mirror" target="_blank" rel="noopener">http://php.net/get/php-5.6.28.tar.gz/from/this/mirror</a> -O php-5.6.28.tar.gz</p><h5 id="编译安装php"><a class="markdownIt-Anchor" href="#编译安装php"></a> 编译安装php</h5><p># tar –zxvf php-5.6.28.tar.gz</p><p># cd php-5.6.28</p><p># ./configure -prefix=/usr/local/php -with-config-file-path=/usr/local/php/etc -with-bz2 -with-curl -enable-ftp -enable-sockets -disable-ipv6 -with-gd -with-jpeg-dir=/usr/local -with-png-dir=/usr/local -with-freetype-dir=/usr/local -enable-gd-native-ttf -with-iconv-dir=/usr/local -enable-mbstring -enable-calendar -with-gettext -with-libxml-dir=/usr/local -with-zlib -with-pdo-mysql=mysqlnd -with-mysqli=mysqlnd -with-mysql=mysqlnd -with-ldap -enable-dom -enable-xml -enable-fpm -with-libdir=lib64 -enable-bcmath</p><p># make &amp;&amp; make install</p><h5 id="准备php和php-fpm的配置文件"><a class="markdownIt-Anchor" href="#准备php和php-fpm的配置文件"></a> 准备php和php-fpm的配置文件</h5><p>编辑php-5.6.28解压文件下的php.ini-production</p><p># vi /php-5.6.28/ php.ini-production</p><p>修改如下参数：</p><p>max_execution_time = 300</p><p>memory_limit = 128M</p><p>​      post_max_size = 16M</p><p>​      upload_max_filesize = 2M</p><p>​      max_input_time = 300</p><p>​      date.timezone = PRC</p><p># cp /php-5.6.28php.ini-production /usr/local/php/etc/php.ini</p><p># cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</p><h5 id="编辑php-fpm的配置文件"><a class="markdownIt-Anchor" href="#编辑php-fpm的配置文件"></a> 编辑php-fpm的配置文件</h5><p># /usr/local/php/etc/php-fpm.conf</p><p>取消pid的注释：</p><p>……</p><p>[global]</p><p>pid = run/php-fpm.pid</p><p>……</p><h5 id="启动php-fpm占用端口9000"><a class="markdownIt-Anchor" href="#启动php-fpm占用端口9000"></a> 启动php-fpm，占用端口9000</h5><p># /usr/local/php/sbin/php-fpm</p><h5 id="测试php"><a class="markdownIt-Anchor" href="#测试php"></a> 测试php</h5><p>在/usr/local/nginx-1.8.0/html/目录下新建test.php：</p><p>vi /usr/local/nginx-1.8.0/html/test.php</p><p>内容如下：</p><p>​    &lt;?php</p><p>​    phpinfo();</p><p>​    ?&gt;</p><p>重启nginx：</p><p># /usr/local/nginx/sbin/nginx -s reload</p><p>在浏览器中输入：<a href="http://192.168.112.101/test.php" target="_blank" rel="noopener">http://192.168.112.101/test.php</a> ，出现以下画面则说明配置php成功</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/php%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2.png" alt=""></p><h3 id="zabbix-server安装与配置"><a class="markdownIt-Anchor" href="#zabbix-server安装与配置"></a> zabbix server安装与配置</h3><h4 id="安装zabbix"><a class="markdownIt-Anchor" href="#安装zabbix"></a> 安装zabbix</h4><h5 id="安装依赖包"><a class="markdownIt-Anchor" href="#安装依赖包"></a> 安装依赖包</h5><p># yum install mysql-devel –y</p><p>如果编译遇到mysql文件冲突，则可能是版本冲突，使用rpm下载：</p><p># wget <a href="ftp://ftp.pbone.net/mirror/dev.mysql.com/pub/Downloads/MySQL-5.7/mysql-community-devel-5.7.25-1.el7.x86_64.rpm" target="_blank" rel="noopener">ftp://ftp.pbone.net/mirror/dev.mysql.com/pub/Downloads/MySQL-5.7/mysql-community-devel-5.7.25-1.el7.x86_64.rpm</a></p><p># yum localinstall mysql-community-devel-5.7.25-1.el7.x86_64.rpm</p><p># yum install net-snmp-devel –y</p><p># yum install libevent-devel –y</p><h5 id="下载zabbix"><a class="markdownIt-Anchor" href="#下载zabbix"></a> 下载zabbix</h5><p># wget <a href="https://nchc.dl.sourceforge.net/project/zabbix/ZABBIX%20Latest%20Stable/3.4.3/zabbix-3.4.3.tar.gz" target="_blank" rel="noopener">https://nchc.dl.sourceforge.net/project/zabbix/ZABBIX Latest Stable/3.4.3/zabbix-3.4.3.tar.gz</a></p><h4 id="编译安装zabbix"><a class="markdownIt-Anchor" href="#编译安装zabbix"></a> 编译安装zabbix</h4><p># tar –zxvf zabbix-3.4.3</p><p># cd zabbix-3.4.3</p><p>#./configure --prefix=/usr/local/zabbix --with-mysql --with-net-snmp --with-libcurl --enable-server --enable-agent --enable-proxy</p><p># make &amp;&amp; make install</p><p>安装完成后记得回到数据库安装步骤，导入数据库</p><h4 id="配置server和agentd"><a class="markdownIt-Anchor" href="#配置server和agentd"></a> 配置server和agentd</h4><h5 id="编辑zabbix_serverconf"><a class="markdownIt-Anchor" href="#编辑zabbix_serverconf"></a> 编辑zabbix_server.conf</h5><p>vi /usr/local/zabbix/etc/zabbix_server.conf</p><p>做如下的改动：</p><p>​    DBName=zabbix</p><p>​    DBUser=root         // 如果给zabbix数据库创建了用户，则改为zabbix数据库用户</p><p>​    DBPassword=123456  // zabbix数据库的密码</p><p>​    DBPort=3306</p><h5 id="编辑zabbix_agentdconf"><a class="markdownIt-Anchor" href="#编辑zabbix_agentdconf"></a> 编辑zabbix_agentd.conf</h5><p>vi /usr/local/zabbix/etc/zabbix_agentd.conf</p><p>做如下改动：</p><p>​    Server=127.0.0.1</p><p>​    ServerActive=127.0.0.1</p><p>​Hostname=Zabbix server</p><h5 id="配置nginx-zabbix"><a class="markdownIt-Anchor" href="#配置nginx-zabbix"></a> 配置nginx zabbix</h5><p>拷贝zabbix前端文件到nginx的html文件夹中：</p><p># cp -r /root/zabbix-3.4.3/frontends/php/*   /usr/local/nginx-1.8.0/html/zabbix</p><p># chmod –R 777 /usr/local/nginx-1.8.0/html</p><h5 id="启动zabbix-server和zabbix-agent"><a class="markdownIt-Anchor" href="#启动zabbix-server和zabbix-agent"></a> 启动zabbix server和zabbix agent</h5><p># /usr/local/zabbix/sbin/zabbix_server</p><p># /usr/local/zabbix/sbin/zabbix_agentd</p><h4 id="界面配置zabbix"><a class="markdownIt-Anchor" href="#界面配置zabbix"></a> 界面配置zabbix</h4><h5 id="使用浏览器访问"><a class="markdownIt-Anchor" href="#使用浏览器访问"></a> 使用浏览器访问</h5><p><a href="http://192.168.112.101/zabbix/setup.php" target="_blank" rel="noopener">http://192.168.112.101/zabbix/setup.php</a></p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E8%AE%BF%E9%97%AEzabbix%E9%85%8D%E7%BD%AE%E9%A1%B5%E9%9D%A2.png" alt=""></p><p>在检测信息时，可查看具体的报错信息对/usr/local/php/etc/php.ini文件进行编辑解决</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E4%BF%A1%E6%81%AF%E6%A3%80%E6%B5%8B%E9%A1%B5%E9%9D%A2.png" alt=""></p><p>对应/usr/local/zabbix/etc/zabbix_server.conf文件填写数据库名称、用户和密码：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt=""></p><p>host与port不需要修改，name自定义</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/zabbix%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF.png" alt=""></p><p>确认信息,正确点击下一步</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E5%AE%89%E8%A3%85%E5%89%8D%E6%B1%87%E6%80%BB.png" alt=""></p><p>根据以下页面的提示下载配置文件，并将配置文件保存到/usr/local/nginx-1.8.0/html/zabbix/conf/zabbix.conf.php，点击“完成”</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/zabbix%E9%85%8D%E7%BD%AE%E5%AE%8C%E6%88%90.png" alt=""></p><p>配置完成后进入登陆页面，默认登陆名为：admin，密码为：zabbix</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/zabbix%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png" alt=""></p><p>在跳转的页面中点击右上角的小人头像可以设置web页面的语言：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/zabbix%E9%A1%B5%E9%9D%A2%E8%AF%AD%E8%A8%80%E8%AE%BE%E7%BD%AE.png" alt=""></p><h5 id="添加监控信息"><a class="markdownIt-Anchor" href="#添加监控信息"></a> 添加监控信息</h5><p>修改监控管理机zabbix server：配置&gt;&gt;主机&gt;&gt;Zabbix server</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E4%BF%AE%E6%94%B9%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86%E6%9C%BA.png" alt=""></p><p>主机名称： 要与主机名相同，这是zabbix server程序用的</p><p>可见名称： 显示在zabbix网页上的，给我们看的</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E9%85%8D%E7%BD%AE%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86%E6%9C%BA.png" alt=""></p><p>修改后，要将下面的已启用要勾上。添加完成就有了管理机的监控主机，注意ZBX要显示为绿色</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E7%9B%91%E6%8E%A7%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%AE%8C%E6%88%90.png" alt=""></p><h3 id="监控客户机的openssl版本"><a class="markdownIt-Anchor" href="#监控客户机的openssl版本"></a> 监控客户机的openssl版本</h3><h4 id="客户机安装zabbix-agent"><a class="markdownIt-Anchor" href="#客户机安装zabbix-agent"></a> 客户机安装zabbix agent</h4><h5 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖"></a> 安装依赖</h5><p># yum -y install net-snmp-devel</p><p>libxml2-devellibcurl-deve libevent libevent-devel</p><h5 id="安装zabbix-agent"><a class="markdownIt-Anchor" href="#安装zabbix-agent"></a> 安装zabbix agent</h5><p># yum install zabbix-agent –y</p><h5 id="编辑配置文件"><a class="markdownIt-Anchor" href="#编辑配置文件"></a> 编辑配置文件</h5><p># vi /etc/zabbix/zabbix_agentd.conf</p><p>修改server、hostname、serveractive信息：</p><p>Server=192.168.112.101   //zabbix server的ip</p><p>ServerActive=192.168.112.101   //和server相同</p><p>Hostname=centos6   //记住hostname，在zabbix server中添加主机时用到</p><h5 id="启动zabbix-agent"><a class="markdownIt-Anchor" href="#启动zabbix-agent"></a> 启动zabbix agent</h5><p># /usr/sbin/zabbix_agentd</p><h4 id="zabbix-server添加监控主机"><a class="markdownIt-Anchor" href="#zabbix-server添加监控主机"></a> zabbix server添加监控主机</h4><h5 id="创建主机"><a class="markdownIt-Anchor" href="#创建主机"></a> 创建主机</h5><p>配置&gt;&gt;主机，主机名称与zabbix_agentd.conf中的一致，IP地址填写客户机的IP地址</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E5%88%9B%E5%BB%BA%E4%B8%BB%E6%9C%BA.png" alt=""></p><h5 id="客户端自定义监控项"><a class="markdownIt-Anchor" href="#客户端自定义监控项"></a> 客户端自定义监控项</h5><p>本次监控的是客户机上的openssl版本。</p><p>（1）查看客户端openssl版本：</p><p># yum info openssl</p><p>可以看到两组信息，一个是已安装的openssl软件包的信息，还有一组是可安装的openssl软件包的信息，其中，客户端已安装版本是1.0.1e，可安装版本是1.0.2k，我们需要让zabbix server自动监控客户端的openssl版本，并在版本较低时发出告警。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84openssl%E4%BF%A1%E6%81%AF.png" alt=""></p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E5%8F%AF%E5%AE%89%E8%A3%85%E7%9A%84openssl%E4%BF%A1%E6%81%AF.png" alt=""></p><p>2）修改客户端配置文件zabbix_agentd.conf</p><p># vi /etc/zabbix/zabbix_agentd.conf</p><p>搜索 ‘UnsafeUserParameters’取消注释#号，将‘0’改为‘1’</p><p>Include=/etc/zabbix/zabbix_agentd.d/*.conf</p><p># cd cd /etc/zabbix/zabbix_agentd.d/</p><p>自定义监控项的key值，格式为UserParameter=<key>,<shell command="">，key值不能与现有的重复。</shell></key></p><p># vi userparameter_openssl.conf   // 新建自定义监控项的配置文件，内容如下</p><p>UserParameter=openssl_version,yum info openssl|awk -F: ‘/^Version/{print $2;exit;}’</p><p>其中openssl_version为key值，yum info openssl|awk -F: '/^Version/{print $2;exit;}'为获取openssl版本号的命令。</p><h5 id="在server端配置"><a class="markdownIt-Anchor" href="#在server端配置"></a> 在server端配置</h5><p>（1）在zabbix服务端使用zabbix-get</p><p># yum install zabbix-get –y</p><p># zabbix_get -s 192.168.112.101 -p 10050 -k “openssl_version”</p><p>结果为：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/server%E7%AB%AF%E4%BD%BF%E7%94%A8zabbix_get.png" alt=""></p><p>其中-s参数指定客户端地址，-p指定端口，-k指定key值，这里获取到客户端的openssl版本号为1.0.1e。</p><p>（2）在zabbix的web界面添加自定义监控项</p><p>点击：配置&gt;&gt;主机&gt;&gt;监控项</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E9%A1%B9.png" alt=""></p><p>在跳转的页面中点击“创建监控项”，跳转到如下界面，并添加监控项信息，其中的键值要去自定义的key值对应，即openssl_version，因为获取的是字符串，所以数据类型选择“字符”，更新时间间隔，历史数据保留时长等根据所添加的监控项合理设置，这里为了尽快看到数据，将更新时间设置为30秒。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E9%A1%B9.png" alt=""></p><p>在页面最后勾选“已启用”，点击“添加”。</p><p>点击：监测中&gt;&gt;最新数据&gt;&gt;监控项的历史记录，就可以看到监控的结果</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E8%87%AA%E5%AE%9A%E4%B9%89openssl%E7%9B%91%E6%8E%A7%E7%9A%84%E7%9B%91%E6%8E%A7%E7%BB%93%E6%9E%9C.png" alt=""></p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E6%98%BE%E7%A4%BA%E5%AE%A2%E6%88%B7%E6%9C%BA%E7%9A%84openssl%E7%89%88%E6%9C%AC.png" alt=""></p><p>（3）设置触发器</p><p>点击：配置&gt;&gt;主机&gt;&gt;触发器</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E5%88%9B%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8.png" alt=""></p><p>在跳转的页面中点击右上角的“创建触发器”，在名称中填写告警的提示信息，严重性可以自己选择，这里选择的是“警告”，即如果监控到的客户机openssl版本与指定的版本不一致，将会出现名为“The openssl needs<br>to be updated”的警告信息。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E9%85%8D%E7%BD%AE%E8%A7%A6%E5%8F%91%E5%99%A8.png" alt=""></p><p>在表达式中填写规则，点击右侧的“添加”，在弹出的窗口中填入规则信息，监控项选择我们我们创建的监控项openssl，功能选择“查找字符串V的最近值……”，V则填写我们指定的openssl版本号，最后点击插入。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E8%AE%BE%E7%BD%AE%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6.png" alt=""></p><p>勾选页面下面的“已启用”，最后点击“添加”。</p><h5 id="监控结果"><a class="markdownIt-Anchor" href="#监控结果"></a> 监控结果</h5><p>点击：检测中&gt;&gt;仪表盘，可以显示问题信息，由于我们客户机的openssl版本是1.0.1e，而我们指定的版本是1.0.2k，所以触发了“The openssl needs to be updated”的警告信息</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8Azabbix%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/%E8%A7%A6%E5%8F%91%E8%AD%A6%E5%91%8A%E4%BF%A1%E6%81%AF.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在linux环境中安装nginx、mysql、php，搭建LNMP环境。搭建zabbix服务端，在客户机上安装zabbix客户端，基于zabbix客户端，编写一个脚本程序，检测linux客户端上特定软件包（本次指定openssl）的版本，上报到服务端&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://xiyouhujing.github.io/categories/Linux/"/>
    
    
      <category term="zabbix" scheme="http://xiyouhujing.github.io/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Java开发环境配置</title>
    <link href="http://xiyouhujing.github.io/2019/09/27/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://xiyouhujing.github.io/2019/09/27/Java开发环境配置/</id>
    <published>2019-09-27T09:17:36.000Z</published>
    <updated>2019-11-28T03:12:50.886Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>下载安装java开发工具JDK，以及进行环境的配置，下载安装java开发的ide，因为eclipse是使用较为广泛的java开发ide，所以这里安装的是eclipse。另外，也可以了解一下IntelliJ IDEA（收费的），我觉得IDEA用得更顺手。当然了，都只是开发工具，看拿个更适合自己吧，用得开心就行。</p></blockquote><a id="more"></a><h3 id="下载安装jdk"><a class="markdownIt-Anchor" href="#下载安装jdk"></a> 下载安装JDK</h3><p>1.JDK是Java开发工具，下载地址为：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a> ，点击如下图片中的按钮：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/JDK%E4%B8%8B%E8%BD%BD1.png" alt=""></p><p>2.在跳转的页面中选择接受许可，之后根据自己的系统选择对应的安装程序，本文window 64为例，如下：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/JDK%E4%B8%8B%E8%BD%BD2.png" alt=""></p><p>3.双击安装文件，然后提示的安装步骤进行安装即可，可以修改JDK的安装路径，例如我的安装路径为：D:\JDK，记住安装路径，在接下来配置环境变量中需要用到。</p><h3 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h3><p>1.安装完成后，邮件“我的电脑”/“此电脑”，点击“属性”，选择“高级系统设置”，如下图：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F1.png" alt=""></p><p>2.选择“高级”选项卡，点击“环境变量”，如下图：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F2.png" alt=""></p><p>3.在“系统变量”中分别设置JAVA_HOME、CLASSPATH、PATH三个属性，如果三个属性不存在，则新建，存在则选定后编辑，变量参数设置如下：</p><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:left">变量值</th></tr></thead><tbody><tr><td style="text-align:center">JAVA_HOME</td><td style="text-align:left">D:\JDK      (根据自己的安装路径选择)</td></tr><tr><td style="text-align:center">CLASSPATH</td><td style="text-align:left">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;   （注意最前面有.; 符号用英文）</td></tr><tr><td style="text-align:center">PATH</td><td style="text-align:left">%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin  （win10中双击PATH后分条添加，否则无法识别）</td></tr></tbody></table><h3 id="测试jdk是否安装成功"><a class="markdownIt-Anchor" href="#测试jdk是否安装成功"></a> 测试JDK是否安装成功</h3><p>1.ctrl+R，在弹出的对话框中输入cmd，回车。</p><p>2.在弹出的命令框中，输入java -version命令，如果出现如下结果，则说明java环境配置成功：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E6%B5%8B%E8%AF%951.png" alt=""></p><h3 id="安装eclipse"><a class="markdownIt-Anchor" href="#安装eclipse"></a> 安装Eclipse</h3><p>目前市场上用于java开发的IDE比较多，比较推荐Eclipse和IntelliJ IDEA，IDEA功能很强大，但是要收费，Eclipse是免费开源的java开发工具，也是目前使用较多的开发工具，所以这里推荐安装Eclipse。</p><p>1.下载eclipse的安装文件，下载地址为：<a href="https://www.eclipse.org/downloads/packages/" target="_blank" rel="noopener">https://www.eclipse.org/downloads/packages/</a> ，选择Eclipse IDE for Committers，并根据自己的电脑系统选择相应的版本，本次选择windows 64：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E4%B8%8B%E8%BD%BDeclipse.png" alt=""></p><p>2.在跳转的界面中，默认的下载地址是日本一所大学，此时点击“select another mirror”，然后将页面往下拉，选择中国的镜像，这样下载速度较快，这里选择大连东软信息学院或者中国科技大学镜像，如下：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E9%80%89%E6%8B%A9%E9%95%9C%E5%83%8F.png" alt=""></p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E9%80%89%E6%8B%A9%E9%95%9C%E5%83%8F2.png" alt=""></p><p>3.选择镜像之后，开始下载，下载完成后的文件名为eclipse-committers-2019-09-R-win32-x86_64.zip，解压，运行eclipse.exe。按照步骤安装。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下载安装java开发工具JDK，以及进行环境的配置，下载安装java开发的ide，因为eclipse是使用较为广泛的java开发ide，所以这里安装的是eclipse。另外，也可以了解一下IntelliJ IDEA（收费的），我觉得IDEA用得更顺手。当然了，都只是开发工具，看拿个更适合自己吧，用得开心就行。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="JDK" scheme="http://xiyouhujing.github.io/tags/JDK/"/>
    
      <category term="eclipse" scheme="http://xiyouhujing.github.io/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>JMeter安装与使用</title>
    <link href="http://xiyouhujing.github.io/2019/09/27/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://xiyouhujing.github.io/2019/09/27/JMeter安装与使用/</id>
    <published>2019-09-27T08:54:13.000Z</published>
    <updated>2019-11-27T09:16:56.881Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>JMeter是基于Java的测试工具，主要对web应用和软件进行接口测试和压力测试。</p></blockquote><a id="more"></a><h3 id="安装前准备"><a class="markdownIt-Anchor" href="#安装前准备"></a> 安装前准备</h3><p>在安装配置JMeter之前，需要确定电脑是否安装有Java环境，可以利用命令提示符查验：</p><p>1.ctrl + R，之后输入cmd，在弹出的命令行窗口中输入java -veision，如果出现如下结果，则表明电脑中存在Java环境，接下来便可以进行JMeter的安装：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/cmd%E6%88%AA%E5%9B%BE.png" alt=""></p><p>2.如果电脑中没有java环境，则首先要下载和配置java的开发工具包JDK，具体步骤参考：<a href="https://xiyouhujing.github.io/2019/09/27/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">https://xiyouhujing.github.io/2019/09/27/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</a></p><h3 id="jmeter下载"><a class="markdownIt-Anchor" href="#jmeter下载"></a> Jmeter下载</h3><p>1.进入Jmeter官网http://jmeter.apache.org/，点击如下按钮：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD.png" alt=""></p><p>2.在跳转的页面中选择版本下载，如图我选择下载的为zip压缩文件：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E4%B8%8B%E8%BD%BD%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6.png" alt=""></p><p>3.将下载下来的压缩文件解压，记住文件的路径，本文的路径为：D:\Jmeter\apache-jmeter-5.1.1。另外，因为下载下来的是jmeter5.1，需要注意的是对应的jdk版本不能太低。</p><h3 id="jmeter环境变量配置"><a class="markdownIt-Anchor" href="#jmeter环境变量配置"></a> Jmeter环境变量配置</h3><p>1.右键“我的电脑”/“此电脑”，点击“属性”，选择“高级系统设置”：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F1.png" alt=""></p><p>2.选择“高级”选项卡，点击“环境变量”：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F2.png" alt=""></p><p>3.在“系统变量”中，分别设置JMETER_HOME和CLASSPATH属性，如果属性不存在，则新建，存在则编辑，具体的参数如下：</p><table><thead><tr><th style="text-align:center">变量名</th><th>变量值</th></tr></thead><tbody><tr><td style="text-align:center">JMETER_HOME</td><td>D:\Jmeter\apache-jmeter-5.1.1   （jmeter的解压路径）</td></tr><tr><td style="text-align:center">CLASSPATH</td><td>%JMETER_HOME%\lib\ext\ApacheJMeter_core.jar;%JMETER_HOME%\lib\jorphan.jar;%JMETER_HOME%\lib\logkit-2.0.jar;</td></tr></tbody></table><h3 id="测试是否安装配置成功"><a class="markdownIt-Anchor" href="#测试是否安装配置成功"></a> 测试是否安装配置成功</h3><p>1.进入jmeter的安装路径，进入bin文件夹，找到jmeter.bat：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E6%B5%8B%E8%AF%951.png" alt=""></p><p>2.双击jmeter.bat文件，此时会出现如下命令窗口，在jmeter工作期间，该窗口都不能关闭</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E6%B5%8B%E8%AF%952.png" alt=""></p><p>3.以上窗口正常出现后，稍等片刻会出现jmeter的工作界面，如下图：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E5%B7%A5%E4%BD%9C%E7%95%8C%E9%9D%A2.png" alt=""></p><h3 id="优化jmeter的使用"><a class="markdownIt-Anchor" href="#优化jmeter的使用"></a> 优化jmeter的使用</h3><p>1.我们发现，每次需要使用jmeter的时候必须进入它的安装文件，再进入bin文件，双击jmeter.bat，这么操作比较麻烦。因此我们可以将该文件发送到桌面生成快捷方式：右键jmeter.bat—&gt;发送到—&gt;桌面快捷方式。</p><p>2.如果觉得发送到桌面的快捷方式图标不好看，和桌面其他快捷方式格格不入，我们还可以修改该快捷方式的图标：右键该快捷方式，选择属性，在出现的窗口中选择“快捷方式”选项卡，点击下方的“更改图标”按钮，如下：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E6%9B%B4%E6%94%B9%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F.png" alt=""></p><p>3.在弹出的窗口中可以选择系统自带的图标：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E4%BF%AE%E6%94%B9%E5%9B%BE%E6%A0%87.png" alt=""></p><p>4.如果想自定义一个图标，可以网上下载一个自己喜欢的图标，<strong>保存为ico格式</strong>，点击“更改图标”窗口的浏览按钮，选择自己想要的图标，点击确定，图标修改完成。</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E4%BF%AE%E6%94%B9%E6%88%90%E8%87%AA%E5%B7%B1%E5%96%9C%E6%AC%A2%E7%9A%84%E5%9B%BE%E6%A0%87.png" alt=""></p><p>5.如果使用默认的jmeter.bat启动的话，会出现一个CMD命令窗口之后再启动jmeter。如果不想每次点击jmeter的快捷方式都要打开命令窗口，可以进行如下修改：</p><p>右键jmeter.bat快捷方式，点击属性，修改目标和启始位置（<strong>根据实际的jmeter解压路径填写</strong>）：</p><p>目标：D:\Jmeter\apache-jmeter-5.1.1\bin\ApacheJMeter.jar</p><p>起始位置：D:\Jmeter\apache-jmeter-5.1.1\bin</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E6%9B%B4%E6%94%B9%E8%B7%AF%E5%BE%84.png" alt=""></p><p><strong>注意：默认ApacheJMeter.jar的打开方式是解压工具winrar，这里需要更改打开方式</strong></p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F.png" alt=""></p><h3 id="使用jmeter进行测试"><a class="markdownIt-Anchor" href="#使用jmeter进行测试"></a> 使用Jmeter进行测试</h3><h4 id="更改jmeter默认语言"><a class="markdownIt-Anchor" href="#更改jmeter默认语言"></a> 更改JMeter默认语言</h4><p>点击【options】&gt;【choose language】变为简体中文，方便操作，如下图：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E6%9B%B4%E6%94%B9%E8%AF%AD%E8%A8%80.png" alt=""></p><h4 id="创建线程组"><a class="markdownIt-Anchor" href="#创建线程组"></a> 创建线程组</h4><p>1、在“测试计划”上右键，依次选择【添加】&gt;【线程（用户）】&gt;【线程组】</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E8%AE%BE%E7%BD%AE%E7%BA%BF%E7%A8%8B.png" alt=""></p><p>2、在线程组界面设置线程数和循环次数，我这里设置线程数为100，循环一次</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E8%AE%BE%E7%BD%AE%E7%BA%BF%E7%A8%8B2.png" alt=""></p><h4 id="添加http请求默认值"><a class="markdownIt-Anchor" href="#添加http请求默认值"></a> 添加HTTP请求默认值</h4><p>1、在刚刚创建的线程组上右键，依次选择【添加】&gt;【配置元件】&gt;【HTTP请求默认值】</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AE%E5%85%83%E4%BB%B6.png" alt=""></p><p>2、在配置元件界面填写我们需要测试的程序协议、地址和端口，如下图所示：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AE%E5%85%83%E4%BB%B62.png" alt=""></p><h4 id="构造http请求"><a class="markdownIt-Anchor" href="#构造http请求"></a> 构造HTTP请求</h4><p>1、在线程组上右键，依次选择【添加】&gt;【取样器】&gt;【HTTP请求】,如下图：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E6%B7%BB%E5%8A%A0http%E8%AF%B7%E6%B1%82.png" alt=""></p><p>2、由于我们刚才在HTTP默认值中设置了默认路径，我们这里使用默认路径的话，就在http请求界面的路径中输入反斜杠“/”就行，如下图：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E6%B7%BB%E5%8A%A0http%E8%AF%B7%E6%B1%822.png" alt=""></p><p>其中消息体数据根据实际情况填写，可以无参数。</p><h4 id="添加http请求头"><a class="markdownIt-Anchor" href="#添加http请求头"></a> 添加HTTP请求头</h4><p>1、在线程组上右键，依次选择【添加】&gt;【配置元件】&gt;【HTTP信息头管理器】，如下图：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/HTTP%E4%BF%A1%E6%81%AF%E5%A4%B4.png" alt=""></p><p>2、因为HTTP请求中没有传输数据，所以，这里设置为Content-Type:application/text（如果在HTTP请求中传入了数据，并且为json格式的数据，则可以设置为Content-Type:application/json）</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/HTTP%E4%BF%A1%E6%81%AF%E5%A4%B42.png" alt=""></p><h4 id="添加断言"><a class="markdownIt-Anchor" href="#添加断言"></a> 添加断言</h4><p>1、在线程组上右键，依次点击【添加】&gt;【断言】&gt;【响应断言】，如下图：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E6%96%AD%E8%A8%80.png" alt=""></p><p>2、根据响应的数据来判断请求是否正常。这里只判断的响应代码是否为200。还可以配置错误信息，如下图所示：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E6%96%AD%E8%A8%802.png" alt=""></p><h4 id="察看结果树"><a class="markdownIt-Anchor" href="#察看结果树"></a> 察看结果树</h4><p>1、在线程组上右键，依次选择【添加】&gt;【监听器】&gt;【察看结果树】</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/JMeter%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/%E5%AF%9F%E7%9C%8B%E7%BB%93%E6%9E%9C%E6%A0%91.png" alt=""></p><p>2、点击运行按钮便可查看结果</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JMeter是基于Java的测试工具，主要对web应用和软件进行接口测试和压力测试。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="测试" scheme="http://xiyouhujing.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="JMeter" scheme="http://xiyouhujing.github.io/tags/JMeter/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记：this关键字</title>
    <link href="http://xiyouhujing.github.io/2019/06/05/Java%E7%AC%94%E8%AE%B0%EF%BC%9Athis%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://xiyouhujing.github.io/2019/06/05/Java笔记：this关键字/</id>
    <published>2019-06-05T07:43:55.000Z</published>
    <updated>2019-11-22T07:11:24.721Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>this是Java中的关键字，除了可以用来强调调用的是本类中的方法，this还有以下作用：</p><ol><li>表示类中的属性</li><li>可以使用this调用本类的构造方法</li><li>this表示当前对象</li></ol></blockquote><a id="more"></a><h3 id="使用this调用本类中的属性"><a class="markdownIt-Anchor" href="#使用this调用本类中的属性"></a> 使用this调用本类中的属性</h3><p>在程序中可以使用this调用本类属性，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n, <span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类中的构造方法意在为类中的属性赋值，但是其实从构造方法传递的参数名称上很难看出n或者a表示的意义，所以进行如下的修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">        age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候就能看出构造方法中两个参数表示的意思了，但是同时也出现了新的问题，构造方法的本意是要将参数传递的name赋值给类中的name属性，把age的值赋给age属性，但是实际运行出来的结果却和我们想像的并不一样，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person01</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person01</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">        age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person01 per1 = <span class="keyword">new</span> Person01(<span class="string">"张三"</span>,<span class="number">33</span>);</span><br><span class="line">        System.out.println(per1.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：<code>姓名：null，年龄：0</code></p><p>从结果来看，程序并没有将构造方法传递进去的参数赋值给属性，也就是说，现在的构造方法并不能将传递进去的参数值赋给类中的熟悉你个，这是由于在赋值时，属性并没有被明确的指出，而这种错误可以利用this关键字来结果，例如进行如下的修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person02</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person02</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;                     <span class="comment">// 明确表示为类中的name属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;                       <span class="comment">// 明确表示为类中的age属性赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person02 per2 = <span class="keyword">new</span> Person02(<span class="string">"张三"</span>, <span class="number">33</span>);</span><br><span class="line">        System.out.println(per2.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：<code>姓名：张三，年龄：33</code></p><blockquote><p>实际上上面程序中的“name = name”、“age = age”中的两个name和两个age都是构造方法中的参数。更实际中的就近原则相似，在程序的构造方法中，已经存在了name和age属性，那么在构造方法中如果要使用name或age属性，则肯定按照就近取用的原则，所以上面的name和age使用都是构造方法中的参数。</p></blockquote><h3 id="使用this调用构造方法"><a class="markdownIt-Anchor" href="#使用this调用构造方法"></a> 使用this调用构造方法</h3><p>如果一个类中有多个构造方法，也可以利用this关键字互相调用。</p><p>假设现在要求不管类中有多少个构造方法，只要对象一被实例化，就打印一行“一个新的对象被实例化”信息出来，很明显，如果在每个构造方法中编写此输出语句肯定不是最佳方法，所以可以利用this关键字完成，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person03</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一个新的Person对象被实例化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person03</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();                                            <span class="comment">// 在此处调用Person类中的无参构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;                                  <span class="comment">// 为name属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;                                    <span class="comment">// 为age属性赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person03 per1 = <span class="keyword">new</span> Person03(<span class="string">"张三"</span>, <span class="number">33</span>);</span><br><span class="line">        System.out.println(per1.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个新的Person对象被实例化</span><br><span class="line">姓名：张三，年龄：33</span><br></pre></td></tr></table></figure><p>该程序中提供了两个构造方法，其中有两个参数的构造方法中使用this()的形式调用该类中的无参构造方法，所以即使是通过有两个参数的构造方法实例化，最终结果还是会把无参构造方法中的内容打印出来。</p><p>另外需要注意的是，在使用this()调用构造方法的时候，由于构造方法是在实例化对象时被自动调用，也就是说在类中的所有方法中，只有构造方法是被优先调用的，所以使用this调用构造方法必须也只能放在构造方法的首行，下面就是一个错误的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        system.out.println(<span class="string">"一个新的Person对象被实例化。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>();                                          <span class="comment">// 错误的调用，只能放在构造方法的首行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();                                          <span class="comment">// 错误的调用，只能放在构造方法的首行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，this调用构造方法时一定要留一个构造方法作为出口，即程序中至少有个构造方法是不使用this调用其他构造方法的。一般都会将无参构造方法作为出口，即在无参构造方法中最好不要再去调用其他构造方法。</p><h3 id="this表示当前对象"><a class="markdownIt-Anchor" href="#this表示当前对象"></a> this表示当前对象</h3><p>this最重要的特点就是表示当前对象，在Java中当前对象就是指当前正在调用类中方法的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person04</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person类 --&gt; "</span> + <span class="keyword">this</span>);         <span class="comment">// 直接打印this</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;                                        <span class="comment">// 此处返回null，为的是让语法不出错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person04 per1 = <span class="keyword">new</span> Person04();</span><br><span class="line">        Person04 per2 = <span class="keyword">new</span> Person04();</span><br><span class="line">        System.out.println(<span class="string">"MAIN方法 --&gt; "</span> + per1);         <span class="comment">// 直接打印对象</span></span><br><span class="line">        per1.getInfo();</span><br><span class="line">        System.out.println(<span class="string">"----------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"MAIN方法 --&gt; "</span> + per2);         <span class="comment">// 直接打印对象</span></span><br><span class="line">        per2.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MAIN方法 --&gt; ThisDemo.Person04@21bcffb5</span><br><span class="line">Person类 --&gt; ThisDemo.Person04@21bcffb5</span><br><span class="line">----------------------------</span><br><span class="line">MAIN方法 --&gt; ThisDemo.Person04@380fb434</span><br><span class="line">Person类 --&gt; ThisDemo.Person04@380fb434</span><br></pre></td></tr></table></figure><p>从结果来看，直接打印对象和调用getInfo()方法打印的结果是一样的，而且在getInfo()方法中打印的永远是this关键字，也就是说哪个对象调用了类中的方法，this就表示哪个对象。</p><p>这样一个特性有什么用处呢？通过下面一个例子来理解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;this是Java中的关键字，除了可以用来强调调用的是本类中的方法，this还有以下作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表示类中的属性&lt;/li&gt;
&lt;li&gt;可以使用this调用本类的构造方法&lt;/li&gt;
&lt;li&gt;this表示当前对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="java基础" scheme="http://xiyouhujing.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记：引用传递及基本应用</title>
    <link href="http://xiyouhujing.github.io/2019/05/24/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8/"/>
    <id>http://xiyouhujing.github.io/2019/05/24/Java笔记：引用传递及基本应用/</id>
    <published>2019-05-24T09:19:08.000Z</published>
    <updated>2019-11-28T03:46:31.633Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>值传递：是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。引用传递：是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数进行修改，将会影响到实际参数。</p></blockquote><a id="more"></a><h3 id="引用传递"><a class="markdownIt-Anchor" href="#引用传递"></a> 引用传递</h3><p>所谓引用传递就是指将堆内存空间的使用权交给多个栈内存空间。</p><h4 id="引用传递范例一"><a class="markdownIt-Anchor" href="#引用传递范例一"></a> 引用传递范例一</h4><p>对象引用传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">30</span>;                    <span class="comment">// 此处为了访问方便，属性暂时不封装</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo d1 = <span class="keyword">new</span> Demo();</span><br><span class="line">        d1.temp = <span class="number">50</span>;</span><br><span class="line">        System.out.println(<span class="string">"fun()方法调用之前："</span> + d1.temp);</span><br><span class="line">        fun(d1);</span><br><span class="line">        System.out.println(<span class="string">"fun()方法调用之后："</span> + d1.temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Demo d2)</span></span>&#123;     <span class="comment">// 此处的方法由主方法直接调用</span></span><br><span class="line">        d2.temp = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fun()方法调用之前：50</span><br><span class="line">fun()方法调用之后：1000</span><br></pre></td></tr></table></figure><p>从结果中可以发现，在fun()方法中接收了Demo类对象d1，并将temp属性的内容进行了修改，因为是引用传递，所以最终temp的值是1000，此程序可以通过下图进行理解：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E7%AC%94%E8%AE%B0%EF%BC%88%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8%EF%BC%89/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E8%8C%83%E4%BE%8B%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE.png" alt=""></p><h4 id="引用传递范例二"><a class="markdownIt-Anchor" href="#引用传递范例二"></a> 引用传递范例二</h4><p>引用传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;                 <span class="comment">// 实例化字符串对象</span></span><br><span class="line">        System.out.println(<span class="string">"fun()方法调用之前："</span> + str1);</span><br><span class="line">        fun(str1);                             <span class="comment">// 调用fun()方法</span></span><br><span class="line">        System.out.println(<span class="string">"fun()方法调用之后："</span> + str1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">fun</span><span class="params">(String str2)</span></span>&#123;      <span class="comment">// 此处的方法由主方法直接调用</span></span><br><span class="line">        str2 = <span class="string">"MLDN"</span>;                         <span class="comment">// 修改字符串内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fun()方法调用之前：hello</span><br><span class="line">fun()方法调用之后：hello</span><br></pre></td></tr></table></figure><p>从运行结果可以发现，虽然此时传递的是一个String类型的对象，但是结果并没有像之前一样发生给吧，因为字符串的内容一旦声明就是不可改变的，改变的只是其内存地址的指向，如下图所示：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E7%AC%94%E8%AE%B0%EF%BC%88%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8%EF%BC%89/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E8%8C%83%E4%BE%8B%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE2.png" alt=""></p><p>以上操作并不难理解，因为每个字符串对象都表示一个匿名对象，这样在fun()方法操作中，如果为str2重新设置内容，就相当于改变了str2的引用，而str1本身的内容并不会受到任何影响。</p><h4 id="引用传递范例三"><a class="markdownIt-Anchor" href="#引用传递范例三"></a> 引用传递范例三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo2</span></span>&#123;</span><br><span class="line">    String temp = <span class="string">"hello"</span>;              <span class="comment">// 此处为了访问方便，属性暂不封装</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo2 d1 = <span class="keyword">new</span> Demo2();</span><br><span class="line">        d1.temp = <span class="string">"word"</span>;               <span class="comment">// 修改对象中的temp属性</span></span><br><span class="line">        System.out.println(<span class="string">"fun()方法调用之前："</span> + d1.temp);</span><br><span class="line">        fun(d1);</span><br><span class="line">        System.out.println(<span class="string">"fun()方法调用之后："</span> + d1.temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Demo2 d2)</span></span>&#123;</span><br><span class="line">        d2.temp = <span class="string">"MLDN"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fun()方法调用之前：word</span><br><span class="line">fun()方法调用之后：MLDN</span><br></pre></td></tr></table></figure><p>从结果可以看出，fun()方法中将属性的内容修改了，内存操作如下图：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E7%AC%94%E8%AE%B0%EF%BC%88%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8%EF%BC%89/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E8%8C%83%E4%BE%8B%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE3.png" alt=""></p><p>本程序的分析方法与第一个范例完全一样，因为String是作为一个Demo2类的属性存在的，而在操作时更改的只是Demo2类中属性的内容。</p><h3 id="接收本类的引用"><a class="markdownIt-Anchor" href="#接收本类的引用"></a> 接收本类的引用</h3><p>以上为引用传递的基本形式，实际上，在对象引用传递上也可以在一个类中接收自己本类对象的实例，而且接受完之后，可以方便地通过此对象直接进行本类中封装属性的访问，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo3</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> temp = <span class="number">30</span>;                     <span class="comment">// 声明temp属性并封装</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Demo3 d2)</span></span>&#123;                 <span class="comment">// 接收本类的引用</span></span><br><span class="line">        d2.temp = <span class="number">50</span>;                          <span class="comment">// 直接通过对象调用本类的私有属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTemp</span><span class="params">()</span></span>&#123;                      <span class="comment">// getter方法</span></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemp</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;                <span class="comment">// setter方法</span></span><br><span class="line">        temp = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo3 d1 = <span class="keyword">new</span> Demo3();               <span class="comment">// 实例化Demo对象</span></span><br><span class="line">        d1.setTemp(<span class="number">50</span>);                       <span class="comment">// 修改temp内容</span></span><br><span class="line">        d1.fun(d1);                           <span class="comment">// 此处把Demo对象传回到自己的类中</span></span><br><span class="line">        System.out.println(<span class="string">"temp = "</span> + d1.getTemp());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：<code>temp = 50</code></p><p>此种引用方式的传递在关于对象比较操作时才会经常使用，其他时候基本上都很少使用。</p><h3 id="范例一对一关系"><a class="markdownIt-Anchor" href="#范例一对一关系"></a> 范例——一对一关系</h3><p>使用引用传递还可以表示出生活中的以下一种场景：一个人有一本书，一本书属于一个人。因而可以得出这样的结论：人应该是一个具体的类，书也应该是一个具体的类，在人的类中应该存在一个属性表示书，在书的类中也应该存在一个属性表示人。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;                            <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;                                <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Book book;                              <span class="comment">// 一个人有一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;            <span class="comment">// 通过构造方法设置内容</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">        <span class="keyword">this</span>.setAge(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;                  <span class="comment">// 设置姓名</span></span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;                        <span class="comment">// 返回姓名</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;                      <span class="comment">// 设置年龄</span></span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;                            <span class="comment">// 返回年龄</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBook</span><span class="params">(Book b)</span></span>&#123;                    <span class="comment">// 设置本人的书</span></span><br><span class="line">        book = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBook</span><span class="params">()</span></span>&#123;                          <span class="comment">// 得到本人的书</span></span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;                          <span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price;                           <span class="comment">// 价格</span></span><br><span class="line">    <span class="keyword">private</span> Person person;                         <span class="comment">// 一本书属于一个人</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, <span class="keyword">float</span> price)</span></span>&#123;        <span class="comment">// 通过构造方法设置属性内容</span></span><br><span class="line">        <span class="keyword">this</span>.setTitle(title);</span><br><span class="line">        <span class="keyword">this</span>.setPrice(price);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String t)</span></span>&#123;</span><br><span class="line">        title = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> p)</span></span>&#123;</span><br><span class="line">        price = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">30</span>);                  <span class="comment">// 实例化Person对象</span></span><br><span class="line">        Book bk = <span class="keyword">new</span> Book(<span class="string">"JAVA SE 核心开发"</span>, <span class="number">90.0f</span>);        <span class="comment">// 实例化Book对象</span></span><br><span class="line">        per.setBook(bk);                                     <span class="comment">// 设置两个对象间的关系，一个人有一本书</span></span><br><span class="line">        bk.setPerson(per);                                  <span class="comment">// 设置两个对象间的关系，一本书属于一个人</span></span><br><span class="line">        System.out.println(<span class="string">"从人找到书 --&gt; 姓名："</span> + per.getName() + <span class="string">"；年龄："</span></span><br><span class="line">        + per.getAge() + <span class="string">"；书名："</span> + per.getBook().getTitle() + <span class="string">"；价格："</span></span><br><span class="line">        + per.getBook().getPrice());</span><br><span class="line">        System.out.println(<span class="string">"从书找到人 --&gt; 书名："</span> + bk.getTitle() + <span class="string">"；价格："</span></span><br><span class="line">        + bk.getPrice() + <span class="string">"；姓名："</span> + bk.getPerson().getName() + <span class="string">"；年龄："</span></span><br><span class="line">        + bk.getPerson().getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">从人找到书 --&gt; 姓名：张三；年龄：30；书名：JAVA SE 核心开发；价格：90.0</span><br><span class="line">从书找到人 --&gt; 书名：JAVA SE 核心开发；价格：90.0；姓名：张三；年龄：30</span><br></pre></td></tr></table></figure><h3 id="范例进一步深入一对一关系"><a class="markdownIt-Anchor" href="#范例进一步深入一对一关系"></a> 范例——进一步深入一对一关系</h3><p>现在有一个新的要求，一个人有一个孩子，每个孩子还会有一本书。因为一个孩子也是一个人，所以并不需要单独建立一个孩子类，只需要简单的修改Person类，在类中增加一个自己的引用即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;                            <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;                                <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Book1 book;                             <span class="comment">// 一个人有一本书</span></span><br><span class="line">    <span class="keyword">private</span> Person1 child;                           <span class="comment">// 一个人有一个孩子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person1</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;            <span class="comment">// 通过构造方法设置内容</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">        <span class="keyword">this</span>.setAge(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;                  <span class="comment">// 设置姓名</span></span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;                        <span class="comment">// 返回姓名</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;                      <span class="comment">// 设置年龄</span></span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;                            <span class="comment">// 返回年龄</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBook</span><span class="params">(Book1 b)</span></span>&#123;                    <span class="comment">// 设置本人的书</span></span><br><span class="line">        book = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book1 <span class="title">getBook</span><span class="params">()</span></span>&#123;                          <span class="comment">// 得到本人的书</span></span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChild</span><span class="params">(Person1 child)</span></span>&#123;             <span class="comment">// 设置孩子</span></span><br><span class="line">        <span class="keyword">this</span>.child = child;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person1 <span class="title">getChild</span><span class="params">()</span></span>&#123;                       <span class="comment">// 得到孩子</span></span><br><span class="line">        <span class="keyword">return</span> child;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book1</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;                          <span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price;                           <span class="comment">// 价格</span></span><br><span class="line">    <span class="keyword">private</span> Person1 person;                         <span class="comment">// 一本书属于一个人</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book1</span><span class="params">(String title, <span class="keyword">float</span> price)</span></span>&#123;        <span class="comment">// 通过构造方法设置属性内容</span></span><br><span class="line">        <span class="keyword">this</span>.setTitle(title);</span><br><span class="line">        <span class="keyword">this</span>.setPrice(price);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String t)</span></span>&#123;</span><br><span class="line">        title = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> p)</span></span>&#123;</span><br><span class="line">        price = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person1 person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person1 <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person1 per = <span class="keyword">new</span> Person1(<span class="string">"张三"</span>, <span class="number">30</span>);            <span class="comment">// 实例化Person对象</span></span><br><span class="line">        Person1 cld = <span class="keyword">new</span> Person1(<span class="string">"张草"</span>, <span class="number">10</span>);            <span class="comment">// 定义一个孩子</span></span><br><span class="line">        Book1 bk = <span class="keyword">new</span> Book1(<span class="string">"JAVA SE 核心开发"</span>, <span class="number">90.0f</span>);        <span class="comment">// 实例化Book对象</span></span><br><span class="line">        Book1 b = <span class="keyword">new</span> Book1(<span class="string">"一千零一夜"</span>, <span class="number">30.3f</span>);               <span class="comment">// 定义孩子的书</span></span><br><span class="line">        per.setBook(bk);                                    <span class="comment">// 设置对象间的关系，一个人有一本书</span></span><br><span class="line">        bk.setPerson(per);                                  <span class="comment">// 设置对象间的关系，一本书属于一个人</span></span><br><span class="line">        cld.setBook(b);                                     <span class="comment">// 设置对象间的关系，一个孩子有一本书</span></span><br><span class="line">        b.setPerson(cld);                                   <span class="comment">// 设置对象间的关系，一本书属于一个孩子</span></span><br><span class="line">        per.setChild(cld);                                  <span class="comment">// 设置对象间的关系，一个人有一个孩子</span></span><br><span class="line">        System.out.println(<span class="string">"从人找到书 --&gt; 姓名："</span> + per.getName() + <span class="string">"；年龄："</span></span><br><span class="line">                + per.getAge() + <span class="string">"；书名："</span> + per.getBook().getTitle() + <span class="string">"；价格："</span></span><br><span class="line">                + per.getBook().getPrice());</span><br><span class="line">        System.out.println(<span class="string">"从书找到人 --&gt; 书名："</span> + bk.getTitle() + <span class="string">"；价格："</span></span><br><span class="line">                + bk.getPrice() + <span class="string">"；姓名："</span> + bk.getPerson().getName() + <span class="string">"；年龄："</span></span><br><span class="line">                + bk.getPerson().getAge());</span><br><span class="line">        System.out.println(per.getName() + <span class="string">"的孩子 --&gt; 姓名："</span> + per.getChild().getName()</span><br><span class="line">        + <span class="string">"；年龄："</span> + per.getChild().getAge() + <span class="string">"；书名："</span> + per.getChild().getBook().getTitle()</span><br><span class="line">        + <span class="string">"；价格："</span> + per.getChild().getBook().getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从人找到书 --&gt; 姓名：张三；年龄：30；书名：JAVA SE 核心开发；价格：90.0</span><br><span class="line">从书找到人 --&gt; 书名：JAVA SE 核心开发；价格：90.0；姓名：张三；年龄：30</span><br><span class="line">张三的孩子 --&gt; 姓名：张草；年龄：10；书名：一千零一夜；价格：30.3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;值传递：是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。引用传递：是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数进行修改，将会影响到实际参数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="java基础" scheme="http://xiyouhujing.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记：String</title>
    <link href="http://xiyouhujing.github.io/2019/05/16/Java%E7%AC%94%E8%AE%B0%EF%BC%9AString/"/>
    <id>http://xiyouhujing.github.io/2019/05/16/Java笔记：String/</id>
    <published>2019-05-16T09:05:40.000Z</published>
    <updated>2019-11-28T03:52:37.404Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>String类定义时单词的首字母大写，所以String本身也是一个类本类，但是此类在使用时却有很多的要求，而且此类在Java中也算是一个比较特殊的类。</p></blockquote><a id="more"></a><h3 id="实例化string对象"><a class="markdownIt-Anchor" href="#实例化string对象"></a> 实例化String对象</h3><p>对于String可以采用直接赋值的方式进行操作，如下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">"LiXingHua"</span>;            <span class="comment">// 实例化String对象</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name);  <span class="comment">// 输出字符串的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在String的使用上还有另外一种形式的实例化方法，就是直接调用String类中的构造方法，在String类存在以下的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span></span></span><br></pre></td></tr></table></figure><p>所以上面的代码也可以通过如下的代码进行编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = <span class="keyword">new</span> String(<span class="string">"LiXingHua"</span>);        <span class="comment">// 实例化String对象</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name);          <span class="comment">// 输出字符串的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string的内容比较"><a class="markdownIt-Anchor" href="#string的内容比较"></a> String的内容比较</h3><p>对于基本数据类型，可以通过“==”进行内容的比较，如下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">30</span>;                            <span class="comment">// 声明一个整型变量</span></span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">30</span>;                            <span class="comment">// 声明一个整型变量</span></span><br><span class="line">        System.out.println(<span class="string">"两个数字的比较结果："</span> + (x == y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：<code>两个数字的比较结果：true</code></p><p>下面按照以上的程序思路进行两个字符串的比较操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;                          <span class="comment">// 直接赋值</span></span><br><span class="line">        String str2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);     <span class="comment">// 通过new赋值</span></span><br><span class="line">        String str3 = str2;                             <span class="comment">// 传递引用</span></span><br><span class="line">        System.out.println(<span class="string">"str1 == str2 --&gt;"</span> + (str1 == str2));</span><br><span class="line">        System.out.println(<span class="string">"str1 == str3 --&gt;"</span> + (str1 == str3));</span><br><span class="line">        System.out.println(<span class="string">"str2 == str3 --&gt;"</span> + (str2 == str3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 == str2 --&gt;false</span><br><span class="line">str1 == str3 --&gt;false</span><br><span class="line">str2 == str3 --&gt;true</span><br></pre></td></tr></table></figure><p>从程序运行结果中可以发现，虽然以上程序中String的内容都一样，但是比较结果有的相同，有的却不同。主要原因在于堆内存和栈内存。上面每个String对象的内容实际上都保存在堆内存中，而且堆内存中的内容相等。但是对于str1和str2来说，其内容分别保存在了不同的空间，所以即使内容相等，地址的值也是不相等的，“==”是用来进行数值比较的，所以str1和str2不相等。从程序中可以发现str2和str3指向了同一个堆内存空间，是同一个地址，所以最终结果是str2和str3的地址值相等的，同理str1和str3的地址值是不相等的，所以返回了false。栈内存和堆内存的示意图如下：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E7%AC%94%E8%AE%B0%EF%BC%88String%EF%BC%89/String%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A3%B0%E6%98%8E.png" alt=""></p><p>那么既然无法使用“==”进行判断，那该如何去判断两个字符串的内容是否相等呢？此时，即可利用String中专门提供的方法（String是一个类，则会存在各种方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(String str)</span></span></span><br></pre></td></tr></table></figure><p>例如，使用equals方法对String的内容进行比较：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;                         <span class="comment">// 直接赋值</span></span><br><span class="line">        String str2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);             <span class="comment">// 通过new赋值</span></span><br><span class="line">        String str3 = str2;                            <span class="comment">// 传递引用</span></span><br><span class="line">        System.out.println(<span class="string">"str1 equals str2 --&gt;"</span> + (str1.equals(str2)));</span><br><span class="line">        System.out.println(<span class="string">"str1 equals str3 --&gt;"</span> + (str1.equals(str3)));</span><br><span class="line">        System.out.println(<span class="string">"str2 equals str2 --&gt;"</span> + (str2.equals(str3)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 equals str2 --&gt;true</span><br><span class="line">str1 equals str3 --&gt;true</span><br><span class="line">str2 equals str2 --&gt;true</span><br></pre></td></tr></table></figure><p>因为equals()方法的作用是将内容进行比较，所以此处返回的结果都为true。</p><h3 id="string两种实例化方式的区别"><a class="markdownIt-Anchor" href="#string两种实例化方式的区别"></a> String两种实例化方式的区别</h3><p>String又两种实例化方式，一种是通过直接赋值的方式，另一种是使用标准的new调用构造方式完成实例化。一个字符串就是一个String类的匿名对象，匿名对象就是已经开辟了堆内存空间的并可以直接使用的对象。</p><p>验证一个字符串就是String的匿名对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\"hello\" equals \"hello\" --&gt;"</span> + (<span class="string">"hello"</span>.equals(<span class="string">"hello"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：<code>&quot;hello&quot; equals &quot;hello&quot; --&gt;true</code></p><p>从结果可以发现，一个字符串确实可以调用String类中的方法，也就证明了一个字符串就是一个String类的匿名对象。所以对于以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><p>实际上就是把一个堆中开辟好的内存空间的使用权给了str1对象，而使用这种方式还有另一个好处，就是如果一个字符串已经被一个名称所引用，则以后再有相同的字符串声明时，就不会重新开辟空间，而是继续使用已经开辟好的堆内存。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明3个字符串变量，每个变量的内容都是一样的</span></span><br><span class="line">        String str1 = <span class="string">"hello"</span>;</span><br><span class="line">        String str2 = <span class="string">"hello"</span>;</span><br><span class="line">        String str3 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(<span class="string">"str1 == str2 --&gt;"</span> + (str1 == str2));</span><br><span class="line">        System.out.println(<span class="string">"str1 == str3 --&gt;"</span> + (str1 == str3));</span><br><span class="line">        System.out.println(<span class="string">"str2 == str3 --&gt;"</span> + (str2 == str3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 == str2 --&gt;true</span><br><span class="line">str1 == str3 --&gt;true</span><br><span class="line">str2 == str3 --&gt;true</span><br></pre></td></tr></table></figure><p>三种比较都是true，说明3个字符串指向的堆内存地址空间都是同一个，所以，当String使用直接赋值的方式之后，只要是声明的字符串内容相同，则都不会再开辟新的内存空间。</p><blockquote><p><strong>在Java中会提供一个字符串池来保存全部的内容</strong></p><p>对于String的以上操作，在Java中称为共享设计，这种设计思路是，在Java中形成一个对象池，在这个对象池中保存多个对象，新实例化的对象如果已经在池中定义了，则不再重新定义，而是从池中直接取出继续使用。String就是因为采用了这样的设计，所以当内容重复时，会将对象指向已存在的实例空间。</p></blockquote><p>下面为使用new String()的方式实例化String对象的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo08</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个字符串就是一个String类的匿名对象，而如果使用new关键字，不管如何都会再开辟一个新的空间，但是此时，此空间的内容还是hello，所以上面的代码实际上是开辟了两个内存空间，但真正使用的只是一个使用关键字new开辟的空间，另外一个就是垃圾空间了，如图：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E7%AC%94%E8%AE%B0%EF%BC%88String%EF%BC%89/new%E5%8A%A0String%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%AF%B9%E8%B1%A1.png" alt=""></p><p>通过以上两种实现方式比较可以知道那种方式更合适，对于字符串的操作就采用直接赋值的方式完成，而不要采用构造方法传递字符串的方式完成，这样可以避免产生垃圾空间，当然，在String类中也存在一些其他的构造方法。</p><h3 id="字符串的内容不可改变"><a class="markdownIt-Anchor" href="#字符串的内容不可改变"></a> 字符串的内容不可改变</h3><p>在使用String类进行操作时还有一个特性是特别重要的，那就是字符串的内容一旦声明则不可以改变。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"hello"</span>;        <span class="comment">// 声明字符串</span></span><br><span class="line">        str = str + <span class="string">" world!"</span>;        <span class="comment">// 修改字符串</span></span><br><span class="line">        System.out.println(<span class="string">"str = "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：<code>str = hello world!</code>。</p><p>从结果来看，String对象的内容确实已经修改了，但是其实String对象内容的改变是通过内存地址的“断开-连接”变化完成的，而本身字符串中的内容并没有任何变化，具体如下图：</p><p><img src="https://raw.githubusercontent.com/xiyouhujing/TyporaPic/master/Java%E7%AC%94%E8%AE%B0%EF%BC%88String%EF%BC%89/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%86%85%E5%AE%B9%E7%9A%84%E4%BF%AE%E6%94%B9.png" alt=""></p><h3 id="string类中常用的方法"><a class="markdownIt-Anchor" href="#string类中常用的方法"></a> String类中常用的方法</h3><h4 id="字符串与字符数组的转换"><a class="markdownIt-Anchor" href="#字符串与字符数组的转换"></a> 字符串与字符数组的转换</h4><p>字符串可以使用toCharArray()方法变成一个字符数组，也可以使用String类的构造方法把一个字符数组变成一个字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;                    <span class="comment">// 定义字符串</span></span><br><span class="line">        <span class="keyword">char</span> c[] = str1.toCharArray();            <span class="comment">// 将字符串变为字符数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++)&#123;       <span class="comment">// 循环输出</span></span><br><span class="line">            System.out.print(c[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(c);              <span class="comment">// 将全部字符数组变为String</span></span><br><span class="line">        String str3 = <span class="keyword">new</span> String(c, <span class="number">0</span>, <span class="number">3</span>);        <span class="comment">// 将部分字符数组变为String</span></span><br><span class="line">        System.out.println(str2);                 <span class="comment">// 输出字符串</span></span><br><span class="line">        System.out.println(str3);                 <span class="comment">// 输出字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">hel</span><br></pre></td></tr></table></figure><p>程序一开始将一个字符串变成一个字符数组，字符串的长度就是转换之后字符数组的长度，也可以把一个字符数组的全部或者部分转换为字符串。</p><h4 id="从字符串中取出指定位置的字符"><a class="markdownIt-Anchor" href="#从字符串中取出指定位置的字符"></a> 从字符串中取出指定位置的字符</h4><p>可以使用String类中的charAt()方法去除字符串指定位置的字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;                 <span class="comment">// 声明String对象</span></span><br><span class="line">        System.out.println(str1.charAt(<span class="number">3</span>));    <span class="comment">// 取出字符串中的第4个字符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序最终取出的字符为“l”，因为字符从0开始编号，编号为3的字符为“l”。</p><h4 id="字符串与byte数组的转换"><a class="markdownIt-Anchor" href="#字符串与byte数组的转换"></a> 字符串与byte数组的转换</h4><p>字符串可以通过getBytes()方法将String变为一个byte数组，然后可以通过String的构造方法将一个字节数组重新变为字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;</span><br><span class="line">        <span class="keyword">byte</span> b[] = str1.getBytes();                  <span class="comment">// 将字符串变为byte数组</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(b));           <span class="comment">// 将全部byte数组变为字符串</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(b, <span class="number">1</span>, <span class="number">3</span>));     <span class="comment">// 将部分byte数组变为字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">ell</span><br></pre></td></tr></table></figure><h4 id="取得一个字符串的长度"><a class="markdownIt-Anchor" href="#取得一个字符串的长度"></a> 取得一个字符串的长度</h4><p>在String中使用length()方法取得字符串的长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello LiXingHua"</span>;          <span class="comment">// 定义字符串变量</span></span><br><span class="line">        System.out.println(<span class="string">"\""</span> + str1 + <span class="string">"\" 的长度为："</span> + str1.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：<code>&quot;hello LiXingHua&quot; 的长度为：15</code>。</p><blockquote><p><strong>length和length()的区别</strong></p><p>在数组操作中，使用length取得数组的长度，但是操作的最后没有“()”，而字符串调用length是一个方法，只要是方法后面都有“()”。</p></blockquote><h4 id="查找一个指定的字符串是否存在"><a class="markdownIt-Anchor" href="#查找一个指定的字符串是否存在"></a> 查找一个指定的字符串是否存在</h4><p>在String中使用indexOf()方法，可以返回指定的字符串的位置，如果不存在则返回-1，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"abcdefgcgh"</span>;</span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">"c"</span>));        <span class="comment">// 查到返回位置</span></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">"c"</span>, <span class="number">3</span>));       <span class="comment">// 查到返回位置，从第4个开始查找</span></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">"x"</span>));        <span class="comment">// 没有查到返回-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">7</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><h4 id="去掉左右空格"><a class="markdownIt-Anchor" href="#去掉左右空格"></a> 去掉左右空格</h4><p>使用trim()方法可以去掉字符串左、右空格，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"     hello           "</span>;</span><br><span class="line">        System.out.println(str1.trim());           <span class="comment">// 去掉左右空格后输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：<code>hello</code></p><p>从程序运行的结果来看，字符串左右两边的空格都被清除掉了。</p><h4 id="字符串截取"><a class="markdownIt-Anchor" href="#字符串截取"></a> 字符串截取</h4><p>在String中提供了两个substring()方法，一个是从指定位置截取到字符串结尾i，另一个是截取指定范围的内容。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello world"</span>;</span><br><span class="line">        System.out.println(str1.substring(<span class="number">6</span>));       <span class="comment">// 从第7个位置开始截取</span></span><br><span class="line">        System.out.println(str1.substring(<span class="number">0</span>, <span class="number">5</span>));    <span class="comment">// 截取0~5个位置的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">world</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>需要注意的是，当截取指定范围的字符串时，截取的内容包括空号中前一个数字指定的位置，不包括括号中后一个数字指定的位置。</p><h4 id="按照指定的字符串拆分字符串"><a class="markdownIt-Anchor" href="#按照指定的字符串拆分字符串"></a> 按照指定的字符串拆分字符串</h4><p>在String中通过split()方法可以进行字符串的拆分操作，拆分的数据将以字符串数组的形式返回。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello world"</span>;</span><br><span class="line">        String s[] = str1.split(<span class="string">" "</span>);        <span class="comment">// 按空格进行字符串的拆分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length; i++)&#123;</span><br><span class="line">            System.out.println(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure><h4 id="字符串的大小写转换"><a class="markdownIt-Anchor" href="#字符串的大小写转换"></a> 字符串的大小写转换</h4><p>在用户输入信息时，有时需要统一输入数据的大小写，此时就可以使用toUpperCase()和toLowerCase()两个方法完成字符串大小写的转换操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"将\"hello world\"转换成大写："</span> + <span class="string">"hello world"</span>.toUpperCase());</span><br><span class="line">        System.out.println(<span class="string">"将\"HELLO WORLD\"转换成小写："</span> + <span class="string">"HELLO WORLD"</span>.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将&quot;hello world&quot;转换成大写：HELLO WORLD</span><br><span class="line">将&quot;HELLO WORLD&quot;转换成小写：hello world</span><br></pre></td></tr></table></figure><h4 id="判断是否以指定的字符串开头或结尾"><a class="markdownIt-Anchor" href="#判断是否以指定的字符串开头或结尾"></a> 判断是否以指定的字符串开头或结尾</h4><p>在String中使用startsWith()方法可以判断字符串是否以指定的内容开头，使用endsWith()方法可以判断字符串是否以指定的内容结尾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"**HELLO"</span>;</span><br><span class="line">        String str2 = <span class="string">"HELLO**"</span>;</span><br><span class="line">        <span class="keyword">if</span> (str1.startsWith(<span class="string">"**"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"(**HELLO)以 ** 开头"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str2.endsWith(<span class="string">"**"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"(HELLO**)以 ** 结尾"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(**HELLO)以 ** 开头</span><br><span class="line">(HELLO**)以 ** 结尾</span><br></pre></td></tr></table></figure><h4 id="不区分大小写进行字符串笔记"><a class="markdownIt-Anchor" href="#不区分大小写进行字符串笔记"></a> 不区分大小写进行字符串笔记</h4><p>在String中可以通过equals()方法进行字符串内容的比较，但是这种比较方法是区分大小写的比较，如果要完成不区分大小写的比较则可以使用equalsIgnoreCase()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"HELLO"</span>;</span><br><span class="line">        String str2 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(<span class="string">"\"HELLO\" equals \"hello\": "</span> + str1.equals(str2));        <span class="comment">// 区分大小写比较</span></span><br><span class="line">        System.out.println(<span class="string">"\"HELLO\" equalsIngoreCase \"hello\": "</span> + str2.equalsIgnoreCase(str2));         <span class="comment">// 区分大小写比较</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;HELLO&quot; equals &quot;hello&quot;: false</span><br><span class="line">&quot;HELLO&quot; equalsIngoreCase &quot;hello&quot;: true</span><br></pre></td></tr></table></figure><h4 id="将一个指定的字符串替换成其他的字符串"><a class="markdownIt-Anchor" href="#将一个指定的字符串替换成其他的字符串"></a> 将一个指定的字符串替换成其他的字符串</h4><p>使用String的replaceAll()方法可以将字符串的指定内容进行替换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAPIDemo12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"hello"</span>;</span><br><span class="line">        String newStr = str.replaceAll(<span class="string">"l"</span>, <span class="string">"x"</span>);    <span class="comment">// 将所有的l替换成x</span></span><br><span class="line">        System.out.println(<span class="string">"替换之后的结果："</span> + newStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：<code>替换之后的结果：hexxo</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;String类定义时单词的首字母大写，所以String本身也是一个类本类，但是此类在使用时却有很多的要求，而且此类在Java中也算是一个比较特殊的类。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="java基础" scheme="http://xiyouhujing.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java实例讲解：类设计分析</title>
    <link href="http://xiyouhujing.github.io/2019/05/15/Java%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3%EF%BC%9A%E7%B1%BB%E8%AE%BE%E8%AE%A1%E5%88%86%E6%9E%90/"/>
    <id>http://xiyouhujing.github.io/2019/05/15/Java实例讲解：类设计分析/</id>
    <published>2019-05-15T07:53:25.000Z</published>
    <updated>2019-11-28T00:52:33.989Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h3><p>定义并测试一个名为Student的类，包括的属性有“学号”、“姓名”以及3门课程“数学”、“英语”和“计算机”的成绩，包括的方法有计算3门课程的“总分”、“平均分”、“最高分”以及“最低分”。</p><a id="more"></a><h3 id="属性及类型"><a class="markdownIt-Anchor" href="#属性及类型"></a> 属性及类型</h3><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">属性</th><th style="text-align:center">属性类型</th><th style="text-align:center">属性名称</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">学号</td><td style="text-align:center">String</td><td style="text-align:center">stuno</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">姓名</td><td style="text-align:center">String</td><td style="text-align:center">name</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">数学成绩</td><td style="text-align:center">float</td><td style="text-align:center">math</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">英语成绩</td><td style="text-align:center">float</td><td style="text-align:center">english</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">计算机成绩</td><td style="text-align:center">float</td><td style="text-align:center">computer</td></tr></tbody></table><h3 id="需要的方法"><a class="markdownIt-Anchor" href="#需要的方法"></a> 需要的方法</h3><table><thead><tr><th>序号</th><th>方法名称</th><th>返回值类型</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>public void setStuno(String s)</td><td>void</td><td>设置学生编号</td></tr><tr><td>2</td><td>public void setName(String n)</td><td>void</td><td>设置学生姓名</td></tr><tr><td>3</td><td>public void setMath(float m)</td><td>void</td><td>设置数学成绩</td></tr><tr><td>4</td><td>public void setEnglish(float e)</td><td>void</td><td>设置英语成绩</td></tr><tr><td>5</td><td>public void setComputer(float c)</td><td>void</td><td>设置计算机成绩</td></tr><tr><td>6</td><td>public String getStuno()</td><td>String</td><td>取得学生编号</td></tr><tr><td>7</td><td>public String getName()</td><td>String</td><td>取得学生姓名</td></tr><tr><td>8</td><td>public float getMath()</td><td>float</td><td>取得数学成绩</td></tr><tr><td>9</td><td>public float getEnglish()</td><td>float</td><td>取得英语成绩</td></tr><tr><td>10</td><td>public float getComputer()</td><td>float</td><td>取得计算机成绩</td></tr><tr><td>11</td><td>public float sum()</td><td>float</td><td>计算成绩总和</td></tr><tr><td>12</td><td>public float avg()</td><td>float</td><td>计算平均成绩</td></tr><tr><td>13</td><td>public float max()</td><td>float</td><td>求出最高成绩</td></tr><tr><td>14</td><td>public float min()</td><td>float</td><td>求出最低成绩</td></tr><tr><td>151</td><td>public Student()</td><td>-</td><td>无参构造方法</td></tr><tr><td>16</td><td>public Student(String stuno, String name, float math, float english, float computer)</td><td>-</td><td>在对象实例化时直接将学号、姓名、数学成绩、英语成绩、计算机成绩设置进去</td></tr></tbody></table><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String stuno;                      <span class="comment">// 学生编号</span></span><br><span class="line">    <span class="keyword">private</span> String name;                       <span class="comment">// 学生姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> math;                        <span class="comment">// 数学成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> english;                     <span class="comment">// 英语成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> computer;                    <span class="comment">// 计算机成绩</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;                          <span class="comment">// 定义无参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义有五个参数的构造方法，为类中的属性初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String stuno, String name, <span class="keyword">float</span> math, <span class="keyword">float</span> english, <span class="keyword">float</span> computer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setStuno(stuno);</span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">        <span class="keyword">this</span>.setMath(math);</span><br><span class="line">        <span class="keyword">this</span>.setEnglish(english);</span><br><span class="line">        <span class="keyword">this</span>.setComputer(computer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuno</span><span class="params">(String s)</span></span>&#123;             <span class="comment">// 设置编号</span></span><br><span class="line">        stuno = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;              <span class="comment">// 设置姓名</span></span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMath</span><span class="params">(<span class="keyword">float</span> m)</span></span>&#123;               <span class="comment">// 设置数学成绩</span></span><br><span class="line">        math = m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnglish</span><span class="params">(<span class="keyword">float</span> e)</span></span>&#123;             <span class="comment">// 设置英语成绩</span></span><br><span class="line">        english = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComputer</span><span class="params">(<span class="keyword">float</span> c)</span></span>&#123;            <span class="comment">// 设置计算机成绩</span></span><br><span class="line">        computer = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStuno</span><span class="params">()</span></span>&#123;                   <span class="comment">// 取得编号</span></span><br><span class="line">        <span class="keyword">return</span> stuno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;                     <span class="comment">// 取得姓名</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getMath</span><span class="params">()</span></span>&#123;                      <span class="comment">// 取得数学成绩</span></span><br><span class="line">        <span class="keyword">return</span> math;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getEnglish</span><span class="params">()</span></span>&#123;                   <span class="comment">// 取得英语成绩</span></span><br><span class="line">        <span class="keyword">return</span> english;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getComputer</span><span class="params">()</span></span>&#123;                  <span class="comment">// 取得计算机成绩</span></span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">sum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> math + english + computer;        <span class="comment">// 计算总分</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">avg</span><span class="params">()</span></span>&#123;                          <span class="comment">// 计算平均分</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sum() / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">max</span><span class="params">()</span></span>&#123;                          <span class="comment">// 最高成绩</span></span><br><span class="line">        <span class="keyword">float</span> max = math;</span><br><span class="line">        max = max &gt; computer ? max : computer;     <span class="comment">// 使用三目运算符</span></span><br><span class="line">        max = max &gt; english ? max : english;       <span class="comment">// 使用三目运算符</span></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">min</span><span class="params">()</span></span>&#123;                           <span class="comment">// 最低成绩</span></span><br><span class="line">        <span class="keyword">float</span> min = math;</span><br><span class="line">        min = math &lt; computer ? math : computer;    <span class="comment">// 使用三目运算符</span></span><br><span class="line">        min = math &lt; english ? math : english;      <span class="comment">// 使用三目运算符</span></span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">null</span>;                       <span class="comment">// 声明对象</span></span><br><span class="line">        <span class="comment">// 实例化Student对象，并通过构造方法赋值</span></span><br><span class="line">        stu = <span class="keyword">new</span> Student(<span class="string">"MLDN-33"</span>, <span class="string">"李兴华"</span>, <span class="number">95.0f</span>, <span class="number">89.0f</span>, <span class="number">96.0f</span>);</span><br><span class="line">        System.out.println(<span class="string">"学生编号："</span> + stu.getStuno());</span><br><span class="line">        System.out.println(<span class="string">"学生姓名："</span> + stu.getName());</span><br><span class="line">        System.out.println(<span class="string">"数学成绩："</span> + stu.getMath());</span><br><span class="line">        System.out.println(<span class="string">"英语成绩："</span> + stu.getEnglish());</span><br><span class="line">        System.out.println(<span class="string">"计算机成绩："</span> + stu.getComputer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">学生编号：MLDN-33</span><br><span class="line">学生姓名：李兴华</span><br><span class="line">数学成绩：95.0</span><br><span class="line">英语成绩：89.0</span><br><span class="line">计算机成绩：96.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目&quot;&gt;&lt;/a&gt; 题目&lt;/h3&gt;
&lt;p&gt;定义并测试一个名为Student的类，包括的属性有“学号”、“姓名”以及3门课程“数学”、“英语”和“计算机”的成绩，包括的方法有计算3门课程的“总分”、“平均分”、“最高分”以及“最低分”。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="java实例" scheme="http://xiyouhujing.github.io/tags/java%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记：匿名对象</title>
    <link href="http://xiyouhujing.github.io/2019/05/15/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1/"/>
    <id>http://xiyouhujing.github.io/2019/05/15/Java笔记：匿名对象/</id>
    <published>2019-05-15T07:27:00.000Z</published>
    <updated>2019-11-22T03:14:28.074Z</updated>
    
    <content type="html"><![CDATA[<p>匿名对象就是没有明确给出名称的对象。一般匿名对象只使用一次，而且匿名对象只在堆内存中开辟空间，而不存在栈内存的引用。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;                        <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;                            <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;        <span class="comment">// 定义构造方法，为属性初始化</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);                     <span class="comment">// 为name属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.setAge(age);                       <span class="comment">// 为age属性赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + getName() + <span class="string">"，年龄："</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; a &lt;= <span class="number">150</span>)&#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonameDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">30</span>).tell();            <span class="comment">// 匿名对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名：张三，年龄：30</span><br></pre></td></tr></table></figure><p>在以上程序的主方法中可以发现，直接使用了“new Person(“张三”, “30”)”语句，这实际上就是一个匿名对象，与之前声明的对象不同，此处没有任何栈内存引用它，所以使用一次之后就等待被垃圾收集机制回收。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;匿名对象就是没有明确给出名称的对象。一般匿名对象只使用一次，而且匿名对象只在堆内存中开辟空间，而不存在栈内存的引用。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="java基础" scheme="http://xiyouhujing.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记：构造方法</title>
    <link href="http://xiyouhujing.github.io/2019/05/13/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
    <id>http://xiyouhujing.github.io/2019/05/13/Java笔记：构造方法/</id>
    <published>2019-05-13T09:36:47.000Z</published>
    <updated>2019-11-22T07:10:15.982Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>在面向对象程序中，构造方法的主要作用是为类中的属性初始化。在之前的学习过程中可以发现，在程序中只要出现了“()”就表示调用了方法，那么这个方法实际上就是表示要调用构造方法，构造方法可视为一种特殊的方法，它的定义方式与普通方法类似。</p></blockquote><a id="more"></a><p>Java中构造方法的语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class 类名称&#123;</span><br><span class="line">    访问权限 类名称（类型1 参数1，类型2 参数2，···）&#123;</span><br><span class="line">        程序语句;</span><br><span class="line">        ···     //构造方法没有返回值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造方法的声明中，一定要注意一下几点：</p><ol><li>构造方法的名称必须与类名称一致。</li><li>构造方法的声明处不能有任何返回值类型的声明。</li><li>不能在构造方法中使用return返回一个值。</li></ol><p>例如，声明一个构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;         <span class="comment">// 声明构造方法</span></span><br><span class="line">        System.out.println(<span class="string">"一个新的Person对象诞生。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"声明对象：Person per = null;"</span>);</span><br><span class="line">        Person per = <span class="keyword">null</span>;                <span class="comment">// 声明对象时不调用构造</span></span><br><span class="line">        System.out.println(<span class="string">"实例化对象：per = new Person();"</span>);</span><br><span class="line">        per = <span class="keyword">new</span> Person();               <span class="comment">// 实例化对象时调用构造</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">声明对象：Person per = null;</span><br><span class="line">实例化对象：per = new Person();</span><br><span class="line">一个新的Person对象诞生。</span><br></pre></td></tr></table></figure><p>需要说明的是，只要是类就必定存在构造方法，在Java中如果一个类中没有明确的声明一个构造方法时，则在编译时会直接生成一个无参数的、什么都不做的构造方法，也就是说，如果以上的Person类中没有明确的声明构造方法，实际上编译之后的类就会为用户自动加上以下形式的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面例子为通过构造方法为类中给属性赋值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person02</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;                           <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;                               <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person02</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;         <span class="comment">// 定义构造方法为属性初始化</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);                        <span class="comment">// 为name属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.setAge(age);                          <span class="comment">// 为age属性赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;                            <span class="comment">// 取得信息的方法</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + getName() + <span class="string">"，年龄："</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;                       <span class="comment">// 取得姓名</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;                 <span class="comment">// 设置姓名</span></span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;                           <span class="comment">// 取得年龄</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;                     <span class="comment">// 设置年龄</span></span><br><span class="line">        <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; a &lt;= <span class="number">150</span>)&#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person02 per = <span class="keyword">new</span> Person02(<span class="string">"张三"</span>, <span class="number">30</span>);   <span class="comment">// 调用构造方法，传递两个参数</span></span><br><span class="line">        per.tell();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名：张三，年龄：30</span><br></pre></td></tr></table></figure><p>以上就是直接通过构造方法赋值，可以发现，这样赋值比对象实例化之后再单独调用setter方法更方便。需要说明的是，在一个类中如果已经明确地声明了一个构造方法，那么程序在编译时将不会再生成默认的构造方法，即一个类中应保证至少有一个构造方法。</p><p>与普通方法一样，构造方法也是可以重载的，只要每个构造方法的参数类型或参数个数不同，即可实现重载。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person03</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;                               <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;                                   <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person03</span><span class="params">()</span></span>&#123;&#125;                                <span class="comment">// 定义无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person03</span><span class="params">(String name)</span></span>&#123;                      <span class="comment">// 定义构造，为name属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person03</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;             <span class="comment">// 定义构造方法为属性初始化</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);                            <span class="comment">// 为name属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.setAge(age);                              <span class="comment">// 为age属性赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;                                <span class="comment">// 取得信息的方法</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + getName() + <span class="string">"，年龄："</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;                           <span class="comment">// 取得姓名</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;                     <span class="comment">// 设置姓名</span></span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;                               <span class="comment">// 取得年龄</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;                         <span class="comment">// 设置年龄</span></span><br><span class="line">        <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; a &lt;= <span class="number">150</span>)&#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person03 per = <span class="keyword">new</span> Person03(<span class="string">"张三"</span>);     <span class="comment">// 调用有一个参数的构造</span></span><br><span class="line">        per.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名：张三，年龄：0</span><br></pre></td></tr></table></figure><p>以上类的构造方法被重载了3次，在主方法中调用的是只有一个参数的构造方法（只设置姓名），因为没有设置年龄，所以年龄默认值为0。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在面向对象程序中，构造方法的主要作用是为类中的属性初始化。在之前的学习过程中可以发现，在程序中只要出现了“()”就表示调用了方法，那么这个方法实际上就是表示要调用构造方法，构造方法可视为一种特殊的方法，它的定义方式与普通方法类似。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="java基础" scheme="http://xiyouhujing.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记：封装性</title>
    <link href="http://xiyouhujing.github.io/2019/04/18/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B0%81%E8%A3%85%E6%80%A7/"/>
    <id>http://xiyouhujing.github.io/2019/04/18/Java笔记：封装性/</id>
    <published>2019-04-18T08:49:12.000Z</published>
    <updated>2019-11-22T07:10:33.979Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>封装是指隐藏对象的属性和实现细节，仅对外提供公共访问方式。封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。要访问该类的代码和数据，必须通过严格的接口控制。</p></blockquote><a id="more"></a><p>封装性是面向对象的第一大特性，所谓的封装性就是指对外部不可见，那么为什么要有封装性呢，首先观察以下程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person06</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person06 per = <span class="keyword">new</span> Person06();        <span class="comment">// 声明并实例化对象</span></span><br><span class="line">        per.name = <span class="string">"张三"</span>;                    <span class="comment">// 为name属性赋值</span></span><br><span class="line">        per.age = -<span class="number">30</span>;                        <span class="comment">// 为age属性赋值</span></span><br><span class="line">        per.tell();                           <span class="comment">// 调用方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名：张三，年龄：-30</span><br></pre></td></tr></table></figure><p>年龄赋值为-30在程序中是正确的，因为int可以取负值，但是在实际中没有人的年龄是负的。之前所列举的程序都是用对象直接访问类中的属性，这在面向对象法则中是不允许的，所以为了避免程序中这种错误的发生，在一般的开发中往往要将类中的属性封装，封装的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性封装： private 属性类型 属性名称；</span><br><span class="line">方法封装： private 方法返回值 方法名称（参数列表）&#123;&#125;</span><br></pre></td></tr></table></figure><p>例如，为程序加上封装属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person07</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;             <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;                 <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person07 per = <span class="keyword">new</span> Person07();</span><br><span class="line">        per.name = <span class="string">"张三"</span>;</span><br><span class="line">        per.age = -<span class="number">30</span>;</span><br><span class="line">        per.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序会编译出错，本程序与上面的程序除了在声明属性上有些区别外，并没有其他的区别，而就是一个小小的关键字private，使程序连编译都无法通过，而所提示的错误为“属性（name、age）为私有的”，所以不能由对象直接进行访问，这样就可以保证对象无法直接去访问类中是属性，从而保证堆入口处有所限制，可是这样以来又该如何访问此属性呢？为了解决属性必须封装且必须访问的矛盾，在Java开发中对于私有属性的访问有了以下的明确定义：“只要是被封装的属性，则必须通过setter和getter方法设置和取得”。</p><p>为前面类中的私有属性加上setter和getter方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person08</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + getName() + <span class="string">"，年龄："</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;                  <span class="comment">// 取得姓名</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;    <span class="comment">// 设置姓名</span></span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;              <span class="comment">// 取得年龄</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;        <span class="comment">// 设置年龄</span></span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person08 person = <span class="keyword">new</span> Person08();      <span class="comment">// 声明并实例化对象</span></span><br><span class="line">        person.setName(<span class="string">"张三"</span>);                <span class="comment">// 调用setter设置姓名</span></span><br><span class="line">        person.setAge(-<span class="number">30</span>);                    <span class="comment">// 调用setter设置年龄</span></span><br><span class="line">        person.tell();                         <span class="comment">// 输出信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名：张三，年龄：-30</span><br></pre></td></tr></table></figure><p>观察程序的结构，可以发现通过setter和getter方法可以设置和取得属性，而在主方法调用时，也是调用了setter()方法进行内容的赋值，也就是说如果想要堆设置进去的值进行检查，则只需要在setter()方法中加入检查代码即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person09</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a&gt;=<span class="number">0</span> &amp;&amp; a&lt;<span class="number">150</span>)&#123;             <span class="comment">// 在此处加上验证代码</span></span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person09 per = <span class="keyword">new</span> Person09();</span><br><span class="line">        per.setName(<span class="string">"张三"</span>);</span><br><span class="line">        per.setAge(-<span class="number">30</span>);</span><br><span class="line">        per.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名：张三，年龄：0</span><br></pre></td></tr></table></figure><p>因为程序中的setter方法处加入了验证代码，所以如果年龄数值不正确，则不会把值赋给age属性，所以程序的运行结果为0。</p><blockquote><p><strong>关于private的补充说明</strong></p><p>（1）类中的属性都必须封装，封装之后的属性必须通过setter和getter进行访问。</p><p>（2）面向对象的封装性本身并不是单单指private关键字，用private声明的属性或方法只能在其类的内部被调用，而不能在类的外部被调用。</p><p>（3）正常情况下，类中的方法直接写上方法名称就可以完成本类中的方法调用，如果在此时非要枪带哦时本类中的方法，也可以在调用时按“this.方法名称()”的形式编写。</p></blockquote><p>程序中的属性进行封装后，在使用类图表示封装属性时就必须按照如下的风格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-属性名称：数据类型</span><br></pre></td></tr></table></figure><p>其中“-”表示private。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;封装是指隐藏对象的属性和实现细节，仅对外提供公共访问方式。封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。要访问该类的代码和数据，必须通过严格的接口控制。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="java基础" scheme="http://xiyouhujing.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记：类与对象</title>
    <link href="http://xiyouhujing.github.io/2019/04/15/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    <id>http://xiyouhujing.github.io/2019/04/15/Java笔记：类与对象/</id>
    <published>2019-04-15T11:39:10.000Z</published>
    <updated>2019-11-22T07:28:45.026Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>在面向对象中，类和对象是最基本、最重要的组成单元。类实际上是表示一个客观世界某类群体的一些基本特征抽象。对象就是表示一个个具体的东西。例如，现实生活中，人可以称为一个类，因为人是一种广义的概念，并不是具体的。而某一个人就可以称为一个对象，某个人可以通过他的各种特征来描述，例如姓名、性别、年龄等。这些信息在面向对象的概念中就称为属性；当然人是可以吃饭、睡觉的，这些人的行为在类中就称为方法。</p></blockquote><a id="more"></a><p>如果要使用一个类，就一定要产生一个对象，每个对象之间是靠属性的不同来进行区分的，而每个对象所具备的操作就是类中规定好的方法。</p><h3 id="类的定义"><a class="markdownIt-Anchor" href="#类的定义"></a> 类的定义</h3><p>类是由属性和方法组成的，属性中定义的是类需要的一个个具体信息，实际上一个属性就是一个变量，而方法是一些操作行为，但是在程序设计中，定义类也是要按照具体的语法要求完成的，类的定义语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class 类名称&#123;</span><br><span class="line">    数据类型 属性；</span><br><span class="line">    ···</span><br><span class="line">    public 返回值的数据类型 方法名称（参数1，参数2...）&#123;</span><br><span class="line">        程序语句；</span><br><span class="line">        [return 表达式；]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>类中定义方法的补充说明</strong></p><p>可以发现，此处的方法与之前的方法定义有区别，并没有加上static关键字，这是因为此时定义的方法将有对象调用，而不像之前那样与主方法定义在一个类中并且由主方法之间调用。</p></blockquote><p>例如我们定义一个Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;             <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">int</span> age;                 <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;      <span class="comment">// 取得信息的方法</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类定义完成后，我们可以通过下图所示的图形样式来表示出类的定义：</p><table><thead><tr><th style="text-align:center">Person</th></tr></thead><tbody><tr><td style="text-align:center">name : String <br> age : int</td></tr><tr><td style="text-align:center">+ tell() : void</td></tr></tbody></table><ol><li>第一层表示类的名称，类的名称要求开头首字母大写。</li><li>第二层表示属性的定义，按照“访问权限 属性名称：属性类型”的格式定义，在本类中因为声明属性处没有写任何的访问权限，所以前面暂时不加任何的符号。</li><li>第三层表示类中方法的定义，按照“访问权限 方法名称():方法返回值”的格式定义，在本类中，方法的声明处加上了public（此为访问权限，表示任何地方都可以访问），所以使用“+”表示，另外，如果方法中由传递的参数，则此方法定义格式为“访问权限 方法名称(参数名称: 参数类型, 参数名称: 参数类型, …): 方法返回值”</li></ol><h3 id="对象的创建及使用"><a class="markdownIt-Anchor" href="#对象的创建及使用"></a> 对象的创建及使用</h3><p>要想使用一个类则必须由对象，下面给出了对象的创建格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名称 = null;                 // 声明对象</span><br><span class="line">对象名称 = new 类名();                // 实例化对象</span><br></pre></td></tr></table></figure><p>以上格式产生对象分为声明对象和实例化对象两步。</p><p>当然也可以直接通过以下方式一步完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名称 = new 类名();</span><br></pre></td></tr></table></figure><blockquote><p>以上格式与之前数组定义的格式相似，因为类和数组都属于引用数据类型，只要引用数据类型的使用格式都可以使用如上的定义样式。</p></blockquote><p>创建对象的具体范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;                    <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">int</span> age;                        <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;             <span class="comment">// 取得信息的方法</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> Person();   <span class="comment">// 创建并实例化对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要使用对象访问类中的某个属性或方法可以使用如下的语法实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问属性：对象名称.属性名</span><br><span class="line">访问方法：对象名称.方法名()</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span>&#123;</span><br><span class="line">    String name;                <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">int</span> age;                    <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person2 per = <span class="keyword">null</span>;            <span class="comment">// 声明对象</span></span><br><span class="line">        per = <span class="keyword">new</span> Person2();           <span class="comment">// 实例化对象</span></span><br><span class="line">        per.name = <span class="string">"张三"</span>;            <span class="comment">// 为name属性赋值</span></span><br><span class="line">        per.age = <span class="number">30</span>;                 <span class="comment">// 为age属性赋值</span></span><br><span class="line">        per.tell();                   <span class="comment">// 调用类中的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名：张三，年龄：30</span><br></pre></td></tr></table></figure><h3 id="创建多个对象"><a class="markdownIt-Anchor" href="#创建多个对象"></a> 创建多个对象</h3><p>前面介绍过创建一个对象的方法，可以按照同样的格式同时创建多个对象，每个对象会分别占据自己的堆、栈空间。</p><p>创建两个对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person3</span></span>&#123;</span><br><span class="line">    String name;          <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="keyword">int</span> age;              <span class="comment">// 声明年龄属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person3 per1 = <span class="keyword">null</span>;              <span class="comment">// 声明per1对象</span></span><br><span class="line">        Person3 per2 = <span class="keyword">null</span>;              <span class="comment">// 声明per2对象</span></span><br><span class="line">        per1 = <span class="keyword">new</span> Person3();             <span class="comment">// 实例化per1对象</span></span><br><span class="line">        per2 = <span class="keyword">new</span> Person3();             <span class="comment">// 实例化per2对象</span></span><br><span class="line">        per1.name = <span class="string">"张三"</span>;               <span class="comment">// 设置per1对象的name属性内容</span></span><br><span class="line">        per1.age = <span class="number">30</span>;                    <span class="comment">// 设置per1对象的age属性内容</span></span><br><span class="line">        per2.name = <span class="string">"李四"</span>;               <span class="comment">// 设置per2对象的name属性内容</span></span><br><span class="line">        per2.age = <span class="number">33</span>;                    <span class="comment">// 设置per2对象的age属性内容</span></span><br><span class="line">        System.out.print(<span class="string">"per1对象中的内容 --&gt;"</span>);</span><br><span class="line">        per1.tell();                      <span class="comment">// per1调用方法</span></span><br><span class="line">        System.out.print(<span class="string">"per2对象中的内容 --&gt;"</span>);</span><br><span class="line">        per2.tell();                      <span class="comment">// per2调用方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">per1对象中的内容 --&gt;姓名：张三，年龄：30</span><br><span class="line">per2对象中的内容 --&gt;姓名：李四，年龄：33</span><br></pre></td></tr></table></figure><p>类属于引用数据类型，而且从数组的使用上也可以发现，引用数据类型就是指一段堆内存空间可以同时被多个栈内存指向。下面来看一个引用传递的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person4</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person4 per1 = <span class="keyword">null</span>;</span><br><span class="line">        Person4 per2 = <span class="keyword">null</span>;</span><br><span class="line">        per1 = <span class="keyword">new</span> Person4();</span><br><span class="line">        per2 = per1;                 <span class="comment">// 把per1的堆内存空间使用权给per2</span></span><br><span class="line">        per1.name = <span class="string">"张三"</span>;</span><br><span class="line">        per1.age = <span class="number">30</span>;</span><br><span class="line">        <span class="comment">// 设置per2对象的内容，实际上就是设置per1对象的内容</span></span><br><span class="line">        per2.age = <span class="number">33</span>;</span><br><span class="line">        System.out.print(<span class="string">"per1对象中的内容 --&gt;"</span>);</span><br><span class="line">        per1.tell();</span><br><span class="line">        System.out.print(<span class="string">"per2对象中的内容 --&gt;"</span>);</span><br><span class="line">        per2.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">per1对象中的内容 --&gt;姓名：张三，年龄：33</span><br><span class="line">per2对象中的内容 --&gt;姓名：张三，年龄：33</span><br></pre></td></tr></table></figure><p>从程序运行结果可以发现，两个对象的输出内容是一样的，实际上所谓的引用传递就是将一个堆内存空间的使用权给多个栈内存空间，每个栈内存空间都可以修改堆内存的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person5</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"，年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person5 per1 = <span class="keyword">null</span>;</span><br><span class="line">        Person5 per2 = <span class="keyword">null</span>;</span><br><span class="line">        per1 = <span class="keyword">new</span> Person5();</span><br><span class="line">        per2 = <span class="keyword">new</span> Person5();</span><br><span class="line">        per1.name = <span class="string">"张三"</span>;</span><br><span class="line">        per1.age = <span class="number">30</span>;</span><br><span class="line">        per2.name = <span class="string">"李四"</span>;</span><br><span class="line">        per2.age = <span class="number">33</span>;</span><br><span class="line">        per2 = per1;</span><br><span class="line">        System.out.print(<span class="string">"per1对象中的内容 --&gt;"</span>);</span><br><span class="line">        per1.tell();</span><br><span class="line">        System.out.print(<span class="string">"per2对象中的内容 --&gt;"</span>);</span><br><span class="line">        per2.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">per1对象中的内容 --&gt;姓名：张三，年龄：30</span><br><span class="line">per2对象中的内容 --&gt;姓名：张三，年龄：30</span><br></pre></td></tr></table></figure><p>因为per2本身有堆内存空间，所以如果要想再指向per1对应的空间，则必须先断开已有的连接。而per2原来的空间没有任何的栈内存空间所引用，就形成了垃圾空间，等待垃圾收集机制进行回收。</p><blockquote><p><strong>关于垃圾空间的释放</strong></p><p>Java本身提供垃圾收集机制（Garbage Collection, GC），会不定期地释放不用的内存空间，只要对象不使用了，就会等待GC释放空间。</p></blockquote><p>从上面的程序中明确的一点，即一个栈内存空间只能指向一个堆内存空间，如果要想再指向其他的堆内存空间，则必须先断开已有的指向才能分配新的指向。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在面向对象中，类和对象是最基本、最重要的组成单元。类实际上是表示一个客观世界某类群体的一些基本特征抽象。对象就是表示一个个具体的东西。例如，现实生活中，人可以称为一个类，因为人是一种广义的概念，并不是具体的。而某一个人就可以称为一个对象，某个人可以通过他的各种特征来描述，例如姓名、性别、年龄等。这些信息在面向对象的概念中就称为属性；当然人是可以吃饭、睡觉的，这些人的行为在类中就称为方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="java基础" scheme="http://xiyouhujing.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java开发实战经典习题4-6</title>
    <link href="http://xiyouhujing.github.io/2019/04/05/Java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E7%BB%8F%E5%85%B8%E4%B9%A0%E9%A2%984-6/"/>
    <id>http://xiyouhujing.github.io/2019/04/05/Java开发实战经典习题4-6/</id>
    <published>2019-04-05T10:36:08.000Z</published>
    <updated>2019-11-22T06:50:07.089Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>Java开发实战第四章习题：数组与方法。掌握数组的定义及使用方法、掌握数组的应用传递、掌握方法及方法的重载、使用方法接收和返回一个数组、了解Java对数组的操作支持。</p></blockquote><a id="more"></a><h4 id="编写程序求1230的和并显示要求使用方法完成"><a class="markdownIt-Anchor" href="#编写程序求1230的和并显示要求使用方法完成"></a> 编写程序求1!+2!+···+30!的和并显示，要求使用方法完成。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;<span class="number">31</span>; i++)&#123;</span><br><span class="line">            sum = sum + Factorial(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"1!+2!+...+30! = "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">Factorial</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">float</span> temp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=x; i++)&#123;</span><br><span class="line">            temp = temp*i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以利用递归的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;<span class="number">31</span>; i++)&#123;</span><br><span class="line">            sum = sum + Factorial(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"1!+2!+...+30! = "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">Factorial</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x * Factorial(x-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：<code>1!+2!+...+30! = 2.7441084E32</code>。</p><h4 id="定义一个由整数组成的数组要求求出其中的奇数个数和偶数个数"><a class="markdownIt-Anchor" href="#定义一个由整数组成的数组要求求出其中的奇数个数和偶数个数"></a> 定义一个由整数组成的数组，要求求出其中的奇数个数和偶数个数。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">45</span>, <span class="number">32</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">98</span>&#125;;</span><br><span class="line">        oddEven(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">oddEven</span><span class="params">(<span class="keyword">int</span> temp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> odd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> even = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;temp.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> n = temp[i] % <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (n==<span class="number">0</span>)&#123;</span><br><span class="line">                even = even + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                odd = odd +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"奇数个数为："</span> + odd);</span><br><span class="line">        System.out.println(<span class="string">"偶数个数为："</span> + even);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="现在有如下的一个数组int-oldarr1345006605476705要求将以上数组中值为0的项去掉将不为0的值存入一个新的数组生成新数组为int-newarr134566547675"><a class="markdownIt-Anchor" href="#现在有如下的一个数组int-oldarr1345006605476705要求将以上数组中值为0的项去掉将不为0的值存入一个新的数组生成新数组为int-newarr134566547675"></a> 现在有如下的一个数组<code>int oldArr[]={1,3,4,5,0,0,6,6,0,5,4,7,6,7,0,5};</code>，要求将以上数组中值为0的项去掉，将不为0的值存入一个新的数组，生成新数组为<code>int newArr[]={1,3,4,5,6,6,5,4,7,6,7,5}</code>。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldArr[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> newArr[]= <span class="keyword">new</span> <span class="keyword">int</span>[oldArr.length];</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;oldArr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (oldArr[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                newArr[j] = oldArr[i];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;j; i++)&#123;</span><br><span class="line">            System.out.print(newArr[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义一个整型数组求出数组元素的和-数组元素的最大值和最小值并输出所求的结果"><a class="markdownIt-Anchor" href="#定义一个整型数组求出数组元素的和-数组元素的最大值和最小值并输出所求的结果"></a> 定义一个整型数组，求出数组元素的和、数组元素的最大值和最小值，并输出所求的结果。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> temp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = temp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> min = temp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length; i++)&#123;</span><br><span class="line">            sum = sum + temp[i];</span><br><span class="line">            <span class="keyword">if</span> (max &lt; temp[i])&#123;</span><br><span class="line">                max = temp[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; temp[i])&#123;</span><br><span class="line">                min = temp[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"数组元素之和为："</span> + sum);</span><br><span class="line">        System.out.println(<span class="string">"数组中的最大值为："</span> + max);</span><br><span class="line">        System.out.println(<span class="string">"数组中的最小值为："</span> + min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="给出10个整数int型然后任意查询一个数字是否存在再该10个数字内"><a class="markdownIt-Anchor" href="#给出10个整数int型然后任意查询一个数字是否存在再该10个数字内"></a> 给出10个整数（int型），然后任意查询一个数字是否存在再该10个数字内。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">7</span>;</span><br><span class="line">        print(num1, arr);</span><br><span class="line">        print(num2, arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> temp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;temp.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (x == temp[i])&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(x + <span class="string">"在这十个数中"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(x + <span class="string">"不在这十个数中"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义一个包含10个元素的数组对其进行赋值使每个元素的值等于其下标然后输出最后将这个数组倒置即首尾交换后输出"><a class="markdownIt-Anchor" href="#定义一个包含10个元素的数组对其进行赋值使每个元素的值等于其下标然后输出最后将这个数组倒置即首尾交换后输出"></a> 定义一个包含10个元素的数组，对其进行赋值，使每个元素的值等于其下标，然后输出；最后将这个数组倒置（即首尾交换）后输出。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = arr.length-<span class="number">1</span>; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">            System.out.print(arr[j] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="给出10个老师的打分对10个老师的打分找到最高分"><a class="markdownIt-Anchor" href="#给出10个老师的打分对10个老师的打分找到最高分"></a> 给出10个老师的打分，对10个老师的打分找到最高分。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">67</span>, <span class="number">88</span>, <span class="number">78</span>, <span class="number">69</span>, <span class="number">100</span>, <span class="number">57</span>, <span class="number">81</span>, <span class="number">89</span>, <span class="number">94</span>, <span class="number">91</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;score.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (max&lt;score[i])&#123;</span><br><span class="line">                max = score[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"10个老师打分中最高分为："</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有30个0~9之间的数字分别统计0~9这10个数字分别出现了多少次"><a class="markdownIt-Anchor" href="#有30个0~9之间的数字分别统计0~9这10个数字分别出现了多少次"></a> 有30个0~9之间的数字，分别统计0~9这10个数字分别出现了多少次。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = count(i, arr);</span><br><span class="line">            System.out.println(i + <span class="string">"在数组中出现的次数为："</span> + num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> temp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;temp.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (x==temp[i])&#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义一个整型数组保存10个数据利用程序完成将最大值保存在数组中的第一个元素的操作"><a class="markdownIt-Anchor" href="#定义一个整型数组保存10个数据利用程序完成将最大值保存在数组中的第一个元素的操作"></a> 定义一个整型数组，保存10个数据，利用程序完成将最大值保存在数组中的第一个元素的操作。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">9</span>, <span class="number">45</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">51</span>, <span class="number">65</span>, <span class="number">21</span>, <span class="number">200</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">"原数组为："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;arr.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (max&lt;arr[j])&#123;</span><br><span class="line">                max = arr[j];</span><br><span class="line">                num = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = max;</span><br><span class="line">        arr[num] = temp;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);</span><br><span class="line">        System.out.println(<span class="string">"最大值保存在数组中的第一个元素后:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在排序号的数组中添加一个数字将添加后的数组插入到数组合适的位置"><a class="markdownIt-Anchor" href="#在排序号的数组中添加一个数字将添加后的数组插入到数组合适的位置"></a> 在排序号的数组中添加一个数字，将添加后的数组插入到数组合适的位置。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4_10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>&#125;;</span><br><span class="line">        insert(num, arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newArr[] = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (x&lt;arr[i])&#123;</span><br><span class="line">                temp = i;</span><br><span class="line">                newArr[temp] = x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                temp = arr.length;   <span class="comment">//如果要插入的数字是否比数组中最后一个数字大</span></span><br><span class="line">                newArr[temp] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;temp; j++)&#123;</span><br><span class="line">            newArr[j] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = temp+<span class="number">1</span>; j&lt;newArr.length; j++)&#123;</span><br><span class="line">            newArr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;newArr.length; i++)&#123;</span><br><span class="line">            System.out.print(newArr[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java开发实战第四章习题：数组与方法。掌握数组的定义及使用方法、掌握数组的应用传递、掌握方法及方法的重载、使用方法接收和返回一个数组、了解Java对数组的操作支持。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="Java练习" scheme="http://xiyouhujing.github.io/tags/Java%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记：Java新特性对数组的支持</title>
    <link href="http://xiyouhujing.github.io/2019/04/05/Java%E7%AC%94%E8%AE%B0%EF%BC%9AJava%E6%96%B0%E7%89%B9%E6%80%A7%E5%AF%B9%E6%95%B0%E7%BB%84%E7%9A%84%E6%94%AF%E6%8C%81/"/>
    <id>http://xiyouhujing.github.io/2019/04/05/Java笔记：Java新特性对数组的支持/</id>
    <published>2019-04-05T10:10:19.000Z</published>
    <updated>2019-11-22T03:23:23.787Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java新特性可变参数"><a class="markdownIt-Anchor" href="#java新特性可变参数"></a> Java新特性——可变参数</h3><p>在调用一个方法时，必须根据方法的定义传递指定的参数，但是在JDK 1.5（JAVA SE 5.0）之后产生了新的概念——可变参数，即方法中可以接收的参数不再是固定的，而是随着需要传递的，可变参数的定义格式如下：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 方法名称(类型...参数名称)&#123;&#125;</span><br></pre></td></tr></table></figure><p>向方法中传递可变参数后，其中的参数是以数组的形式保存下来的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"不传递参数 （fun()）："</span>);</span><br><span class="line">        fun();                                      <span class="comment">// 不传递参数</span></span><br><span class="line">        System.out.print(<span class="string">"\n传递1个参数 （fun(1)）："</span>);</span><br><span class="line">        fun(<span class="number">1</span>);                                     <span class="comment">// 传递一个参数</span></span><br><span class="line">        System.out.print(<span class="string">"\n传递5个参数 （fun(1, 2, 3, 4, 5)）："</span>);</span><br><span class="line">        fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);                         <span class="comment">// 传递五个参数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span>...arg)</span></span>&#123;              <span class="comment">// 可变参数，可以接收任意多个参数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arg.length; i++)&#123;</span><br><span class="line">            System.out.print(arg[i] + <span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不传递参数 （fun()）：</span><br><span class="line">传递1个参数 （fun(1)）：1、</span><br><span class="line">传递5个参数 （fun(1, 2, 3, 4, 5)）：1、2、3、4、5、</span><br></pre></td></tr></table></figure><p>在使用可变参数的时候，也可以直接向方法中传递一个数组，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> temp[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;      <span class="comment">// 定义数组</span></span><br><span class="line">fun(temp);                   <span class="comment">// 向可变参数中传递数组</span></span><br></pre></td></tr></table></figure><p>对于以上传递数组的操作，也可以变成以下形式的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="java新特性foreach输出"><a class="markdownIt-Anchor" href="#java新特性foreach输出"></a> Java新特性——foreach输出</h3><p>数组的输出一般都会使用for循环，但是在JDK 1.5之后为了方便数组的输出，提供了一种foreach语法，此语法的使用格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(数据类型 变量名称：数组名称)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"不传递参数 （fun()）："</span>);</span><br><span class="line">        fun();                                 <span class="comment">// 不传递参数</span></span><br><span class="line">        System.out.print(<span class="string">"\n传递1个参数 （fun(1)）:"</span>);</span><br><span class="line">        fun(<span class="number">1</span>);                                <span class="comment">// 传递一个参数</span></span><br><span class="line">        System.out.print(<span class="string">"\n传递5个参数 （fun(1, 2, 3, 4, 5)）："</span>);</span><br><span class="line">        fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);                    <span class="comment">// 传递五个参数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span>...arg)</span></span>&#123;                <span class="comment">// 可变参数，可以接收任意多个参数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : arg)&#123;                            <span class="comment">// 使用foreach输出</span></span><br><span class="line">            System.out.print(x + <span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不传递参数 （fun()）：</span><br><span class="line">传递1个参数 （fun(1)）:1、</span><br><span class="line">传递5个参数 （fun(1, 2, 3, 4, 5)）：1、2、3、4、5、</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;java新特性可变参数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java新特性可变参数&quot;&gt;&lt;/a&gt; Java新特性——可变参数&lt;/h3&gt;
&lt;p&gt;在调用一个方法时，必须根据方法的定义传递指定的参数，但是在JDK 1.5（JAVA SE 5.0）之后产生了新的概念——可变参数，即方法中可以接收的参数不再是固定的，而是随着需要传递的，可变参数的定义格式如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="java基础" scheme="http://xiyouhujing.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记：数组的引用传递</title>
    <link href="http://xiyouhujing.github.io/2019/04/05/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%95%B0%E7%BB%84%E7%9A%84%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/"/>
    <id>http://xiyouhujing.github.io/2019/04/05/Java笔记：数组的引用传递/</id>
    <published>2019-04-05T08:11:43.000Z</published>
    <updated>2019-11-22T07:07:32.726Z</updated>
    
    <content type="html"><![CDATA[<h3 id="传递及返回数组"><a class="markdownIt-Anchor" href="#传递及返回数组"></a> 传递及返回数组</h3><p>前面的方法操作中，传递和返回的都是基本数据类型，除此之外，方法中也可以传递和返回数组。如果要向方法中传递一个数组，则方法的接收参数必须是符合其类型的数组。而且数组属于引用数据类型，所以在把数组传递进方法之后，如果方法对数组本身做了任何修改，修改结果也将保存下来。</p><a id="more"></a><p>向方法中传递数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDefDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;                  <span class="comment">// 使用静态初始化定义数组</span></span><br><span class="line">        fun(temp);                               <span class="comment">// 传递数组引用</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length; i++)&#123;   <span class="comment">// 循环输出</span></span><br><span class="line">            System.out.print(temp[i] + <span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x[])</span></span>&#123;             <span class="comment">// 接收整型数组引用</span></span><br><span class="line">        x[<span class="number">0</span>] = <span class="number">6</span>;                                <span class="comment">//修改第1个元素的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：<code>6、3、5、</code></p><p>在程序中将第一个整型数组temp传递到了方法中，然后在fun()方法中将此整型数组的第一个元素的内容修改为6，因为数组是引用数据类型，所以，即使方法本身没有任何的返回值，修改后的结果也会被保存下来。一开始声明的temp数组的内容是“1、3、5”，但是将此数组传递到了方法中，并使用数组x接收，也就是说此时temp实际上是将堆内存空间的使用权传递给了方法，为数组的具体内容起了一个别名x，然后在方法中通过x修改数组中的内容，方法执行完毕之后，数组x因为是局部变量所以就失效了，但是对于数组内容的改变却保留了下来，也就是<strong>数组引用传递的过程</strong>。</p><p>既然方法可以接收一个数组，那么方法也可以返回一个数组，只需要返回值类型声明处明确地写出返回的数据类型即可。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayRefDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp[] = fun();                   <span class="comment">// 通过方法实例化数组</span></span><br><span class="line">        print(temp);                          <span class="comment">// 向print()方法中传递数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x[])</span></span>&#123;        <span class="comment">// 接收数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++)&#123;   <span class="comment">// 循环输出</span></span><br><span class="line">            System.out.print(x[i] + <span class="string">"、"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] fun()&#123;</span><br><span class="line">        <span class="keyword">int</span> ss[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;          <span class="comment">// 定义一个数组</span></span><br><span class="line">        <span class="keyword">return</span> ss;                           <span class="comment">// 返回数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果：<code>1、3、5、7、9、</code>。</p><h3 id="范例数组排序"><a class="markdownIt-Anchor" href="#范例数组排序"></a> 范例——数组排序</h3><p>将数组排序程序修改成一个方法的调用形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDefDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">67</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">75</span>, <span class="number">90</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> age[] = &#123;<span class="number">31</span>, <span class="number">30</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">39</span>&#125;;</span><br><span class="line">        sort(score);                                      <span class="comment">// 数组排序</span></span><br><span class="line">        print(score);                                     <span class="comment">// 数组打印</span></span><br><span class="line">        System.out.println(<span class="string">"\n----------------------------------------"</span>);</span><br><span class="line">        sort(age);                                      <span class="comment">// 数组排序</span></span><br><span class="line">        print(age);                                     <span class="comment">// 数组打印</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> temp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; temp.length; i++)&#123;            <span class="comment">// 使用冒泡排序算法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; temp.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (temp[i]&lt;temp[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> x = temp[i];</span><br><span class="line">                    temp[i] = temp[j];</span><br><span class="line">                    temp[j] = x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;x.length; i++)&#123;</span><br><span class="line">            System.out.print(x[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">67697587899090100</span><br><span class="line">----------------------------------------</span><br><span class="line">1891718303139</span><br></pre></td></tr></table></figure><p>以上程序分别把排序和输出的功能定义为方法，然后直接调用这两个方法进行数组的排序和输出。</p><p>当然，对于排序操作，Java本身也是有类库支持的，我们可以直接使用“java.util.Arrays.sort(数组名称)”对数组进行排序，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDefDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score[] = &#123;<span class="number">67</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">75</span>, <span class="number">90</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> age[] = &#123;<span class="number">31</span>, <span class="number">30</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">39</span>&#125;;</span><br><span class="line">        java.util.Arrays.sort(score);                     <span class="comment">// 使用Java提供的排序操作</span></span><br><span class="line">        print(score);                                      <span class="comment">// 输出数组</span></span><br><span class="line">        System.out.println(<span class="string">"\n-------------------------------"</span>);</span><br><span class="line">        java.util.Arrays.sort(age);</span><br><span class="line">        print(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;x.length; i++)&#123;</span><br><span class="line">            System.out.print(x[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">67697587899090100</span><br><span class="line">-------------------------------</span><br><span class="line">1891718303139</span><br></pre></td></tr></table></figure><h3 id="范例数组复制"><a class="markdownIt-Anchor" href="#范例数组复制"></a> 范例——数组复制</h3><p>如果给定两个数组，将其中一个数组指定位置的内容复制给另外一个数组，可以是使用方法来完成，在方法中接收5个参数，分别为“源数组名称”、“源数组开始点”、“目标数组名称”、“目标数组开始点”、“复制长度”。具体操作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayCopyDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i1[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;             <span class="comment">// 源数组</span></span><br><span class="line">        <span class="keyword">int</span> i2[] = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>&#125;;    <span class="comment">// 目标数组</span></span><br><span class="line">        copy(i1, <span class="number">3</span>, i2, <span class="number">1</span>, <span class="number">3</span>);                <span class="comment">// 调用复制方法</span></span><br><span class="line">        print(i2);                                          <span class="comment">// 输出数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 参数含义：源数组名称、源数组开始点、目标数组名称、目标数组开始点、复制长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> s1, <span class="keyword">int</span> o[], <span class="keyword">int</span> s2, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            o[s2+i] = s[s1+i];                             <span class="comment">// 修改目标数组内容</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;x.length; i++)&#123;</span><br><span class="line">            System.out.print(x[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：<code>114565566778899</code>。</p><p>同样的，在Java中也存在复制的类库支持，直接使用System.arraycopy()方法即可，此方法中也要接收参数，参数的接收顺序及意义与上面的范例中的copy()方法相同。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayCopyDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i1[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> i2[] = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>&#125;;</span><br><span class="line">        System.arraycopy(i1, <span class="number">3</span>, i2, <span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        print(i2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;x.length; i++)&#123;</span><br><span class="line">            System.out.print(x[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;传递及返回数组&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#传递及返回数组&quot;&gt;&lt;/a&gt; 传递及返回数组&lt;/h3&gt;
&lt;p&gt;前面的方法操作中，传递和返回的都是基本数据类型，除此之外，方法中也可以传递和返回数组。如果要向方法中传递一个数组，则方法的接收参数必须是符合其类型的数组。而且数组属于引用数据类型，所以在把数组传递进方法之后，如果方法对数组本身做了任何修改，修改结果也将保存下来。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiyouhujing.github.io/categories/Java/"/>
    
    
      <category term="java基础" scheme="http://xiyouhujing.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
